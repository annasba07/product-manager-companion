gement loop, a user would return, they would then create content by submitting or creating a new repo, and then other users would be notified of that, bringing them back into the product.
In addition to repos and updates, GitHub enabled adjacent types of value generation, allowing users to pin issues, comment, and create other types of collaboration-focused content, which expands the value generation that can be created in this step of the loop.
We can also think about increasing throughput by expanding value distributors.
Let's look at the early loop of the direct-to-consumer product IPSY. They acquire a new subscriber to IPSY, then use the revenue from those new users to create content, and then that content would be distributed by Michelle Phan, their founder and a YouTube influencer, which would attract more subscribers. The value distributor here is an influencer.
To expand the value distributor step, they signed on other YouTube influencers around the same topic. They then expanded throughput even further beyond YouTube influencers to Instagram bloggers and other types of influencers on other platforms. They then after ran out of those existing influencers on existing platforms, they created a studio that created even more of these influencers on these platforms to increase throughput even further.
The final way to improve through throughput is platforms. Adding a platform does not target a specific step in our loop, but tends to rather expand all of the different steps.
Let's look at an example from the gaming industry, with Fortnite vs. PUBG. Both games use a very similar gaming dynamic of a "battle royale" format. They had the same loops where they would acquire a new user, the user plays a game, and then they would invite friends in order to compete with them, which acquires more new users.
Now, one of the key differences here is that Fortnite was much quicker to expand to more platforms. Fortnite started with the Mac version, then went to Windows, X-Box, PlayStation, iOS, and Android. At every platform step expansion, what they're doing is increasing the throughput, expanding the width of the steps at every step within the loop, because they're increasing the total population of eligible people that can participate and flow through this loop.
This quicker platform expansion drove more growth at a quicker pace, leading them to eventually exceed PUBG's growth by many multiples.
In the next lesson, we'll continue with thinking about how to improve acquisition loops by talking through the second two main levers.
Lesson Summary
To optimize your loop, there are three different strategies.
The first is by removing bad friction that is preventing the loop from compounding faster.
The second is by adding good friction in the loop to reinforce its quality and effectiveness over time.
And then the third way is by increasing throughput of a step of the loop.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
Acquisition Loops
8 min
Viral Loops
8 min
Content Loops
7 min
Paid Loops
12 min
Improving Acquisition I
11 min
Improving Acquisition II
7 min
Retention Strategy
64 min
Monetization Strategy
48 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
7:12
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we introduced three ways to improve your acquisition strategy: optimizing a loop, adding a new loop, or leveraging non-scalable spikes.
We covered optimization strategies, which included removing bad friction, adding good friction, and increasing throughput.
We'll now discuss the other two acquisition strategies: adding new loops and leveraging non-scalable spikes. Let's start with adding a loop.
There are a few things to consider when adding a new loop. First, adding new loops increases the overall ceiling of our growth strategy. It can help make other loops more efficient.
At HubSpot, they started with a combination of a company-generated content loop with an inside sales loop.
But in recent years, HubSpot started to layer on product lead loops with a free CRM product, as well as free tiers of their other products.
1
This created viral loops, which generated more leads. This not only increases the total number of leads, increasing the overall growth ceiling, but it helps make their existing sales loop even more efficient and spin even faster.
Second, when adding new loops, thinking about the order of operations is important. Oftentimes, to enable one type of loop, you need to do something else first to make it a possibility.
Pinterest, for example, started in the early days with a user-generated content, user-distributed loop. They distributed that content to Facebook via the Facebook Open Graph. That loop enabled the base of content needed for the user-generated company-distributed loop in terms of SEO.
In recent years, they started to experiment with paid marketing in order to generate even more users. They're only able to use paid marketing effectively in this case because of their large base of content that they can use for personalized long tail ads, as well as a heavy advertiser base to monetize at a high enough rate to make paid ads worth it.
It's important to understand that Pinterest would not have been able to get these results if they had gone in the reverse order, by starting with the paid marketing loop. They would have had inefficient economics, and it likely wouldn't have worked.
The third consideration is that adding new loops can be extremely difficult.
Products are built to fit specific channels, not the other way around. So you can't just slap a channel onto an existing product. Adding new loops typically requires brand new features or brand new products in order to truly enable them.
For example, when mobile emerged, Facebook tried to add loops within the mobile channel. They experienced a number of failures around Facebook Home, Slingshot, the Poke app, and even a Facebook phone, before they found some wins with things like Facebook Messenger, Instagram, WhatsApp, and Facebook Lite.
1
The third acquisition strategy is leveraging non-scalable spikes. These are often used for loops that are not yet mature, as a way to kickstart the loop in order to reach a sustainable point.
Non-scalable spikes are essentially unscalable tactics or strategies that artificially increase the momentum of a loop for a temporary period of time.
1
There are six ways we can think about non-scalable spikes:
Paid acquisition
Promotions and incentives
Artificial scarcity
Press
Events
Faking elements or manually scaling a loop.
Let's start by looking at an example of paid acquisition.
BuzzFeed's core loop is a company-generated content loop based on a new or returning reader returning to see an article. Revenue is generated and reinvested to create more content, and then users share that content with others, resulting in more new or returning readers.
This loop relies on having a base of existing readers that will share the content that is generated. BuzzFeed's solution in the early days was to promote their articles with paid acquisition to get the spread of each article going.
At some point, BuzzFeed hit a tipping point of having a large enough base of existing readers to distribute their content, so they no longer needed paid acquisition to get the sharing cycle off of the ground.
The second type of non-scalable spike are promotions and incentives.
Uber has successfully leveraged promotions and incentives to drive its core loop.
In new markets, Uber leveraged various promotions to incentivize new user sign ups. One such promotion was UberKITTENS, where on a single day you could order an Uber with a bunch of kittens or puppies to play with. This created strong word of mouth, press and a spike in initial users until that core viral word of mouth loop had enough momentum to get going.
The third type of non-scalable spike is artificial scarcity, which involves motivating users who might otherwise not be motivated.
Robinhood has successfully used artificial scarcity to develop and reinforce its core loop: A new user signs up, wants access to a new feature and tells others about that new feature and product.
In this loop, getting user to share is critical and it becomes important to understand why a user would be motivated to share with others.
Every time Robinhood launches a new feature, they add artificial scarcity to spike this elemental loop by requiring users to register and share on a waitlist.
This action motivates users to share so that they could get early access to the feature, which spikes that element of a loop to get it to a sustainable point.
Another common non-scalable spike is the use of press; however, it's a common mistake to forget that press is a means to an end. We need to ensure we're using the press as a spike to enable some other type of sustainable loop.
The fifth type of non-scalable spike is the use of events, meetups or conferences.
In the early days of Yelp, they structured one of their core loops where a new user signed up and wrote a review. That review would be indexed on Google, and then people would find those reviews and become users and reviewers themselves.
To get the loop moving though, Yelp needed to generate a certain base of reviews so that there were enough pages for Google to index.
1
Yelp's solution was to launch Yelp Elite, which linked members of the Yelp community to events. These events helped drive more reviews, and it was especially helpful in building that density of content that Yelp needed to launch in new markets.
1
Finally, we can explore fake elements or manual actions until the loop reaches a sustainable point.
Grubhub's core loop in the early days was new restaurants join, they create a restaurant page, Google indexes the page, and that attracts more diners, which attracts more restaurants.
Grubhub looked at this loop and tried to identify a place where they could spike an element to get it going. They chose to focus on creating these restaurant pages manually.
To create those restaurant pages, Grubhub faked this part of the loop. They went around and collected menus from restaurants by hand, scanned them, and turned them into pages automatically.
When they did this, they spiked this step of the loop, which helped accelerate the loop's growth to a sustainable point.
1
We've gone through the six types of non-scalable spikes in addition to adding loops. Once again, these are all strategies that are a means to an end, but by themselves, the non-scalable spikes do not create a sustainable growth strategy.
In the next section, we're going to dive into the second pillar of our growth strategy: retention.
Lesson Summary
Adding new loops increases the ceiling and makes other loops more efficient. But order of operations matters, and adding a new loop is extremely difficult.
Non-scalable spikes are essentially unscalable tactics or strategies that artificially increase the momentum of a loop for a temporary period of time.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
Introduction to Retention
6 min
Defining a Retention Metric
12 min
Analyzing and Improving Engagement
14 min
Analyzing and Improving Activation
19 min
Analyzing and Improving Resurrection
13 min
Monetization Strategy
48 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
6:19
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
We started off by talking about how growth works as a system of three parts: acquisition, retention and monetization. Product influences all of these parts, and as we change one, it influences the other.
In the last section, we focused on the first part of this system: acquisition. We looked at it through the lens of three main categories of growth loops: Viral, content, and paid loops.
1
Now, let's discuss the second key part of our growth strategy, which is retention strategy.
In Feature Strategy, we talked about how to measure retention for an individual feature. But product leaders need to be able to think about retention both at the feature level and at the product level, and be able to switch between the two.
Retention at the product level is how you create and maintain a habit among users.
Here, we'll dive deeper into the concept of retention at the product level.
The main question retention addresses is: How many users or customers remained active within a defined time period after signing up?
1
What it does not talk about is how active they were within that time period. That's engagement, which we will discuss a little bit later.
Retention is critical because it often defines the winners in the category. Category leaders often have the highest retention, while many companies with low retention fail. We see examples of this in several industries. If we plot retention on the X axis and company value on the Y axis, we would see the clear leaders in social media, music subscriptions, and all different categories as those who have higher retention.
In consumer social products, Facebook and Instagram have emerged as the biggest winners. Their retention is far higher than other social products like Twitter and Snapchat, and you can see that reflected in company value and overall growth numbers.
1
In the consumer music space, Spotify has outperformed those like Apple Music and Pandora with far higher listener retention rates. The relationship between company value and retention is similar across a range of categories, including B2B.
1
The point is that retention separates the top 1% of companies from their competition.
It sits at the center of growth for three primary reasons. First, retention drives our acquisition loops.
Better retention leads to increased performance of our acquisition loops by extending the lifetime of a customer usage, which means that they will go through more cycles of an acquisition loop and therefore create more growth.
Think about a product like Dropbox that relies on a viral acquisition loop.
The longer I've retained as a Dropbox user, the more viral touch points I'm going to have. There are more opportunities for a user to share a file or folder with other non-users who may convert into new users. In a similar way, the more users that I retain within a cohort, the more viral touchpoints I will have across that cohort of users.
Or think about a company like Yelp that relies on the user-generated content loop.
An increase in retention is going to cause more content to be created, and as a result, more content to be indexed, which is going to create more new users from this loop. The more users that we retain within a cohort also gives us more content from that cohort of users, which leads to more indexing, which leads to more users.
Second, retention builds competitive muscle. Retention results in increased customer lifetime value, which enables us to afford a higher cost of acquisition.
Let's walk through a quick example. Say we have two different companies: Company A and Company B. Both have an LTV of $100 and a target customer acquisition cost of $25. We have a 4:1 LTV to CAC ratio and a payback tolerance of 3 months.
1
Let's assume that Company B improves their retention. As a result of improving their retention, Company B has increased their LTV from $100 to $120. As a result, if we keep that target LTV to CAC ratio the same, they're able to raise their target cost of customer acquisition from $25 to $30. As a result, they're going to be able to spend more and reinvest more in their acquisition loops, which will create more growth and faster growth over Company A.
What's going to happen is that Company B will be able to increase their paid bids on paid marketing channels to push other companies out.
They also might be able to afford new channels that were previously too expensive but are now within their target CAC.
Or they might be able to reinvest that money in more places, like hiring content marketers, in order to drive more acquisition.
As you can see here, an increase in retention is going to increase things like LTV, which will enable us to spend more on the cost of customer acquisition compared to all of our competitors, and potentially muscle them out.
The third thing that retention does is accelerate payback period. With an increase in retention, a cohort will return its cost of customer acquisition faster. This results in a faster payback period as we're able to reinvest in our strategic levers.
Retention just doesn't increase acquisition, but it also drives monetization. Longer retention or an increase in cohort retention will lead to more monetization touchpoints.
This occurs in different ways across different business models.
1
If we look at an ad model of something like Facebook or Pinterest, increased retention is going to lead to more ad inventory, which is going to lead to more revenue per user and an increase in LTV.
In a subscription model like Zoom or Ipsy, increased retention is going to lead to longer or more subscriptions out of a cohort, which is going to lead to more revenue and an increase in LTV.
We can also consider a transactional model like Uber or Instacart, where increased retention is going to lead to more transactions within a cohort, which is going to lead to more revenue and increased LTV.
In a Freemium model, increased retention leads to potentially more touchpoints to upgrade those users, which leads to more revenue and increased customer lifetime value.
Retention is an extremely important and deep topic for product leaders, which is why Reforge has an entire six-week program dedicated to this topic alone.
But in this section, what we're going to do is not necessarily make you a deep expert on retention, but give you the frameworks that you need to operate and direct a retention strategy as a product leader.
Lesson Summary
It sits at the center of growth for three primary reasons. First, retention drives our acquisition loops.
Better retention leads to increased performance of our acquisition loops by extending the lifetime of a customer usage, which means that they will go through more cycles of an acquisition loop and therefore create more growth.
Second, retention builds competitive muscle. Retention results in increased customer lifetime value, which enables us to afford a higher cost of acquisition.
The third thing that retention does is accelerate payback period. With an increase in retention, a cohort will return its cost of customer acquisition faster. This results in a faster payback period as we're able to reinvest in our strategic levers.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
Introduction to Retention
6 min
Defining a Retention Metric
12 min
Analyzing and Improving Engagement
14 min
Analyzing and Improving Activation
19 min
Analyzing and Improving Resurrection
13 min
Monetization Strategy
48 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
12:21
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we looked at how retention is critical to separating the top-performing companies in a given category, because retention drives both acquisition and monetization.
One of the keys of retention is that retention is an output. The three inputs into retention are activation, engagement, and resurrection. So to improve retention, we need to improve the inputs. But before we can properly analyze the inputs, we need to be able to measure and monitor the output. That's our retention metric.
Retention is a word that gets used a lot in different contexts. And as a product leader, it's important to align your team around a common understanding of retention, and make sure that you have a common way to measure it.
We see a lot of mistakes being made here. A lot of companies jump to metrics like Daily Active Users (DAU) or something else as their retention metric, without giving much thought to why that is the appropriate way to measure the output of retention.
All products are different, though, so there isn't a one-size-fits-all answer for what a retention metric should be. Instead, every product has a natural behavior and pattern for use that informs how retention should be measured. Companies that make this mistake end up measuring retention incorrectly, and either hide problems that exist or build towards the wrong things.
1
To think about retention from first principles for our product, we need to define our use cases. The elements of our use case inform our retention metric definition and evaluation. We use a Use Case Map to help us think through it.
It helps us identify five key attributes.
First, we want to identify what is the problem our product solves. It's best to state this problem in the words of the user.
The second is the persona, which asks, "Who are we trying to solve this problem for?"
The third is why, which answers the question, "Why does our persona choose our product to solve their problem over the alternatives?"
Fourth is the alternative: "What alternatives could customers use to solve their problem?"
And fifth is natural frequency: "How frequently does the user encounter the problem?"
2
Let's walk through a couple examples. Note that a given product can have multiple use cases, each requiring their own use case map as well as a retention definition.
We'll be evaluating one primary use case for two different products: HubSpot Sales Professional and Pinterest. Let's walk through the use case map for these two examples.
HubSpot Sales Professional is a B2B tool designed to help sales professionals save time and close more deals by letting them track emails, see who opens and clicks on them, schedule emails in the future, and automate certain sales activities. Pinterest, on the other hand, is of course a consumer product. It's a discovery platform to help you find content around your interests.
We'll start by looking at the problem for each. The problem answers the question: "What problem does the product help solve for the user?" Once again, it's best to state these in the words of the user.
For HubSpot Sales, the problem that the user faces is: "I spend countless hours on inefficient activities" like entering data into the CRM, following up in emails, and rewriting emails.
For Pinterest, the problem that users need to solve is "I'm bored and want to see something I'm interested in."
Next is the target persona, which answers the question: "who are we solving this problem for?" In the HubSpot Sales Professional case, we're targeting individual sales reps who are in companies between 50 and a 1,000 employees. And for Pinterest, the core audience might be females between 25 and 55, professional, living in certain number of demographics or geographies.
Next, we'll look at the why, with question being: "What is the core reason the user chooses our product to solve their problem over the alternative?" For HubSpot Sales Professional, this is likely that I can automate all the activities that I'm spending countless hours on to help me close more deals. And for Pinterest, it might be that I can browse pictures around my interests that I can't find anywhere else.
Fourth is the alternative to the use case. Alternatives are not direct competitors, but rather other ways to solve the problem. This can be tech or non-tech based. In the HubSpot Sales Professional case, it could be picking up the phone or manually copying and pasting sales info into emails. And for Pinterest, the alternative might be something like browsing magazines.
1
Finally there's the natural frequency, which answers the question: "How often do we believe the user experiences the problem?" An alternative approach to getting to the natural frequency is asking: if our product didn't exist, how often do users turn to their alternatives? This gives us a good indication of that natural frequency.
1
HubSpot Sales Professional is likely daily. A sales force will be solving this problem on a daily basis during the workweek. And for Pinterest, their use case is likely a weekly one.
Once we fill out our use case map with our qualitative hypotheses, we can move to defining our retention metric, which is key to measuring that output of retention.
1
There are three steps to defining a retention metric:
Frequency
Core Behavior
Who
1
We'll start with frequency.
The first part is the frequency that we want to use within our retention metric.
Our use case map helps us with our qualitative hypothesis for a natural frequency. For HubSpot, that was daily. And for Pinterest, that was weekly.
It's important to always start with the qualitative hypothesis grounded in customer research, but you can decide to validate this frequency with some quantitative analysis.
To do this, you use a frequency histogram, which shows how often users are actually using the product. On the Y axis, we have the number of users. And on the X axis, we have the number of days that they've used the feature within a certain time period. In this case, the last 28 days. To validate your natural frequency for retention, you would create this type of histogram using a population of users that you believe have already activated on the product. In other words, exclude the one-and-dones.
1
If you build your histogram and find that your users are concentrated in the 20-plus day range out of the last 28, then that indicates a validation that your natural frequency is daily.
On the other hand, if users are concentrated in the three to seven day range, then that indicates that your usage frequency is closer to weekly.
And finally, if it's concentrated in the one to two day range, then it indicates a natural use frequency of monthly.
The key here is to not let this analysis dictate your frequency. Instead, it's just here to help validate it. Oftentimes you think your frequency will be something like weekly, but then you'll do this analysis and find that the majority of your user base is only showing a monthly behavior. This does not mean that your frequency for your retention metrics should be monthly. It probably just means that your product isn't delivering on the frequency for most users, and we have some work to do to improve.
1
The second step of retention metric is identifying the core behavior. This answers the question: "What action in our product indicates we're solving the problem for the user?" This helps us consider what makes a user "active."
A good example of why this is important is a product like Spotify. Is a user active when they listen to a song, log in, or do something else? And if we decide to listen to a song, is a user active if they listen to one minute of song, one second of a song, or one millisecond of a song?
A different example would be Pinterest. Some of our hypotheses might be things like viewing the feed, saving content, or clicking on something.
But a good retention metric identifies the action that is primarily associated with users receiving value. Whatever you choose for the metric is what your team will align around and look to improve. So you want to pick this carefully. Your decision should be rooted in the qualitative hypothesis of the problem you are solving. We want to think about the action that indicates we have solved that problem or are delivering value against that problem.
1
One common mistake is creating a combined core action. Pinterest did this, when they tried to define their core action as anyone who clicks or pins. This often happens because the team can't decide on a single action over another.
1
Casey Winters, who spent time as a growth leader at Pinterest, said: "Our combined core metric led the team in the wrong direction. They ended up choosing the metric that was easiest to move, which was of course clicks. They did this by emphasizing content that was more clickbait-y. In reality, pins were what was actually driving more value."
The last part of the retention metric is identifying who specifically we're tracking in the retention metric. We can identify who the user is in the metric by looking at the persona in the use case map and linking it to our core behavior.
2
Putting all of these together, we can see retention metrics for a variety of examples. Instagram would be something like a daily active user where active is viewing the feed, because it's more of a discovery platform. Pinterest might be a weekly active pinner, where active is pinning or saving content, because pinning and saving content is the core action that indicates the platform is delivering value. For SurveyMonkey, we might look at a monthly active surveyor, where active is creating and sending a survey. And for Airbnb, we might look at a yearly active guests, where active is booking a night.
Once we have a retention metric, we can analyze and visualize our product's retention through cohort charts and retention curves.
1
Previously, in Feature Strategy, we introduced retention cohorts as a way to measure retention of a feature, but we can use a similar analysis at the product level. Similar to our feature evaluation approach, we're going to look at how many users remain active after a certain number of natural use frequencies.
To build a cohort chart, we can start by looking at the frequency. The frequency is what's going to define the cohort time frames we'll be looking at, both in the left hand column as well as across the top.
Next, we use our core action definition to determine who is still active within the cohort after a certain number of time periods.
1
Then, we're going to make sure that we continue to lay on additional details in the left hand column by looking at the size of the cohorts, as the size typically impacts and influences retention.
To build a retention curve and visualize this, we simply can put the cohort chart in relative percentage terms, meaning each cell will identify the percentage of users still active from the start of the cohort.
We can then calculate the average of activity by each time period at the bottom. We take this average and plot it as a line curve to show how many users are retained after a certain number of time periods. This helps us easily identify where the steady state retention value is as well as diagnose some high level problems.
There are a few common patterns to these retention curves. The first shape that we might see is a slope towards the X axis, meaning that the retention curve doesn't flatten off and trends toward zero. That means we are going to eventually lose 100% of the users that start out in our cohort. This is obviously the worst pattern we could see.
The second pattern we might see in a standard retention curve is a flattish pattern. And this is OK when it occurs. This means that the retention curve isn't perfectly flat, but the slope is very small and it would take a very long time to lose 100% of the cohort. What this likely means is that with some engagement and resurrection optimizations, we can get this retention curve to be more perfectly flat.
The third type of pattern we might see in a retention curve is a flat retention curve. This is what we're aiming for and the most important element that we're pursuing. This means that no matter what, we're going to retain a certain percentage of every cohort. This is what provides the foundation for growth.
And the best pattern we could see is a smile curve. This is where our retention curve initially decreases and flattens, but then starts to gradually increase again. This means that not only are we retaining a flat percentage of users, but we're doing a good job over time of reactivating users that started out in the initial cohort. Smile curves typically exist in most network effect companies as the value of the network grows.
Once we've defined an output of our retention, informed by first principles, we can then ask the important question: "How do we improve retention?"
Once again, though, retention is an output. So to improve retention, you have to improve one of the inputs: activation, engagement, or resurrection.
In the next three lessons, we'll go through how to analyze and improve each of these inputs in order to drive overall improvements to retention.
Lesson Summary
One of the keys of retention is that retention is an output. The three inputs into retention are activation, engagement, and resurrection. So to improve retention, we need to improve the inputs. But before we can properly analyze the inputs, we need to be able to measure and monitor the output. That's our retention metric.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
Introduction to Retention
6 min
Defining a Retention Metric
12 min
Analyzing and Improving Engagement
14 min
Analyzing and Improving Activation
19 min
Analyzing and Improving Resurrection
13 min
Monetization Strategy
48 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
13:46
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we talked about how retention is an output.
To improve retention, we need to first properly define how to measure that output, and then work to improve the inputs of activation, engagement and resurrection.
Creating improvements in any of these areas will improve your overall retention. But each input has unique ways to be analyzed and improved, and therefore, they should be looked at individually.
Activation is about how we establish the habit of the user and get them to the engaged state.
And resurrection is about returning people who once had the habit back to the engaged state. Or, in other words, rebuilding the habit.
1
That means the destination for both activation and resurrection is the engaged state. That's why we begin to define our retention strategy by looking at engagement.
As we described in the last lesson, retention answers the question: were users active or not within a defined time period? It's a binary answer; either they were or were not active.
Engagement, on the other hand, is more about depth, answering the question: how active were users within that specific time period?
In 1923, Claude Hopkins wrote a book called "Scientific Advertising," where he described how people build habits in a way that resembles a loop.
The loop starts with the cue that gets us to our routine or action, and then we get a reward for that action that reinforces that cue once again. This means that every time the cue comes back around, we'll hopefully do that action and routine again.
Fast forwarding to today, we can model our user interactions with our product based on very similar dynamics. The ultimate goal is to establish what we call the organic habit loop. That is where our user naturally associates your product as the solution when they experience that trigger of the problem.
1
We can show how this works for a product like Zoom. Their organic trigger is that I need an easy way to have a meeting with people who aren't physically here. We want the user to take the core action of hosting a Zoom meeting every time they experience that trigger, and the reward they get by taking that action is high-quality audio and video, and a very seamless experience.
Next time they have that problem and that trigger, they will once again take that similar action.
As a baseline, it's helpful to identify the different organic habit loops for your product, noting that different use cases of your product will potentially have different organic habit loops. You want to answer the questions like:
What are the organic triggers around your product's problem?
What is the core action you want to take them in response to that trigger?
What reward do users get for taking that core action that reinforces them taking that action again the next time the trigger occurs?
Your organic habit loop will inform the foundation of one of the four levers of engagement. Our goal with engagement, once again, is to maintain and ultimately deepen the habit with our user.
There are four strategies to improve engagement, and as a result, improve retention.
The first is frequency of use, by increasing how frequently a user uses the product within some time period.
Improving frequency would look like Pinterest increasing a user from being active one out of the last seven days to six out of the last seven days.
The second method is intensity of use. Intensity of use is about how intense each use of the product is.
Improving intensity of use means increasing the time spent, the money spent, or the actions completed per use of the product.
The third lever is increasing the number of use cases they use the product for. Most products, as they grow, enable multiple use cases.
For example, three use cases that exist for Uber are getting to and from the airport, going out on the weekends, and commuting to work. Uber is able to increase and deepen engagement by getting users to use the product for more than one of those use cases. As users go from using the product for getting to and from the airport, to going out on the weekends, to commuting to work, their depth of engagement increases.
1
1
The final strategy to improve engagement is feature spread. This is about getting the user to increase the number of features they use within the product.
1
Improving this could look like Spotify getting users to move from just using Discovery and Playlist features to using podcasts and radio features as well. Doing so would increase the engagement of a Spotify user, and therefore generate longer-term retention.
1
The question becomes: which strategy should I use to increase engagement?
To answer that, let's go back to the organic habit loop that we introduced earlier. The organic habit loop represents a self-sustaining habit that users build, that requires minimal external intervention.
The goal of improving engagement is to build this organic habit loop, and have the users naturally associate your product as the solution to the problem.
There are two types of interventions that help us reinforce that habit and build that habit in order to increase engagement: manufactured and environmental interventions.
1
The manufactured habit loop starts with a manufactured trigger, something that we create as the product builders. We push that trigger through different channels, such as email, push notifications, or browser notifications, and in response to that manufactured trigger, the user takes some action.
In thinking about how to create manufactured loops, it's best to start thinking through the various types of manufactured triggers we could use.
There are five types of manufactured triggers: time, location, change, network, and programmatic triggers.
The first one is a time based trigger. This is something that happens in response to taking an action. You can think about the JetBlue app, when they let you know that your flight to LAX leaves in 90 minutes. They're going to deliver that through push notification to get you into the app, and potentially take a number of actions.
Location is another type of trigger, and an example of this is the Starbucks app. The Pay With Starbucks app sends you a push notification every time you're near your favorite Starbucks store to get you back in the app and potentially visit that store and make a purchase.
You can also think about change triggers, which are changes that happen to things within the product. Think about Google Finance, and a stock that I'm tracking which has increased by 10%. Or the mobile ticketing app Gametime, when they notify you that San Francisco Giants tickets just decreased by $20. We can send notifications like that through a channel to get users back in the app and take an action.
We also have network or peer based triggers, like Medium. Somebody in your network just made a new post, so you'll get a notification through email to come back into the product to read that post. Or another peer-based trigger, like somebody tagging you in a photo on Facebook.
The last type of triggers are programmatic triggers. Think about plugging your phone into your computer, and Dropbox prompting you to back up your photos.
Once you've identified all the potentially different types of manufactured triggers you can enable, you want to identify the different channels available to you.
There are eight typical channels you can use to increase engagement, and choosing the right one for your user can help improve engagement. There's email, mobile, in product, platform, browser, desktop, paid media, as well as direct mail.
A given product can build manufactured loops to improve any of the four engagement levers, but it's most often used to increase frequency of use.
Pinterest could use manufactured loops to improve frequency by sending push notifications to the user when new content relevant to their interests is available. That would get them to use it more days within a certain time period. But they could also create in product notifications that keep them engaged for a longer period of time, every time they use the product.
If Pinterest wanted to expand use cases using manufactured triggers, they could send emails to users that are using Pinterest just to browse interests, and try to get them to use Pinterest to plan a project like a wedding or home renovation. Finally, feature spread. They could potentially use notifications to get users to use additional features within the product, like their location-based features.
However, manufactured triggers have their limitations. When used incorrectly, they feel like spam to users and users just end up tuning them out. That's why it's important to know when to use manufactured triggers and when to use environment triggers.
Sometimes, we aren't able to influence the organic trigger with a manufactured trigger. Think about the video meeting product Zoom. Their organic trigger is when someone needs to host a virtual meeting. Imagine Zoom sending you manufactured notifications trying to get you to have more meetings. That would be an awful experience. Who wants to have more meetings?
In these situations, rather than using a manufactured trigger, we need to use what we call an environmental trigger. Environmental triggers are about identifying where your users are, what they are doing, and what products they're using when that organic trigger occurs, and then we put an environmental trigger within that place in order to get them to use the product.
For Zoom, one place the organic trigger occurs is when you're scheduling a meeting, such as in Google Calendar. Without an environmental trigger, what I would have to do is go to the Zoom website, copy my meeting link, go back to my calendar, paste that meeting link in, and finally, finish the calendar invite. That requires a lot of memory, a lot of steps, a lot of effort.
Instead, Zoom has a browser extension that places environment triggers within Google Calendar so that every time I'm scheduling a meeting, it's a right there, a simple one click way to add a Zoom link to the meeting I just scheduled. As a result, my usage of Zoom dramatically increases.
Therefore, Zoom's environment loop is about finding the products where I might be when I need to schedule that meeting, and integrating with those products in ways where they place environmental triggers in their path. This could go beyond Google Calendar, to places like a CRM or a project management tool.
Similar to manufactured habit loops, these can help improve any one of the engagement levers we discussed.
One example is where Uber places environment triggers in Google Maps via a partnership, so that when I'm looking up a place to go in Google Maps, I'm reminded that Uber is an option to get there.
HubSpot uses environmental triggers to help expand feature spread for its users via an email integration for its sales acceleration tool. It prompts users to use other features like the meeting schedule feature when they detect the user might be scheduling a meeting.Just because our two strategies of manufactured and environmental loops can influence any one of our four engagement levers of frequency, intensity, use cases, and features does not mean that all levers create the same value for the same product. Certain strategies have more natural depth than others, depending on the type of product.
Therefore, it's important to identify which levers have more depth and potential for your particular product, and are therefore more likely to drive better retention. We can walk through some examples. Let's start with Uber.
Their primary engagement strategy would be to get users to deepen their engagement through expanding their use cases.
Uber can't dictate when a user will need a ride, which means a frequency strategy using manufactured triggers totally doesn't make sense. They also can't influence how far a person needs to go, which means intensity has minimal use. Uber also has a minimal feature set that drives retention, so that feature spread isn't really a great option either.
What Uber can influence is building things around additional use cases for their product to get users to use it more frequently, like progressing users through the airport use case, to the night out use case, to commuting to work by enabling experiences like UberX and UberPool.
Let's think about HubSpot sales as an example. The primary engagement strategy for that product would be feature spread.
A user might be using something like email tracking, and to deepen their engagement, we'd want to help them build a habit on other features, like document tracking, email templates, or sales automation. Here, there is a direct relationship between using more features and longer term retention, whereas there wouldn't be for intensity of use or just increasing frequency of use without increasing the features that they were using. In fact, an intensity strategy here would probably do harm. A core value prop of this product is to save users time, so trying to get them to spend more time using the application would probably just frustrate users.
1
Pinterest would be an example where frequency is the dominant engagement strategy.
They'd want to move users from weekly, to semi-weekly, to daily active users. For Pinterest, since discovering the feed is the primary value prop, getting users to use more advanced features doesn't necessarily correlate with longer term retention. In addition, Pinterest is built around one core use case -- browsing interests -- so adding additional use cases might not be the strongest lever. If we were to choose a secondary engagement strategy for Pinterest, it would likely be intensity of use, trying to get users to save more content per use.
Finally, Netflix is an example where intensity is likely the primary lever for engagement.
Time spent is a deep spectrum for Netflix, and would correlate strongly with longer term retention. Feature spread clearly does not make sense for Netflix, as it's a simple product built around one core feature of watching shows and movies. Depending on the user, expanding use cases might be a secondary strategy.
2
The goal, once again, is to think about which engagement strategy is your primary strategy. All products have natural depth in one of these areas over others, and improving that area will correlate with longer term retention.
In the next lesson, we're going to dig into the next input of improving retention, which is activation.
Lesson Summary
There are four levers of engagement:
Frequency of Use: How often do users engage with the product?
Intensity of Use: How intense is each use of the product?
Diversity of Use Cases: How many problems are users solving with the product?
Feature Spread: How many features is the user engaging with?

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
Introduction to Retention
6 min
Defining a Retention Metric
12 min
Analyzing and Improving Engagement
14 min
Analyzing and Improving Activation
19 min
Analyzing and Improving Resurrection
13 min
Monetization Strategy
48 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
19:01
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
We know that retention is an output, and the three inputs are activation, engagement and resurrection.
Activation is about establishing the habit with the user, while engagement is about maintaining and deepening that habit. And resurrection is about reestablishing that habit once it was lost.
And in the last lesson, we started with the destination of both of our activation and resurrection experience -- which is our engagement state.
In this lesson, we're going to look at our next retention input: activation.
Activation is the process of getting the user to establish that habit for the first time.We tend to invest a lot of time and money into developing a phenomenal core product experience, so that if we're able to get the user to establish a habit around that core experience, they have an amazing experience in response.
We also tend to invest a ton of time and money into our marketing strategy, so people are aware of the product that exists and they consider signing up.
But there often exists a gap between that marketing touchpoint and the core product experience.
Product leaders and marketing leaders both struggle with this, because they often viewed this gap as the other's problem.
Effective product leaders need to bridge this gap with an activation strategy as part of their overall product strategy.
Activation is a critical part of a growth strategy because it touches 100% of your users. Think about that. You can't say that about any other part of our product. Every user you acquire is going to go through the activation experience within your product. Not 100% of your users are going to make it to the core center pieces of the product.
So as a result, improvements in the activation experience tend to be very impactful to overall retention.
1
We see this impact reflected within our retention curves. As we make improvements to our activation experience, we see our retention cohorts shift up, and this ends up having an incredible impact on our overall growth model.
The challenge is that most people get activation wrong because they cut the activation experience off too early. Once again, activation is about taking the user all the way from a signup or that first touch point to getting them to establish a habit around your core value prop.
And that's because before they establish that core habit, they are in a completely different mindset.
But so many products simply get you to sign up, show you a bunch of prompts and point you to random features, and then end with a message like "Good luck -- go use the product." This is not helping your user establish a habit.
This is equivalent of telling somebody how to do base jumping and then saying, "Go do it -- good luck!" The user is not going to go through with it.
Therefore, the goal of activation is to establish the habit for the user. And until that habit established, the user is in a completely different mindset, which means they require a different product experience.
2
To build an activation experience, we need to start by answering the question: how do we know when the user has established habit? Once we know that, we can work backwards on building a product experience that guides our user to that moment. We call this the habit moment. The habit moment is the signal that the user has established a habit and is likely going to retain. The time it takes to establish a habit and the specific behaviors they need to take vary a lot in between products.
We can approach thinking about the habit moment in two ways.
We first form a qualitative hypothesis. This is the most important piece. We can then validate that hypothesis with some quantitative analysis, but do not let the quantitative analysis dictate your habit moment.
The qualitative approach is about describing what a habit moment would look like based on the use case map we defined earlier. It is about the human interpretation of what your product's habit would be.
1
Our persona, problem, definition, natural frequency and the core action within our retention metric all help inform our habit moment.
We first start by describing what a user might say once they've established a habit. We can look at the persona, problem, and why to help us form this. In the Pinterest case, once they've established the habit around the problem of being bored and wanting to see things that interest them, we can imagine the user saying, "I find cool things on Pinterest every week."
Whereas if they were using Pinterest to plan a project, that same user might say something totally different because it's a different problem and a different frequency.
The user might say, "I use Pinterest as the central source of inspiration daily for my project."
If we were looking at HubSpot Sales Pro, the core use case is a sales efficiency use case with an individual sales rep. The habit moment in the words of the user might be, "I now use HubSpot Sales for almost all of my sales emails."
A separate use case might be for the sales manager around sales activity reporting. The habit in the words of that user might be, "I use HubSpot Sales to get all of my weekly reports for my management meetings."
Once you've gone through the process and created your human interpretation of that moment around the habit, you can then start to consider a quantitative perspective that helps validate it.
The quantitative approach to defining a habit moment asks: what is the metric that gives us a measurable signal and scoreboard that the user has reached that moment?
1
The output of a quantitative definition of a habit moment is the habit moment metric, and it usually takes the form of XaY, where X stands for the number of times the user has done the core action within Y of some time period. Natural frequency informs both X and Y, while the action we've defined within our retention metric informs our core action.
Let's take a look at a few examples for a few different types of products and what their habit moment metrics might be.
In the case of Pinterest, when the users are in the browsing use case, the habit moment metric would be something like four pins in the first 28 days. The core action aligns to the retention metric of pinning, while the time period aligns to the natural frequency. Here, we're trying to build a weekly habit, so we're looking for about four actions within that first 24 day time period. That would indicate to us that the user is taking that action at least once a week.
Compare this to a product like Slack, where the core action is building a daily habit around exchanging messages. A habit moment metric might be something like 4d7, where they're using the product at least four days out of the first seven days.
1
In the case of HubSpot, once again, we're trying to establish a weekly or daily habit. The habit moment metric might be the user has used one or more of HubSpot's core features for four days within the first 28 days.
1
With Airbnb, there is a very infrequent natural frequency. We're looking at the habit as the user making at least a couple bookings within the first year.
In Zoom's case, the core action is hosting a meeting and the natural frequency is weekly. So ideally we might be looking for something like three to five different meetings hosted within those first 28 days.
2
And in the case of Zillow, they have a use case around their Zestimate score, which helps update the value of your home. Here, this is trying to establish a monthly frequency. So we might have a habit moment metric that looks something like the user checks their Zestimate score once for three weeks out of the first 12 weeks.
So how do you determine the habit moment metric for your product? The most accurate way to do this is by building a habit moment correlation matrix. (Note: this process relies on running a correlation analysis. And in this lesson, we'll walk through how to build the matrix at a high level vs. going through the details of how to do a correlation analysis.)
1
Let's start by explaining what the matrix is. Here on the left hand side, you see the number of times of core action. You could also put the number of days. We're going to lay this out in rows. You can do this in any kind of count that you want. This could be a high number or low range, depending on your product.
Across the top, we're going to lay out the different time periods that we want to look at within days, weeks or a month.
Here within the cell, we're going to fill out four different values, correlation, sample size, PPV, and NPV. What you see here in this highlighted cell would be these values for people who did the core action at least once within four weeks. The four different values in the cell stand for different things.
1
1
Correlation tells us the strength of the relationship between doing that action within that time period and long-term retention. The sample size is how many people did this action within that time period. The positive predictive value tells us the percentage of people that took this action within this time period that ended up being retained. And the negative predictive value tells us the percentage of people that did not do this action within this timeframe and didn't end up retained. We can walk through these in a little bit more detail, but once again, these are standard outputs of a standard correlation analysis.
2
For correlation, we're looking for a value that is closer to one. This tells us that if the user did that action at least that many times within that time period, it's highly predictive that they will become a long-term retained user.
Sample size gives us a value of zero to as large as possible. Here, of course, the larger, the better. The larger the sample size, the more accurate our correlation is going to be.
The positive predictive value gives us a value of zero to 100%. We want to be as close to 100% as possible.
Once again, this tells us the percentage of users who did reach and do these actions within this time period and did retain. If this number is 80%, what it tells us is that 80% of the users who did that action at least that many times within that frequency ended up retaining.
1
Whereas the negative predictive value is a little bit of the opposite. It's also from zero to 100%, but once again, we want this as close to 100% as possible, because this stands for the percentage of users who did not do that number of actions within this time period and did not get retained.
1
As an example, if this number is 50%, that means 50% of the users who did not reach the frequency within that time period ended up not retaining.
Let's walk through a hypothetical example of Zoom. In Zoom's case, the core action is hosting a meeting and the natural frequency is weekly. So our hypothesis is that we're looking for something like between three to five different meetings hosted within those first 28 days.
We could fill out our habit moment matrix here with fake data. We might expect Zoom to look something like this. On the left, we see the core action count of the number of meetings hosted and across the top, we see within a certain time period, which is within weeks. In the first cell, we see that they posted at least one meeting within that first week.
To determine the best habit moment metric for Zoom, we can follow a few different steps. First, we're going to remove anything with a low correlation. In this case, less than .3. If it's a low correlation, it means that this is not predictive of long-term retention.
Next, we're going to remove any of those that we feel have too small of a sample size, because they're likely not going to be statistically significant.
1
As we're looking through the various values, where do we start to see this correlation number take a large leap?
Here, we see a big jump between users hosting three meetings within two or three weeks and four meetings within those first two to four weeks. It jumps from about .35 to .81. This means that we can narrow in on that number of at least four meetings hosted within a certain time period.
After that, we might likely have a choice between a few different metrics that are pretty close to each other. Here, our recommendation is just to simplify. You're never going to have perfect data, and you'll never find that one piece that jumps out and screams, "hey, that's your habit moment metric." So you need to layer on a level of intuition and qualitative analysis in order to simplify.
In this case, since we're talking about establishing that weekly habit, our recommendation is to simplify down to four meetings hosted within the first 28 days.
If we were Zoom, in this case, we would now be able to measure how effective our product is at activating users by asking what percentage of users are hitting that metric signal.Once we have this as a baseline, we can start to look and think about the strategies to improve.
Once we have an idea of the destination of activation, the habit moment, we can start to think about the four main strategies we can use to create and improve our activation experience:
Environment loops
Manufactured loops
Warm starts
Use case transition
First are manufactured and environmental loops. We talked about these in the last lesson when we discussed how to improve engagement. These are loops that help reinforce user habits. However, they can also help establish that initial habit.
For example, we discussed how Zoom's integration with Google Calendar helps increase frequency of use. But it's also a powerful mechanism to help develop the initial habit. So in the case of Zoom, we'd consider how can we get new users to install this extension since it increases the probability that a user might get to that habit moment.
Our third improvement strategy is the warm start, an experience that helps create momentum toward building a habit.
Many initial product experiences look something like an empty or a cold state. And this is a terrible first experience and does nothing in helping people establish the habit around the core experience. A cold start kind of kills momentum in establishing the habit. So what we want to do is figure out how do we create a warm, personalized start that creates momentum toward the action and habits that we want them to establish.
A lot of companies try to create warm starts for their product, but there's a big difference between doing this effectively and not.
To create an effective warm start, we need to think about three things:
A list of must haves for the user to be successful
Supporting actions that help the user overcome initial friction and point them towards those core actions
Strategies to help redirect users from dead ends back into the product
Let's start with the must haves.
There are three types of must haves that we might need to ensure users to be successful and get them to that habit moment. The first is the basic user info that we need, things like company name, location preference, or other things. The second thing is that we need to get permissions, things like channel permissions, device permissions that enable different types of manufactured or environmental loops that we want to include within our activation experience. And then the third is social. In order to get value to users, we need others in the experience -- friends, contacts, colleagues.
For a product like Slack, we require a certain minimum number of people in the product before they can truly experience the value prop and therefore establish the habit.
For example, Pinterest requirements might include an email, name, gender, and having them select a few topics of interest. With this basic information, Pinterest can create a warm, personalized start by enabling and recommending an initial amount of content in their feed rather than just giving them an empty feed.
So identifying the minimal amount of information that you need to potentially provide that warm initial personalized experience helps them move the user towards that habit moment.
The second thing that we can think about with a warm start are any supporting actions that help them move towards the habit moment.
In the case of SurveyMonkey, what we're trying to establish a habit around is creating surveys. So a supporting action that might help drive a user towards creating that survey is searching our library of templates to get them to make that survey a lot more easily.
1
The last thing we could think about with warm starts is how we redirect users from dead ends back into the product. A lot of times, we have empty states within our experience.
We can see this as an example with Mailchimp's analytics dashboard, where at the start, I might not have any data because I haven't really used the product yet.
So if a user ends up in this experience, it's better to try to figure out how we redirect them back to the core action that we want them to take that will then fill out that experience in a valuable way.
So in the case of Mailchimp, rather than just giving them an empty or stale dashboard, we want to give them an experience like this that shows them the value of this page and redirects them back to sending a campaign which will then fulfill this analytics experience.The last strategy we can think about in terms of improving activation is use case transition. This is helpful with when we have a product with a natural frequency that is very infrequent.
Products that have use cases with long natural frequencies, meaning longer than monthly, are in what we call the forgettable zone. They are forgettable because if you don't stay top of mind in between the infrequent uses, you end up having to reacquire the user every single time, which is unsustainable. When we have an infrequent use case, the product strategy is to try and transfer them to a more frequent use case at the end of the activation experience.
Let's look at some examples of this. Let's say we were using Credit Karma's tax application, which is an annual use product. So one thing that Credit Karma would want to try to do is try to shift users to also using their credit monitoring product, which is a monthly natural frequency. This is going to keep Credit Karma Tax top of mind in between those infrequent uses, so that next time it comes around, Credit Karma doesn't have to reacquire the user on that product. Even better, the user will more naturally come and use it again.
It's similar with Zillow's case of buying a home. They're going to try to transition people to one of their more frequent use cases, like their Zestimate score or their real estate content, so that they're staying top of mind in between those infrequent uses of buying or selling a home.
1
And finally, in the case of SurveyMonkey, if I come in as a user and use SurveyMonkey around a survey that only has a yearly use case, SurveyMonkey is going to want to transfer me to a use case of something more like a survey for ongoing customer research, which has a more frequent natural frequency.
Now that we've taken a look at activation and how to analyze and improve it at a top level, what we want to do is go through our final input into long-term retention, which is resurrection.
Lesson Summary
Activation is a critical part of a growth strategy because it touches 100% of your users. Think about that. You can't say that about any other part of our product. Every user you acquire is going to go through the activation experience within your product. Not 100% of your users are going to make it to the core center pieces of the product.
So as a result, improvements in the activation experience tend to be very impactful to overall retention.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
Introduction to Retention
6 min
Defining a Retention Metric
12 min
Analyzing and Improving Engagement
14 min
Analyzing and Improving Activation
19 min
Analyzing and Improving Resurrection
13 min
Monetization Strategy
48 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
12:44
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In this last lesson on retention, we're going to look at our last input to retention: resurrection.
Resurrection answers the question: how do we take people who used to have the habit, but no longer have it, and return them back to that engaged state?
We refer to these as dormant users.
There are many different reasons why a user might have become unengaged and entered that dormant state. The product might not have done what the user wanted. The user might have had a bad previous experience. The user might've gotten a new credit card which cut them off. The product didn't work at some point. The user might have signed up and forgotten about it, or a competitor might have given the user a better discount, so they switched.
When it comes to resurrection, oftentimes somebody inside an org looks at the situation and says, "Hey, we've got this huge pool of users here. We have a way to contact them. They're likely to respond. So let's contact them. We have nothing to lose."
The problem is that the above assumptions are actually not true. They're deceptive on the surface. Resurrection opportunities are usually not as appealing as they seem.
Let's look at each argument -- there's a huge pool of users, a way to contact them, and nothing to lose -- and break them down.
We first need to ask ourselves, really, how big is our pool of resurrectable users?
We can think about this in a few different stages. Let's first think about all inactive users. These are users that signed up at one point, but are no longer actively using the product.
We find that a large portion of users in this pool are people that have just never even activated. Most inactive users are those that have never even established the habit. We can see this in our retention curves, where the largest drops happen within the first few weeks of that activation phase.
So in social apps, we're typically losing about 40% due to activation.
In productivity apps, it's about 30 to 60%.
And in something like a subscription e-commerce product, maybe 40 to 75% are lost before they get to the habit moment.
So why is this important? It's important because the psychology is completely different between users that have never established the habit vs. those that have established the habit at some point, but then became inactive at a later date. That means when we look at this pool of inactive users, we find that most people actually have an activation problem, not a resurrection problem.
1
So let's say we've subtracted the nonactivated users out of the inactive pool. We end up with a much smaller pool, but it still might appear like it's a meaningful pool of users to go through.
1
Out of this pool of people that are left, we also have another group called churned users. These are users that have established the habit, become dormant, and have remained unengaged for a long defined period of time.
It's important to understand this group of users because the probability of being able to resurrect a user decays extremely quickly once they go dormant.
As this probability decreases, we find a point on this curve where the probability of resurrecting them is less than the cost that we incur in trying to resurrect them. In other words, the probability is so low that it's just not worth it.
So when we look at a huge pool of inactive users, we need to understand how many users are left after we take out the nonactivated users and then subtract the churned users where the cost outweighs the benefit in trying to resurrect them.
Once we go through this analysis, we find that this final group of dormant users becomes a much smaller pool of users than it seemed on the surface.
Next, let's look at the argument that since we have a way to contact these users, they're likely to respond.
Even though we have their contact info and a way to reach them, users are already tuning out and not responding to our product notifications. If they were responding to our notifications, they would not be in the dormant state. Therefore, while we have a method of reaching out, we are actually very limited in our ability to communicate with those dormant users and get them to respond.
So once again, this argument doesn't really work. In reality, we get a very low response rate and lift from these types of campaigns.
Let's look at the third argument -- that we have nothing to lose in terms of contacting these users. Let's ask the question: what is the true cost of resurrection campaigns?
If we think about it from the user perspective, the mindset dormant users have is that they are no longer interested in this product. Meanwhile, our approach is to say, "No problem, I'm going to keep emailing you just in case you change your mind."
This approach has a much higher probability of creating frustration among our user base and translates into high costs and damage.
There are two types of typical costs here:
Damage to our channels. Contacting users who have expressed that they aren't interested can lead to unengagement, unsubscribes, and spam reports. This does negative damage to our channels, whether it's email, push or something else.
Negative word of mouth. You might anger your users so much that it leads them to not recommend your product. This creates a massive cost, especially in the early stages of products.
So let's recap here. We thought we had a huge pool of users, but they're actually much smaller than we thought. We thought we have a way to contact them and can get a response rate, but we're going to actually get a much lower response rate. And third, we thought we had nothing to lose, but there actually is a cost in terms of reaching out to these users.
So as a product leader, it's our job to recognize when initiatives like resurrection are built on incorrect assumptions, and ensure that we are putting resources against the highest impact initiatives. Usually the most impactful way to be effective in resurrection is to actually think about churn prevention, preventing people from getting to that dormant state with effective activation and engagement strategies.
You as a product leader need to be diligent on when it actually makes sense to actually invest in resurrection.
But when you decide it does make sense, the first step is to break down the reasons users have gone dormant. Once we understand the reasons, we can think about product initiatives to address those reasons.
There are two main categories of dormant users, involuntary and voluntary. Voluntary dormant users are users who made a conscious choice not to engage with the product anymore, whereas involuntary dormant users are users that disengage due to some reason that wasn't specifically a conscious choice.
Let's start with the involuntary dormant users. Involuntary dormant users can often be resurrected with small fixes that are worthwhile to pursue. Specifically, there are two types of involuntary dormant users that can be helpful to target and try to resurrect: those who can't get back into the product because of some issue like getting logged out, and those who leave due to some type of payment issue.
Product issues mean situations like technical bugs that log users out or switching devices or emails. Here, the users still have intent around your product, but can't actually use because of some blocking factor.
Let's look at HubSpot Sales Professional as an example. At one point, HubSpot was seeing some poor retention. It dug in and collected qualitative research into the reasons why users were going dormant. As a first step, they contacted those users as soon as they detected them in that dormant phase and asked them what happened.
What HubSpot found was that a large number of these users went dormant for involuntary reasons, like the Chrome extension disappeared, users got logged out, users unchecked one of the key features in the product, or users switched computers and therefore needed to re-install. Once these involuntary reasons were identified, there are usually simple and effective product and notification strategies in order to resurrect them.
The second type of involuntary dormant users are those who went dormant due to some type of payment failure. This could be an expired credit card, a maxed out limit, or an address change.
There are a number of strategies and low-cost ways to reduce this type of dormancy -- everything from streamlining error notifications, optimizing payment pages, optimize retrying cards, account updater programs, reducing restrictions on what you collect, as well as credit card processor rotation.
When thinking about how we resurrect these voluntary dormant users, and we need to remember that we'll always have a limited pool of resources, whether that's time, money, or people. Given that fixed amount of resources, we need to ask ourselves, when should we actually deploy resources against trying to resurrect these voluntary dormant users?
We should only do this once we've mapped out resources that we feel we can put on activation an engagement in involuntary dormant users, as those are typically much larger longterm levers.
That being said, there are four situations that can be effective for driving users back into the product when they're in the voluntary dormant state.
The first category is new news. By this, we mean new features, integrations, or other product updates that might address the reason that users voluntarily disengaged from the product.
So from the time of the user going dormant, we stopped developing new things within the organization. We might develop a new feature, a new product or new integration since they went dormant. Sending notifications around these instances of new news can be much more effective than simply just pinging users at regular intervals hoping that they'll come back.
The second category of a resurrection offer is a new use case. So if we have multiple use cases for the product, we can try to get users to use the product for a different use case.
Let's use the project management tool Trello as an example. Users might have initially used Trello to do some sort of project planning for their wedding, which has a firm start and end date. After the wedding planning ends, the user might go dormant. We could then educate that user around other ongoing use cases, like using Trello for the personal to-do list, another project, or trying to get them to use it within their work on a product team.
The third type of resurrection offer is using an incentive through a discount, loyalty program or some other special offer to try to get them to reestablish the habit.
When thinking about structuring these types of incentives, what we want to make sure that we do is give ourselves time to reestablish the habit with the user. In other words, we need to get the user into a repeat behavior versus a onetime behavior.
We can use ClassPass as an example. Here, we see a limited time offer for 20% off five- or ten-class plans. We're trying to incentivize the user into not just buying one class, but an entire package of classes. This gives users time to repeat and establish the habit once on the product again.
The last category of voluntary dormant resurrection strategies are high psych moments. These are positive psych moments in our user's life generated by an activity, time, or some other external event.
Some products lend themselves better to these types of resurrection offers than others. We can go through a few different examples, especially in the fitness space like ClassPass or Fitbit. Of course, there are natural high psych moments in this type of category, such as New Year's, where everybody is establishing new resolutions, and one of those big resolutions is to lose weight or get in shape. This means resurrecting users around this high psych moment could be very effective.
Paperless Post has a number of natural high psych moments in their lifecycle as well, things like holidays, Halloween, Christmas, Valentine's Day, or even having a new kid. These are all high psych moments that we could use to reach back out to our users and potentially have a higher probability of resurrecting them.
We can also think about social products like Facebook, LinkedIn, Instagram, or Medium. These products have a high number of naturally high psych moments through their lifetime, typically caused by a friend doing something. These personalized social interactions, like notifying dormant users when their friend has published an article or a post produced a higher probability of resurrection efforts.
One important callout is that once we have resurrected a user, what we're really trying to do is reactivate them. If they fail to reactivate, then they weren't really worth resurrecting at all. Reactivation is one of the most important pieces of resurrection campaign because we need to rebuild that habit. So good resurrection strategies build custom reactivation experiences for users who go dormant and then come back from that dormant state.We can see this across a lot of different types of products, such as Pinterest. Pinterest uses an experience where if you come back to the product after being dormant for a while, they give you the option with one click to rebuild your feed. Maybe you ended up with a feed full of topics and interests that didn't appeal to you, so Pinterest is giving you a really easy way to restart from scratch and start to rebuild that habit.
This ends the resurrection lesson. In the next section, we're going to start talking about the third component of our growth strategy, monetization.
Lesson Summary
As a product leader, it's our job to recognize when initiatives like resurrection are built on incorrect assumptions, and ensure that we are putting resources against the highest impact initiatives. Usually the most impactful way to be effective in resurrection is to actually think about churn prevention, preventing people from getting to that dormant state with effective activation and engagement strategies.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
64 min
Monetization Strategy
Introduction to Monetization
15 min
Monetization Opportunities
13 min
Model Strategies
9 min
Optimizations
11 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
14:53
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
We started by talking about how growth works as a system between acquisition, retention and monetization. You need to understand how these three parts influence each other, because if you change one of them, it's going to change the rest of the pieces. We've talked through acquisition and retention, and in this section we will tackle monetization.
Teams are typically quick to deploy resources to experiment with acquisition and retention strategies, but when you talk about changing something with monetization, you tend to get a lukewarm response or a lot of pushback. Experimenting with monetization can feel like a difficult problem that's hard to improve in a meaningful way.
However, your monetization model is a critical part of your overall growth strategy. A good monetization model can help drive your acquisition and retention strategies, while an ineffective monetization model can completely derail them. Let's take a look at how this happens.
Monetization is about strategically placing friction in our acquisition or engagement loops. If the friction is too high or put in the wrong place in our growth model, it can slow down or stop our growth loops altogether.
For example, ClassPass has a viral acquisition loop driven by members inviting their friends. However, since ClassPass is a paid service, the monetization model adds friction to the loop between the person inviting and the referred member joining. So in order to reduce that friction, they add an element to their monetization model to provide a free trial to those invited. If they did not do this, it would make this loop completely ineffective.
The same concept applies across all different products and growth loops. We need to know where our monetization model is placing friction within our overall growth strategy and how much friction it's placing in order to understand if it's optimally effective.
Product leaders need to understand what levers they can change to create the right amount of friction in the right places to maximize value capture while minimizing disruption to these retention and acquisition loops. We want to answer questions like:
Who gets charged?
What are they charged for?
When are they charged?
How much are they charged?
In this section, we're going to discuss how product leaders can evaluate these aspects of their model and how they can be changed to improve your overall product's monetization.
Given how important monetization is, it begs a key question, what makes monetization so hard for teams to execute against? There are a number of reasons and we should be aware of them so that we know how to counteract them.
This first reason is what we call sacred cows. Monetization decisions are typically made early in a product's life cycle, and usually by the founders. Over time, they become sacred cows, decisions that collectively the organization believes should not be touched.
The second reason monetization changes can be so difficult is there's a lot of fear that monetization changes will end in a customer revolt.
The third reason it can be so difficult is that changes there have ripple effects across the rest of the growth engine -- acquisition, retention, and engagement. So there's a lot of sensitivity around making these decisions and changes.
The fourth reason it can be so difficult is that any monetization decision we make has a lot of stakeholders interested in the decision.
The fifth and final reason monetization changes can be so difficult is that we need the proper infrastructure to make changes. Achange to one element of monetization can require updates to a lot of other parts of the system, from FAQs to customer support documentation to pricing and contracts and so on.
As a result, monetization initiatives end up being a big undertaking, requiring some tech operations and product effort. But all of this is doable with the strategies that we'll teach you in this program.
This challenge is also our opportunity -- our competition has all of the same barriers and misconceptions as everybody else. So as a result, it means that they are unlikely to be prioritizing monetization efforts. If your competition isn't focused on something, it can be an opportunity for you -- and this is exactly what we see in the data.
ProfitWell's study showed that improvements in monetization can yield 2 to 4X greater impact on the bottom line than improvements to acquisition and retention.
To capitalize on this opportunity, we need to take a holistic approach to monetization. We start from the ground up with an understanding of the problems we solve, who we solve them for, and how we decide to solve them.
A lot of product teams miss this point. They jump right into the monetization strategy without understanding these foundational questions, and end up designing monetization models that have large disconnects from their users.
So let's dive in on how to evaluate and improve your monetization model. We start from the business view. We call this the business hypothesis. The business hypothesis has two different components.
The first is the problem we're solving and who we solve it for. These are the use cases we discussed earlier in our retention strategy.
The second component to our business hypothesis is the monetization strategy that we have chosen to tie to that use case. We refer to this as our monetization model.
As we discussed in retention strategy, there are five key elements to our basic use case map: the problem, the persona, why, alternative, and frequency.
For Figma, they have a starter plan where users need input on the visuals they are creating from one or two people, a personal collaboration use case. The persona is commonly an individual or a freelance designer, and the alternatives are things like email, Slack threads, or design review sessions. Their main why is that they want to save time, have more flexibility and make it easier to design and collaborate on designs. Their frequency around this as around weekly.
On the other side, for the home service provider marketplace Thumbtack, the problem for the pro side of the marketplace is that they need more customers for their small business. Key alternatives include referrals, word of mouth and local advertising. They are motivated by finding more customers and find value in an easier-to-use experience through Thumbtack. They have a weekly frequency of sending quotes.
Next, let's look at our second component of the business hypothesis, the monetization model, and how it matches to these use cases. There are four different components to our model for each use case.
The first is scale. It answers the question, how does our price scale? This is important because our price needs to scale with how the value scales for our customer. If those two things are disconnected, then we end up with quite a few monetization issues.
There are three different ways that price can scale. The first is feature differentiated, where users buy into a set of features, and price scales as they want to add more features. Figma has a pro and organizational plan with differentiated features as a result. Most B2C products are also feature differentiated. We can think about the example of Dollar Shave Club, where you pay more for a different set of products in higher paid tiers.
The second type is called a usage value metric. This is where pricing scales around a function of usage of the product. For example, Slack charges on active users or Wistia charges based on the number of videos you host.
The third type is an outcome value metric. This is where pricing scales around a function of an outcome that you drive for your customer. An example here would be Thumbtack, which charges per lead, and Eventbrite, which charges per ticket sale.
Let's look at the value metric for different use cases in both Figma and Thumbtack, and after defining the value metric for each use case, we'll start to compare them.
For Figma, there are three key use cases: the starter plan, which is designed to run an individual use case; a professional plan when they need to collaborate with a slightly larger team; and an organization plan when they're inside a much larger company and need a circular collaboration.
Thumbtack, on the other hand, is connecting two different use cases: one on the professional side, which we call supply, and one on the consumer side, which are customers requesting quotes from those service providers.
For Figma, the value metric for all three cases is they charge on a per editor basis. This is a example of a usage metric.
For Thumbtack professionals, the value metric is on a per lead basis, which is an example of an outcome metric. Thumbtack does not charge on the consumer side of their marketplace, so there is no value metric -- it's free.
The next part of the monetization model is the what. Here, we want to identify what features or attributes customers get within each use case.
For Figma's starter plan, they get 3 projects and 30-day version history or unlimited cloud storage. For the professional plan, they get unlimited projects, unlimited version history and custom file/user permission attributes. On the organization tier, they get the features of design systems, centralized teams and security features such as SSO.
Thumbtack offers pros the ability to set up the profile and budget. They also allow them to chat with leads as well as set up the job right within the product. On the consumer side, they get features for free, such as reading professional reviews, chatting with pros and selecting pros that they want to reach out to.
The third part of the monetization model is the amount. The question here is how much do we charge for the What in the value metric.
To help standardize how we look at this across products and use cases, we think about this on an average annual revenue per customer per use case. The key here is that we look at the amount per customer, not per user, which can be two different things depending on your monetization model.
1
We can think about the amount on a spectrum. On one end, we have $0, the free products such as Pinterest and Facebook. As we move across the spectrum, we have products that are typically around $100 per year for customers, such as the personal tier on Dropbox, Netflix, or the meditation app Calm.
At around $1,000 per year, we have products like ClassPass for consumers or MailChimp for small businesses. Now the other end of the spectrum, we have products that end up near $10,000 per year per customer like HubSpot or Gainsight, or all the way up to six figures for products like Workday and Palantir.
Where you fall on this spectrum will have big implications on the rest of our growth strategy, which we'll get into later.
For Figma, the starter plan is free for users. The professional tier is around $15 per editor, and on average ends up being around $1,000 average annual revenue per customer. The organization tier is more expensive and ends up being around $8,000 per year per customer.
For Thumbtack, the price per lead varies heavily depending on the vertical, category or size of job. Pros have an average annual revenue per customer of around $2,000 per year. On the consumer side of the equation, while they're paying for their job, they're not paying Thumbtack and so it's free or $0.
The last piece that we'll look at in our monetization model is when. For each use case, the question we're trying to answer here is when do we charge for the what.
We can view this on a spectrum as well. On the one end are free use cases that never charge, things like Pinterest or Credit Karma's free credit monitoring. Then we have use cases that charge for every transaction or use, something like Eventbrite or Allbirds. We then have recurring models that charge every month, like Netflix or ClassPass, products that charge on a yearly basis like Calm, AllTrails or HubSpot, and then those that charge on a recurring basis every few years like Workday or Marketo.
For Figma, our starter use case is never or free, so we never charge the user. The professional use case charges every month, while the organization use case requires a yearly commitment, so they charge every year.
For Thumbtack, pros pay every transaction or per lead with no recurring model. While on the consumer side of the equation, it's never or free.
These four elements of our monetization model create friction in our user's decision to convert and retain on a use case, and hence our ability as a product to acquire, engage and retain customers.
We visualize this friction on a spectrum -- low friction on one end, high friction on the other.
1
The lower the friction of our monetization model, the easier it is for somebody to convert on the use case. This impacts what type of growth loops we use in order to drive acquisition and retention for our product.
In addition, this also impacts the revenue and cost outputs of each use case. Let's go through each element to see how it creates friction.
First, value metrics. When value metrics are easy to measure and predict for our customer, they create low friction.
Think about a well-known product like Dropbox, where they charge per user. More users, higher price, more storage. Pretty easy to understand how much we're going to be charged based on the size of our organization and therefore low friction.
On the other hand, there are value metrics that are hard to measure and predict, and it's hard to understand what the true costs will be, so they end up creating more friction. For instance, Segment charges for something called MTUs. When a user hears that, the first questions they ask are: "What are MTUs, how many of those am I going to be charged for, and how many do I have in my product?" The lack of clarity creates friction for new customers to understand how much they're going to be charged, which puts them on the higher friction end of the spectrum.
The second element of our model, the what, are the features or benefits we charge for. If they are well-known and things that users are familiar with, then those are lower friction. But if the features and attributes are unfamiliar, then the friction is high.
Take Miro, the online collaborative whiteboard platform. When they first launched, consumers were pretty unfamiliar with online whiteboarding as a concept and the different features they were being charged for.
So this is probably higher friction than something like Google Docs or Microsoft Office, products that are built off of well-known features and attributes.
The third piece of our monetization model is the amount that we charge for. The less we charge, of course, the less friction, and the more we charge, the more friction. We think about this in terms, once again, of the average annual revenue per customer.
The last piece of our monetization model, when we charge, also affects friction.
1
On the one hand, free use cases of products that never charge have the lowest friction, think about Fortnite or Facebook.
Somewhere in between are transactional and monthly recurring plans like ClassPass and SurveyMonkey. They are lower friction than things like annual recurring plans or the highest end of the spectrum, multi-year contracts where we're committing for two or three years upfront.
Let's look at Figma, has three use cases with different model friction for each use case.The free plan has the lowest model friction of the three. It offers two editors, which can be a little confusing because what's an editor, who's an editor and how are they different from somebody else? So it creates a little bit of friction, but apart from that, it's a free product, which makes the model pretty low friction.
The professional plan has medium model friction. It's about $1,000 on average per customer, but it's charged on a monthly basis.
The organization plan is $8,000 on average for a customer and is an annual subscription. So it's higher friction and towards the higher end of the spectrum.
Let's look at our Thumbtack example as well.
For pros, the offering is known, they get leads, but it requires some education to understand what a lead is and when they will be charged for it. The amount is around $2,000 per year so it's medium to high friction. The when is per transaction, which is on the lower end.
For the consumer side of the equation, it's a free product. It's a pretty well-known offering and they never get charged, so it's on the very low end of the spectrum.
Once we figure out our underlying use cases, our monetization model and where it lands on the monetization friction spectrum, we can start to think about how we connect this with the consumer view and the rest of our growth model.
So next, we're going to identify the monetization opportunities by first understanding how the consumer views the answers to all of these questions -- like how does value scale for me or what features and benefits do I value? Once we identify gaps there, we'll be able to identify improvements.
Lesson Summary
Monetization is about strategically placing friction in our acquisition or engagement loops. If the friction is too high or put in the wrong place in our growth model, it can slow down or stop our growth loops altogether.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
64 min
Monetization Strategy
Introduction to Monetization
15 min
Monetization Opportunities
13 min
Model Strategies
9 min
Optimizations
11 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
13:04
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Previously, we started by looking at why monetization is such a challenge, but also an opportunity.
We defined our business hypothesis, starting with our use cases, and then looked at how the four parts of our monetization model mapped to that use case.
Now we'll start digging into the different ways to improve monetization.
There are two categories of strategies to improve monetization. The first is what we call model strategies. That's by changing one of the underlying components; we either change one or more of our monetization model levers on an existing use case, or we can introduce and add a new use case that we can monetize.
2
In this lesson, we'll be talking about how to identify opportunities to improve our monetization model through our various model strategies.
1
When we launch a product, we set a monetization model around a use case, but that model is a hypothesis based on what we think is best for our product. The model creates outputs: revenue and cost of revenue. And in order to drive revenue growth, that model needs to align with something that we call the monetization triad.
The monetization triad consists of three parts. First and most important, is the consumer view. This is how the customer thinks about the value, what they value, how they value, how much they are willing to pay for that and when they want to pay.
The second piece of the triad are our growth loops that we want to enable, and how our model interacts with them.
The third piece of the triad is the cost of revenue, which is how much it costs to create and serve that revenue creation over time.
When our monetization model is aligned with these three, it generates maximum revenue. However, this alignment is not static.
We can set a monetization model, but things change over time that create all sorts of gaps and misalignments. We add new features to our product, our market can change, our audience can change, or our business can change.
All of these changes create gaps between our model and the various views of our triad. Those gaps represent opportunities of how we can improve monetization and create more revenue.
By changing components of our monetization model, we bridge these gaps and align our hypothesis with the monetization triad.
Of all the gaps, a gap between the consumer view and the business hypothesis is the most critical. Unless consumers want to transact with us, we don't really have a business. So our priority is to evaluate each of the levers of our monetization model and to understand it from the perspective of our target audience.
There are four key questions that matter for our consumers. These four questions map to each one of the components of our business hypothesis.
The first is when we are asking, "How does price scale?" Our potential customers are asking, "How does the value of the product scale for me?"
From a consumer's perspective, if our price scales differently from how product value scales for them, they might be willing to pay more or less. But eventually, this gap will drive poor acquisition, retention, or churn.
To understand how value scales, we use the Max-Diff Survey. A Max-Diff Survey gives users options and asks them to choose which one they value the most and which one they value the least. Instead of having them rate on a scale of one to some other number, we would ask, "What do you value the most?" -- at least forcing them to make a choice.
We can think about this through an example of a product called Leadpages, which helps you design and spin up landing pages easily for things like paid acquisition campaigns.
We can use this Max-Diff Survey to understand which potential value metrics a user might value the most and least in the case of Leadpages.
Here, Leadpages is asking its users which of these four metrics they value the most and which they value the least: number of landing pages, traffic to landing pages, number of leads or number of users.
1
What we'll end up with in the responses is something that looks like this. Each option has a score of 1, which is the most value, and -1, which is valued the least, which gives us a relative preference of all of the options. Here you could see for Leadpages, we have scores ranging from 0.6 to -0.5.
In this graph, you see the correspondence selected the number of landing pages as the most preferred pricing option. It has a value of 0.6, and we can see the relative value to all of the other options. The second choice was traffic to landing pages, the least preferred option where users with a score of -0.4 and number of leads with a score of -0.1.
So we could move forward with the hypothesis that our users value a pricing based on the number of landing pages or traffic, because that's how they view value scaling with their product usage.
We could also segment by other information we've chosen about these customers, such as demographic attributes, like age, gender or household income, or things like company size and role.
Here, we segmented Leadpages based on the annual revenue of the company that responded to the survey. We can see that companies with lower revenue preferred the number of landing pages as the pricing metric, while large companies value the amount of traffic. The segmentation analysis helps us understand that these preferences are different for different segments of our audience. When it's different, we want to analyze this further, because we can specifically choose a value metric to align with various different use cases that might align to different audiences.
1
The second question that we asked in our business view was, "What do we charge for?" But the potential customer in that situation is asking, "What features and benefits do I value?"
If the features and benefits we charge for are different from what they value, they won't be interested in transacting with us.
To understand what features and benefits users value, you can use the Max-Diff Survey once again. But here, instead of asking users about the value metrics they value, we'd ask users about the features they value most and least.
For Eventbrite, we see that the most valued feature in a hypothetical Max-Diff Survey was sales analytics with a score of 0.4. While customizable checkout and branded community pages are also valued with a score of 0.1. Product training is valued less with a score of -0.2 and customer success managers are valued the least with -0.4. We can do this for different audiences, different use cases and different sets of features.
The third question that we asked from the business hypothesis is, "How much do we charge? What is our price?" But the customer is asking, "How much am I willing to pay for this?"If the price we charge for the features and benefits is higher than the amount the consumers are willing to pay for them, consumers aren't going to transact with us. On the other hand, if the price we're charging is a lot less or lower than their willingness to pay, then we're leaving a lot of value on the table.
This is one major motivation for products to increase prices. Netflix, Dropbox, Resy, and IPSY found that over time, their customers' willingness to pay was higher than what they were charging in the increased prices.
One way to analyze our customers' willingness to pay is to use a method called the Van Westendorp Survey. Van Westendorp compromises a four question survey that asks users about different price points. There are four key questions we'd ask.
First, at what price point would you consider the product to be so expensive that you would not consider buying? We call this the Too Expensive data point.
The second question is, at what price would you consider the product to be priced so low that you would feel the quality wouldn't be very good? This is called the Too Cheap data point.
And the third question is, at what price would you consider the product starting to get too expensive so that it's not out of the question, but you'd have to give it some thought? This is called the Not a Bargain data point.
1
And the fourth question is, at what price would you consider the product to be a bargain, a great buy for the money? This is called the Not Expensive data point.
The most common way to visualize user responses is through the Van Westendorp price sensitivity meter graph. Let's do this for a product like Drift, a chatbot product for sales and marketers.
On the X axis, we plot the price. This is the dollar value of the responses. And on the Y axis, we plot the percentage of customers who said this price, or gave this value for that question. Then we're going to plot four lines corresponding to each survey question and answer.
1
There are two main price points that we look at here, which creates the range of acceptable prices. The lower bound is the intersection of too cheap and not a bargain. And the upper bound of this range is the intersection of the too expensive and not expensive lines.The optimal price point is at the intersection of too cheap and too expensive. But don't take this too literally.
We typically don't recommending using this qualitative data to arrive at a single price point. Instead, once again, we want to use the acceptable range and the optimal price point to inform our hypothesis that we test with our audience, but not let the answers dictate it.
We can also segment these results. In Drift's case, the use cases are divided by the size of company. So they would segment based on the revenue of their clients or size of the employee base. What this would probably find is that smaller companies have lower willingness to pay for the product, while midsize and enterprise companies have a willingness to pay that is much higher.
The last question that we ask from the business hypothesis perspective is, "When do we want to charge?" But the customer is asking, "When do I want to pay?"
If we're charging customers on a monthly recurring basis, but our consumers prefer to pay per transaction, then we're adding a lot of friction and our consumers probably won't be willing to transact with us, or they will and they won't retain.
Thumbtack experienced this disconnect. They started off as a monthly subscription product for their professionals. Their pros could pay a monthly fee to get access to a certain amount of leads. However, from a professional's perspective, they didn't really want to pay on a recurring basis. They wanted to pay up front for each lead, because the amount of business they wanted or needed changed from month to month. So a consistent recurring subscription just didn't make sense for them.
So Thumbtack transitioned from a subscription product to a transactional product. Without this transition, it would have been challenging for Thumbtack to scale into a $1 billion business.
Understanding when consumers want to pay, requires us to answer three questions.
Are customers willing to pay?
Would they rather pay at the time of transaction or on a recurring basis?
And if they want to transact on a recurring basis, what is the right term of recurrence?
First, do they want to pay or not? If our consumers' willingness to pay for the product or use case is zero or close to zero, then it is difficult to charge for the product at all. That doesn't mean that the use case doesn't create value, though. We may just want to combine this free use case with another use case that has a higher willingness to pay.
Second, would they rather pay one time at the transaction or on a recurring basis? To understand this we look at two things.
The first consideration is the natural frequency of usage, or how often on average do our customers experience the problem that our use case solves?
When our frequency of usage is high, like Netflix or ClassPass, then subscription models are more relevant. We don't want the user to make a transaction decision every time they have to use the product, if we can prevent it.
But if the frequency is very low, like Everlane or Airbnb, our audience is unlikely to want to pay on a recurring basis.
The second consideration is the level of variance there is in the natural frequency of usage for that use case.
1
When our variance is pretty high, a subscription model is harder to execute because our audience will have to think a lot about what their usage is going to be, how it might change, and then make the decision to subscribe based on that. On the other hand, if variance is low and our frequency is pretty consistent, like for Slack or Netflix, then our users are probably more comfortable paying on a recurring basis.
And third, if they want to transact on a recurring basis, we need to answer the question, "What is the right term of recurrence? Is it weekly, monthly, annual, or some other option?"
The first question we can ask here is, what is the natural frequency of adoption, not necessarily usage? How often are users making a decision about potentially adopting a new use case or product? Let's look at a few examples.
Think about a product like HubSpot. Their natural frequency of adoption is pretty low, probably once a year or even less frequent than that. VPs of marketing are just not in the market to adopt a new email marketing tool on a monthly basis. So in this case, when the adoption frequency is low, a longer term subscription, say annual, is better.
On the other hand, you have a product like Netflix or Hulu. Their natural frequency of adoption is probably weekly or monthly. Then annual subscriptions aren't as attractive and we have a lot more opportunities at acquiring them. So a shorter term recurrence on our subscription will probably make more sense.
The second thing we can look at here is time to have it asking the question, "How long does it take the user to go from first experience in the product to having built a habit around the core value that they get?"
When it takes a while for the user to establish a habit around the value prop, we need to get them to commit for long enough so that we can get them to experience that value prop and get them to do it multiple times and build a habit.
1
Together, all of these analyses help us form an understanding of the consumer view. More importantly, they help us identify gaps between our model and how the consumer views it.
Next, we'll talk about different model strategies that we can use to bridge these gaps between the monetization triad and the business hypothesis.
Lesson Summary
There are two categories of strategies to improve monetization. The first is what we call model strategies. That's by changing one of the underlying components; we either change one or more of our monetization model levers on an existing use case, or we can introduce and add a new use case that we can monetize.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
64 min
Monetization Strategy
Introduction to Monetization
15 min
Monetization Opportunities
13 min
Model Strategies
9 min
Optimizations
11 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
9:24
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Previously we discussed how to understand the consumer view of monetization, to address key questions regarding the scale, what, amount and when, and identify the gaps between how we view it as a business and how consumers view it.
In this lesson, we'll be talking about the model strategies we can implement to fill the gaps and improve monetization. There are two different types of model strategies. First, we can change an existing use case. Making changes to our monetization model on an existing use case that we already have. For example, increasing price or adding features to an existing tier.
The other way that we can do it is by adding a new use case. So when we add a new use case, we have to identify and create every element of the monetization model for that new use case. An example of this would be creating an add on for our customers to purchase or a new tier in a subscription plan.
So let's understand each of these in a little bit more depth and when we should implement each one. Let's start by changing the monetization model on an existing use case. Each piece of our monetization model presents an opportunity for us to improve monetization. Let's go through each one individually.
The first are value metric strategies. This involves changing the value metric of our model on an existing use case.
Mixpanel for instance, changed the value metric. They went from charging for analytics events to charging for monthly tracked users. Thumbtack similarly moved from charging users for a person's contact information to a concept of a "warm contact" that showed intent through an initiated conversation.
1
The second model strategy are packaging strategies. This involves changing what we charge for or how we combine the different features and attributes into our different use cases.
Dropbox, for instance changed what they offered for individual users. They increased storage limits from 1 TB to 2 TB and introduced new features like Smart Sync.
The third category of model changes are pricing changes. Many products have gone through at least one or two pricing changes in their lifetime. This is for two different reasons.First, because prices are often set as a hypothesis, but over time as products understand their consumers' willingness to pay they adjust prices accordingly. But second, when we change other elements of our model, like the features we offer or the value metric, then we typically also need to adjust prices to match the new willingness to pay for the updated value metric or features.
Take Eventbrite as an example. For their essential use case they changed their price from 1% of the ticket price and 99 cents per ticket, to 2% of the ticket price and 79 cents per ticket. They did this without updating the features, value metric or other elements of the model, and the result was a pure change to the amount lever in the monetization model.
1
But in the Dropbox example, when they changed the features they offered in their plus plan, they also changed the price that they charged from $9.99 to $11.99. So we can change our price either on its own as lever, or in conjunction with a change to one of the other elements of the model.
1
The fourth of model changes is changing when we charge. This is a pretty infrequent type of model change. It tends to require a pretty heavy lift, and it's a hard for existing users to make that switch. Nevertheless, there are some examples of companies changing when they charge.
1
Patreon switched from a transactional to a subscription model, Thumbtack went from subscriptions to transaction over time. Calm moved from a monthly to an annual subscription. All of these are examples of just changing when we charge for our users on an existing use case.
So the question is: when do we change an element of our monetization model on an existing use case?
The most common reason to change is when a consumer view of one of the elements doesn't line up with our current model. We can identify that in the analysis we did in the last lesson. The other time we might change it is when our current model doesn't support the growth loops that we want to enable. The third reason we might change it is that the cost of revenue doesn't line up with the revenue that the use case generates.
Let's discuss the second category of model strategies, introducing a new use case. Here instead of changing an existing use case, we introduce a new one and set our monetization model to minimize the gaps with the monetization triad.
There are two ways that we can add new use cases: vertically or horizontally.
When we add a new use case that the customers can choose instead of an existing use case, we call it a vertical strategy. This is because we're effectively adding a new option to the pricing page vertically. The decision is an "or" decision for the customer. They choose one of the use cases that you offer.
Figma introducing the organization plan is a good example of this. As a customer I now have the decision between adopting the starter, professional or the organization plan. I can't be on two plans at once.
Uber launching UberPool is another example. I now have the choice between taking UberX or UberPool for my ride, but I can't take both.
The second way to introduce a new use case is adding a horizontal use case. This is adding a new use case that is an "and" decision for our customers. In other words, they are already on one use case and could choose to adopt an additional use case in addition to it.We call this a horizontal strategy because the new use case sits horizontally across all of the existing use cases. A customer can be on one of the vertical use cases and add a horizontal use case, but they can't choose the horizontal use case without being on a vertical one.
Consider the example of Peerspace, an event rental marketplace that lets you rent a space for special events like dinners, meetups, and more. Once you've rented a space, you can add on other services like catering, lights, audio, visual, and more. These can also only be purchased in addition to the core use case of renting a space.
Or consider HubSpot. In addition to the core marketing suite, customers can add on more products and services, like dedicated IPs or consulting services. Both of these are examples of horizontal strategies.
We change an existing use case if the business hypothesis for that use case doesn't align with our consumer view, growth model or cost of revenue. But to figure out if we should introduce a new use case, we look at segmentation. We want to understand if some segments of customers have a very different view from our existing set of use cases.
There are four segmentation reasons to introduce a new use case.
First is if some segment of customers have a different need that our current use cases don't solve for, or they have a very different willingness to pay. Then we'd introduce a new use case that better aligns with their view and captures that value.
Consider an example where different segments have different willingness to pay. Here we can see that we always have customers whose willingness to pay is either higher than the price or lower than the price. For the segment that is higher, we're leaving value on the table. On the other hand, for those consumers with lower willingness to pay, we're not really serving them very well today and unlikely to retain.
We can introduce new use cases and monetization options to cater to the different groups' willingness to pay. This enables a business to maximize the value they capture and hence profits from a larger user base.
The second scenario that introduced a new use case is if the growth loops we need to enable for some segments of a use case are very different. Then we'll want to introduce that new use case that better enables those loops.
Consider products like YouTube and Spotify; they rely on user generated content to drive a lot of their acquisition and retention.
Their free product enables these growth loops pretty well, but let's say that YouTube or Spotify decided to go fully paid, so no free use case. This would completely disable some of these loops for acquisition and retention.
That's why these products all have free use cases supported by ads to offset costs and then offer a paid premium plan for those whose willingness to pay is high enough. They have a large base of free users who contribute user generated content, which drives their acquisition and retention loops, but they can also capitalize on consumers with a high willingness to pay in their paid plan.
Third, if some segments, features or attributes have a higher than average cost to serve and their revenue of that use case doesn't support this cost, then we introduce a new use case whose revenue is better aligned with that cost.
Consider any SaaS product like Figma, Gong, or Slack. A feature like priority support is probably valued by a lot of different customers, but that feature has a pretty high cost to serve as well. So one way to align the cost with revenue is to identify the specific segments that value it most and are willing to pay for it and then build a use case that includes that as a feature.
Here in this example, Slack does this by creating a Plus tier and packaging priority support with that higher price tier. But other companies offer this type of support as an add-on to any vertical use case as well.
There's a fourth situation when introducing a new use case. If we're expanding to a completely new target audience that our current use cases don't solve for, then we'd want to understand their perception of value and build a use case around that.
SurveyMonkey, for instance, had always been targeting core business users, however, over time they realized there was a lot of demand and interest from students.
They looked at the student segment and found that they had a lower willingness to pay for similar features. As a result, their current use case didn't really serve them well. So they introduced a new use case specifically targeting the student segment; it had a different combination of features, price, and other monetization elements.
So that's it for model strategies. Next, we're going to look at the second category of strategies to improve revenue and monetization: optimization strategies, which is about improving conversion without necessarily changing one of the elements of our model.
Lesson Summary
There are two different types of model strategies. The first involves changing an existing use case; making changes to our monetization model on an existing use case that we already have. The second is adding a new use case. When we add a new use case, we have to identify and create every element of the monetization model for that new use case.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to Growth
20 min
Acquisition Strategy
53 min
Retention Strategy
64 min
Monetization Strategy
Introduction to Monetization
15 min
Monetization Opportunities
13 min
Model Strategies
9 min
Optimizations
11 min
BONUS: Module Recap
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Growth Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
10:50
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Previously we discussed the different model strategies: changing an existing use case or introducing a new use case.
What we want to do now is introduce the second category of monetization strategies, optimization strategies. These are opportunities to improve revenue without changing one of those core underlying components of our monetization model.
With optimization strategies, we need to address two questions: Who are we targeting with our optimization strategies? And what will drive revenue growth from these customers?
The first question is particularly important. Our users are all in different states within our product. Some are just starting out, while others have been customers for years; some are deeply engaged, and others are only engaged lightly. These states affect their mindset and motivation and our options to optimize revenue.
There are four key customer states that are relevant for monetization optimization strategies:
Potential Customers
Existing Healthy Customers
At-Risk Customers
Churned Customers.
First we'll start with potential customers. These are people who haven't transacted with us yet, but seem like good candidates to be customers.
For a product like Uber, this might be somebody who's downloaded the app, created an account, but hasn't taken their first ride yet. For a product like Figma, there are multiple paths to becoming a customer. They could sign up for the free use case, and in that case, potential customers would be accounts with active users on them in that free use case who show intent for some of the paid features.
The second customer state are existing healthy customers. These are paying customers who have healthy levels of engagement with our product.
Take UberX -- an existing healthy customer might be somebody who takes a ride at least every other week. Or for Uber Pool, this might be somebody who's riding twice a week. And for Figma, this might be anybody in a paid tier who's creating or collaborating on designs every single week.
The third customer state is at-risk customers. At-risk are customers who used to be existing healthy customers, but they're now at risk of churning from the product.
An Uber rider might give low star ratings to a driver twice in a row. This suggests that they might have a bad experience and are at risk of churning. And in Figma's case, if a customer hasn't used Figma in a few weeks, but is still paying for it, they might end up churning soon.
The fourth customer state is churned customers. These are customers who used to be existing healthy, but have stopped transacting with us.
For Uber, a churned customer is somebody who used to be riding on a weekly basis, but hasn't taken a ride in at least the last two weeks. For Figma, this could be any account that canceled their subscription when they were previously using it.
For each of these different types of customers, we need to understand what will drive revenue growth.
For our potential customers, we want them to not just pay, but be engaged with our product in a healthy way. So we're trying to move them from the potential customer state to the existing healthy customer state.
So Uber, for instance, wants to convert somebody who's downloaded the app and signed up into an existing healthy customer who's using Uber on a weekly basis.
And for Figma, we want to take them from that potential customer state on the free plan to the existing healthy customer state on a paid plan.
For existing healthy customers, our objective is to expand revenue.
There are several different expansion paths available. We could increase the depth of revenue in their existing use case. We could also move them to a higher average revenue per customer use case, or we could get them to add on more use cases that they currently aren't using.
In the case of Netflix, we could take a subscriber from their lowest price plan, the basic plan, and expand revenue by getting them to move to the premium plan, which lets them watch on multiple devices.
For at-risk customers, we want to retain these customers and transition them back to an existing healthy customer state.
In the case of Uber, a user who's used the app to go to the airport a few times a year might start to disengage. In this case, Uber would want to get them to establish a habit around another use case, maybe a more frequent one around commuting or going out.
For ClassPass, when a subscriber hasn't used their credits to attend a yoga class for a couple of weeks, they might be at risk of churning. To save them from churning, ClassPass needs to help them reestablish the habit around using those credits on the product.
With churned customers, we want to resurrect them back into the existing healthy customer state.
Consider a customer who's been using Instacart every other week to order groceries. If they don't order for a while, then they're churned customers. Instacart then needs to try and resurrect these customers, but it's not enough for them to transact just once. They need to reestablish the habit around being an existing healthy customer again.
It's the same for Figma. When an account churns, it's pretty difficult to get them back. The optimization goal here is to resurrect them and establish the habit of using Figma again, otherwise they're just going to be at risk of churning again.
To transition a customer from their current state to a target state, we need to understand their mindset and how they are looking at this equation: Perceived value is greater than perceived price plus friction.
Let's start with an example of a potential customer journey for ClassPass. Let's imagine a friend told us about ClassPass. We like the idea of it, so we download the app.
The first thing that we see is a free trial: we get 35 credits to book whatever classes we want and we can cancel any time. We then create an account and give our payment information. Once we've signed up for our free trial, we explore studios, book a couple of classes, and attend them. Then after two weeks are up, we can choose to convert to a customer or cancel our free trial.
Let's think about how this journey affects a potential customer's motivation and mentality. We start with the free trial, which is pretty exciting. It's free. We can book any class we want and we can cancel any time. So our motivation level is pretty high, but then we have to create an account, enter payment information, and do some other work that starts to drain our motivation.
When we get through that, we explore all of these awesome classes, which increases our motivation level even further. Finally, we've attended our first class and we come out of it feeling great and our motivation level is pretty high. At this point our two week trial ends, our motivation is high, and we decide to continue with ClassPass and convert into an actual customer.
But now let's consider if ClassPass didn't have a free trial. We download the app and we immediately have to pay the monthly $35 fee before we see anything or get any experience. Our motivation level might be high when we first download the app, but the moment we see the price tag and the work that we have to go through before experiencing anything, our motivation falls, and we're much less likely to convert into a customer.
What this story helps explain is that optimizing your monetization experience comes down to a very simple equation: perceived value has to be greater than the perceived price plus the transaction friction in order to keep moving forward.
Let's break this equation down.
Perceived value is the way our users interpret and perceive the value of the target state with respect to where they are in the current state.
The second element of the optimization equation is perceived price. When we see the price tag of $100 or $20 or whatever the number is, it's not just the number. It's how we perceive that number relative to something else, be it a different use case, the price of an alternative, or even the price of a totally unrelated product.
The third element of the optimization equation is transaction friction. This is physical or cognitive friction barriers that prevent somebody from transitioning from one current state to the target state.
There are three stages to the journey from the existing customer state to the transition state, and we can think about how we can optimize each stage of this journey.
We first have to educate them and build up the perceived value by showing the benefits of the target state.
Consider a potential customer of Instacart who has downloaded the app for the first time. Instacart wants to convert them into an existing healthy customer, and to do that, the potential customer needs to be aware of the value that Instacart gives and perceive that the value is worth converting into a customer. So they want to educate these potential customers, letting them know that you can order from 20+ name brand stores in your local area, or that the order will be delivered as fast as within one hour, or there's a bunch of discounts available if you order from certain places.
The second stage of getting somebody from an existing state to a target state is the conversion process.
The objective at this stage is to increase perceived value with motivational boosts and decrease perceived price by tapping into user psychology and minimizing friction across the conversion flows.
1
Let's look at Drift. In their pricing page for their video offering, they're using motivational boosts to drive up perceived value for a potential customer. For example, they're using urgency with limited time only messaging and social proof by showing companies similar to us that are also using the product.
Then on another pricing page they've used several visual cues to decrease friction to make it more seamless. They explain what kind of teams would choose different packages, highlight the one that is most popular, and highlight the feature that they think will be most valued by the person in that potential use case.
Once we've converted to a customer and a use case, we need to make sure that we establish the habit around that new target state, otherwise we run the risk of customers just churning from our product.
To show this, let's consider a potential customer of Figma on their free starter plan. The focus of Figma's optimization strategy would be to convert them into a paid account. Let's assume they're successful and the potential customer signs up for the professional plan. Now what happens? For the customer to be really making the most of the professional plan, they need to have a habit around those features.
So what we'd want to be looking for is that they're creating at least three projects, as that's one of the key things in the professional plan.
And second, they need to be using some of the paid features like team libraries or private projects. If they don't experience the additional value that the new use case offers, then they're just going to not think that it's worth it and end up becoming at-risk or churned users.
That's why it's so important that we just don't stop with converting a customer to the target state. A huge part of monetization optimization is how we get them to build a habit around that new target state.
In the case of Netflix, most of the activation actually happens during the free trial, even before converting to a customer. They get through the setup of selecting their favorite movies and shows, and that gives Netflix the ability to recommend shows and give users a warm start, getting them to that aha moment of the first show that they really like and love. That leads them to the habit moment of watching at least 30 minutes a week for the first four weeks.
We started by looking at the business hypothesis, which consists of our use cases and our monetization model.
We then talked about the first set of strategies to improve revenue model strategies, where we could either change a lever within our existing model on an existing use case, or we could add a totally new use case like an add-on.
We then looked at optimization strategies, where we talked about how we get somebody from an existing customer state to a target customer state without necessarily changing our pricing or underlying model.
That's it for growth strategy. Next, we'll move on to the third strategic lever: product market fit expansion.
Lesson Summary
With optimization strategies, we need to address two questions: Who are we targeting with our optimization strategies? And what will drive revenue growth from these customers?
The first question is particularly important. Our users are all in different states within our product. Some are just starting out, while others have been customers for years; some are deeply engaged, and others are only engaged lightly. These states affect their mindset and motivation and our options  to optimize revenue.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
Saturation
14 min
Types of PMF Expansion
12 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
13:52
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
So far, we've been through two of the four types of product work that are core to a product strategy.
The first, feature strategy, is focused on enhancing the existing value prop by either adding incremental value to the product, or extending the value proposition to marginal users.
We then focus on growth strategy, which is focused on maximizing existing value props. That is getting the most out of your existing product and existing target market by removing barriers to access and increasing product distribution.
After building out feature and growth strategy, product market fit expansion is the next strategic lever we're going to cover.
Product market fit expansion strategy focuses on adding new value props to our product strategy in two different ways. First, adapting our products to new complementary markets and second, adding new complementary products.
Growth and feature strategy can help expand a product value prop, but both of them have natural limitations that eventually lead to diminishing returns and ultimately a ceiling on growth. By over-indexing for feature and growth strategy, product leaders inadvertently lead their teams to saturation.
Saturation is a barrier to continued expansion of a product based on its current product market fit.
Saturation is natural in the lifecycle of a successful product. Fareed Mosavat, the former Director of Product at Slack, said that "Saturation is a side effect of success. It's important to recognize saturation as every successful company will get there."
It is important to address saturation, because if left unaddressed, it could lead to the decline or even death of your product or business.
Product leaders need to anticipate saturation and proactively expand their product market fit to reach new audiences and/or new value.
Casey Winters, the Chief Product Officer at Eventbrite, says, "You should be building new markets and products to make sure that growth doesn't flatline or decline, because product/market fit expansion often requires time to ramp up to be meaningful growth driver at the aggregate level."
In order to anticipate saturation, product leaders need to understand the underlying causes of saturation.
Saturation can happen in three primary ways. The first is market saturation. This is where your market reaches a natural ceiling where the remaining uncaptured portion of your market does not make sense to go after.
The second is product saturation. This is when the product becomes fully optimized for its use case and opportunities for meaningful improvement dry up.
And the third is product market fit degradation. This is when there is a decline in the existing product market fit that occurs with increased competition or changing customer preferences.
Let's talk in more detail on each of these, starting with market saturation.
We can think about our market in a few ways. There is our total target market, the portion we've captured, and the remaining amount that is uncaptured.
Market saturation occurs when the percentage of the target market we've captured approaches a point where the remaining market does not make sense to go after. This often becomes evident when there is a significant difference between the value of acquiring and retaining new users vs. the cost of acquiring and retaining those new users.
1
As markets become saturated, two things happen:
The first is that competition often becomes high and new users become more difficult to acquire because they're already served by a competitor. Acquiring from competition is much harder and more expensive than acquiring those with no alternative.
Second, as we capture a market, those that remain have a lower willingness to pay.
As a result of these two things, our costs go up and the value we capture goes down.
This is most common with highly successful products that are adopted very quickly by a majority of their target markets. For example, Facebook monthly active users account for approximately 60% of global internet users, with total users accounting for an even larger percentage of the global internet users. These companies have limited opportunities to grow in their existing markets, so as a result, they often launch new products.
Product saturation is the second underlying cause of overall saturation. This occurs when a product becomes fully optimized for its use case, and opportunities for incremental improvement dry up.
Shazam, the music discovery app, was initially used to identify the names of songs. The company has launched that use case on different platforms like the Apple Watch and Mac OS, but has not evolved substantially in terms of new use cases addressed. As a result, it's become difficult for Shazam to continue growing within its existing use case.
1
An example of a company avoiding product saturation is SparkPost. SparkPost, formerly Message Systems, was an on-premise email provider, which was used by almost every top email sender, like the large social networks.
Their on-premise product was not easy to use for smaller developers. So to avoid product saturation, they decided to enable a new use case and launch email cloud infrastructure as a service.
1
The third underlying cause of saturation is product market fit degradation. Product market fit degradation is a decline in our existing product market fit.
Product market fit degradation occurs in two main ways. The first is the red queen effect.
The red queen effect was coined by a Stanford competitive strategy professor, William Barnett. He defines it as being any competitive situation where you need to innovate just to stay in the same place. It feels like tons of effort without really moving forward. The situation means that all competitors in the category need to continually innovate and aggressively try to out-compete one another. This often leads to some competitors going completely bust and others developing market leadership.
2
Red queen effects can be seen in the ride hailing market in the US where there are two large players competing against one another for dominance. Lyft has focused on the US market, leaning towards transportation of people, while Uber has expanded to much of the world and launched a range of adjacent use cases like food delivery, air transportation, logistics, and more. The outcome of this red queen effect has still yet to play out.
However, one result of this is a degradation of product market fit for both Uber and Lyft. Neither player can win by just sticking with its original or current product market fit, because the other is innovating and evolving.
We can see the red queen effect in collaboration, where one player succeeded and the other was passed over. Slack and HipChat offered similar collaboration-focused products in the early days. They differed in a few ways, though.
Slack decided to expand and focus on all knowledge workers. They had high technical and product quality and focused more on a community based product. HipChat, on the other hand, was more focused on engineers and technical professionals. Their product had more technical quality issues and collaboration was really mostly work-focused rather than a broader community focus.
Ultimately HipChat became saturated for a few different reasons relative to Slack.
It served a more niche segment of users rather than being broadly applicable.
It did not offer as robust of a user experience, as the product had some technical quality issues.
It did not emphasize the community and social aspect, unlike Slack.
Slack aggressively innovated on their product market fit and evolved it,  while HipChat did not.
The second way product market fit degradation occurs is over optimizing for power users. And there are two ways this ends up happening.
1
Oftentimes, power users are the most vocal in feedback, so product teams end up overbuilding for them relative to the other portions of their user base. As this happens, product complexity increases, as new features are added to improve the experience specifically for power users who have far more knowledge of the product. This improves product market fit for those power users, but often alienates casual or potential users, resulting in less adoption.
For example, over the years, Adobe Photoshop has added more and more features to create additional functionality, but it's often catered to the needs of power users. This likely improved engagement with power users, but added complexity to the product for other potential new users.
The result was degradation in its original product market fit. It ultimately provided an opportunity for the emergence of new design products with simpler user interfaces like Canva and Figma.
2
1
The second reason product market fit degradation occurs as we optimize for power users is that we add new features that result in increased prices to better service those power users. This creates more friction for potential new users. Often, these users are acquired by lower cost competitors, resulting in degradation of product market fit.
One way to overcome this is by launching different product tiers to expand the market you can target. We can see this in the analytics tools business, which over time has added more and more features and functionality, making it more difficult for early stage smaller startups to adopt their tools. To counter this,  Segment has launched a specific startup package, which is a pared-down version of its product at a lower price.
Let's walk through how different types of saturation might impact a single product and organization.
Let's first talk about Grubhub.
Before we start, let's look at Grubhub's initial use case in the early days. The problem it solved is users wanted to pick up food from their favorite restaurants quickly. The persona was young professionals in cities. The Why was that they wanted to access many different food options conveniently. The alternative was calling the restaurant and ordering by phone, and the natural frequency of usage was weekly.
After its IPO, Grubhub had about 2% of the delivery market, which was growing 20% year over year with one product: takeout. Despite this, they were saturated, because they had a high penetration rate with restaurants that already did their own delivery.
This likely resulted in a few different issues.
1
First, Grubhub hit market saturation as it reached a ceiling in the takeout market. Second, Grubhub's takeout product was improved, but reached product saturation as additional features didn't really substantially improve the creation or capture of value. The third thing is it hit product market fit degradation as competitors began offering similar services and were expanding quickly.
Grubhub realized these three problems and resolved them before they became significant by offering users a delivery option in the app, in which restaurants could make their own deliveries. This helped Grubhub avoid saturation in three different ways.
First, launching a delivery product expanded the market by adding restaurants that don't offer their own delivery on the supply side and attracting more users that were looking for delivery on the demand side.
2
Second, launching a new delivery product helped Grubhub strengthen their cross side network effects by adding more restaurants, as well as allowing users to choose between delivery and takeout. The delivery product reinforced the takeout product by providing a new pool of restaurants that previously did not have it.
The third thing that this new delivery use case did is offset product market fit degradation, by making Grubhub more competitive with peers that focus on delivery. Strong competencies and takeout allowed Grubhub to differentiate itself relative to peers.
By building a delivery use case, Grubhub expanded their product market fit and avoided saturation early.
1
But let's walk through an example that has not reacted well to saturation, Webex. Webex was once considered one of the dominant video conference companies in enterprise.
Webex's Enterprise use case likely solved the problem of professional meetings with members in various locations, including international.
Webex's focus was on enterprise customers, which was slower-growing than small business or consumers. And as a result started to hit market saturation relative to Zoom, BlueJeans or other competitors. Webex also invested heavily in features for those enterprise users that didn't substantially capture more value, and hit product saturation.
1
And then, based on this, new competitors emerged that offered a more user-friendly experience, like Zoom. This resulted in decreased market share for Webex.
1
A product leader's goal with product market fit expansion is to stay in front of these types of saturations, because they can happen quickly and can be difficult to overcome once they're reached.
That begs the question, how do I know when saturation is hitting?
1
There are four lagging indicators of saturation.
The first is volume metrics, which are either flat or declined in the number of users or market share.
The second is stagnation in improvement on key product metrics around acquisition, retention, or monetization.
The third is diminishing returns on key activities, where we put in substantially more effort to drive the same or less results in key feature or growth work.
The fourth is a stagnant total addressable market, where there's not enough people on the internet. This is only relevant for companies with a huge share of markets that aren't growing very fast -- places like Facebook or Google.
1
Once you detect these metrics, saturation has already happened. Product market fit expansion is most valuable when you can build off your existing product market fit. Once saturation has started to happen, your ability to do that is much weaker. For this reason, product leaders need to proactively identify and evaluate new product market fit expansion opportunities.
1
The key is that you need to get rid of the misconception that product market fit is static or one-time event.
Product market fit is something that can degrade in your product and/or market over time. So product leaders need to always be evaluating how they can make investments to expand and strengthen their product market fit.
This is what we call a product market fit expansion opportunity, a product or market expansion idea that a product leader has identified to stay ahead of saturation.
The challenge with product market fit expansion opportunities is that they require a greater investment than feature or growth work, but often come with bigger upside. They are high effort but high reward.
In the next lesson, we'll look at product market fit expansion in more detail and walk through...
How product market fit expansion work is different than growth and feature work
How it's different from initial product market fit
What types of product market fit expansion product leaders can use to stay ahead of saturation.
Lesson Summary
Product market fit expansion strategy focuses on adding new value props to our product strategy in two different ways. First, adapting our products to new complementary markets and second, adding new complementary products.
Growth and feature strategy can help expand a product value prop, but both of them have natural limitations that eventually lead to diminishing returns and ultimately a ceiling on growth. By over-indexing for feature and growth strategy, product leaders inadvertently lead their teams to saturation.
It is important to address saturation, because if left unaddressed, it could lead to the decline or even death of your product or business. Product leaders need to anticipate saturation and proactively expand their product market fit to reach new audiences and/or new value.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
Saturation
14 min
Types of PMF Expansion
12 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
11:38
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we talked about how all successful products eventually approach saturation, a barrier to continued expansion.
Saturation has three underlying causes: market saturation, product saturation, and product market fit degradation.
Product leaders need to be proactively identifying and evaluating product market fit expansion opportunities to avoid this saturation. This is critical, as product market fit expansion is most valuable when you can build off your existing product market fit. Once saturation has started to happen, your ability to do this is much, much weaker.
In this lesson, we're going to look into product market fit expansion in more detail. We're going to talk through how product market fit expansion work is different than growth and feature work, how it's different from initial product market fit, and what types of product market fit expansion product leaders can use to stay ahead of saturation.
Let's start with the first. How does product market fit expansion work differently than growth and feature work?
When a product hits initial product market fit, it has reached product market fit with some addressable market and then captures some share of that addressable market. We can illustrate this on the graph where the Y axis is market share, and our X axis is the addressable market.
After initial product market fit, product leaders aspire to increase their market share while increasing their addressable market, ultimately resulting in a higher market share in a larger addressable market.
In general, feature strategy is an effective tool to expand your addressable market by solving the needs of different user segments. On our graph, that results in an increase to the right.
Meanwhile, growth strategy is generally a good tool for increasing your market share within a given addressable market. On our graph, this is an upward increase.
1
Feature and growth strategy respectively drive increases to the right in addressable market and upwards in market share. However, there is a ceiling that neither strategy can break through. That's the saturation ceiling.
This occurs when there are natural limitations to your ability to further increase your market share or expand your addressable market using feature or growth work.
Product market fit expansion is designed to move the saturation ceiling, creating more runway for your business to increase market share and your addressable market.
In this way, while feature and growth work are often focused on creating incremental improvements, product market fit expansion work is focused on creating a much larger step function improvement. This improvement requires higher investment, but when done successfully it creates a lot of opportunity for continued growth.
This brings us to our second point. How is product market fit expansion different from initial product market fit?
Initial product market fit is often about creating something from nothing. You have to establish core capabilities and a competitive position to successfully reach and maintain initial product market fit.
Product market fit expansion, however, should leverage your existing product market fit so that you don't have to start from nothing. You can adapt your existing product to new markets or launch products that are complementary to your existing product.
In the case of either adapting existing product or launching a complementary product, we start by building off our existing product market fit.
Therefore, when done successfully, product market fit expansion is like having a head start. You have an existing product market fit that you can leverage as a shortcut to establishing your new product market fit. The better a product market fit expansion opportunity can leverage our existing product market fit, the better the shortcut to the new product market fit ceiling will be.
1
For example, Uber found initial product market fit in its initial product of ride hailing and its first market of San Francisco. It later found product market fit through several product market fit expansions: UberX, Uber Eats and UberPool, just to name a few.
Expanding into these new products was made possible by the fact that they were able to build off of their initial product's product market fit, rather than start from scratch. Had they tried to enable UberPool from nothing, it would have been a far more difficult if not impossible task.
This brings us to our third question. What types of product market fit expansion can product leaders use to stay ahead of saturation?
We can think about types of product market fit expansion in terms of a product's use case. As we discussed before, a use case is the articulation of the problems your product is solving and who it is solving them for.
As a quick reminder, there are five components to a basic use case map: the problem, the persona, the why, the alternative, and the natural usage frequency.
1
When thinking about it in terms of use case, product market fit expansion can be thought of in three different categories:
Adapting an existing use case to expand your adjustable market.
Adding a complementary use case that leverages capabilities to launch new products that reinforce your existing products.
Adding a new use case that leverages a core capability to create and capture value in a completely new category.
Let's start with adapting existing use case. Here we are adapting an existing product in order to increase its effectiveness or make it accessible to a new market. It involves addressing the same problem for a similar persona as the existing use case.
1
There are three main types of adapting a use case: geographic expansion, tech adaptation, and unbundling.
Geographic expansion involves launching an existing product to a new geographic market. This often involves adapting your product to fit the needs of the new market.
For example, when Slack expanded into the European Union, they initially localized the product by translating it to the major European languages. They found that localization was not sufficient, in that large enterprises required additional data security in order for the new market to adopt the use case. So Slack had to establish European data residency and make other changes to the product in order to make it accessible to the new market.
The second type of adapting an existing use case is tech adaptation, which is the same problem and persona as your existing problem, but with one major change in the use case. There is an existing or potential alternative that could disrupt your product.
Products can be adapted to deliver an existing use case with new technology. For example, Netflix's initial product was DVD by mail. While it was still operating the DVD business, Netflix launched streaming. They saw streaming as a way to bypass the market incumbent, Blockbuster, and to disrupt their own business model.
To succeed, Netflix functionally separated its two businesses and focused on improving the technology, licensing, data and other capabilities that were critical in reaching product market fit for streaming.
The third type of adapted use case expansion is unbundling. This is splitting an existing use case into a separate company, product or application so that it can compete more effectively.
1
For example, Facebook famously unbundled its Messenger into a standalone app. This decision was likely driven by a few different factors:
First, to help reduce complexity in Facebook's mobile app and better serve its users.
Second, to compete against messaging services like WhatsApp, which at the time was not owned by Facebook,
Third, to give Facebook Messenger additional exposure in the App Store rankings.
The second type of product market fit expansion is adding a complementary use case.
There are three main ways to add a complementary use case: horizontal expansion, vertical expansion and platform expansion.
Let's start with horizontal expansion, which is launching a complementary use case as a new product to our existing market.
1
Stripe started with a core use case that enabled customers to collect payments from websites and their applications. Over time, they added complementary use cases as new products, such as Terminal, which is a point of sale payment system, corporate credit cards, and more. They leveraged their initial use case to expand the potential products to serve their existing audience of startups.
The second type is vertical expansion, which is adding a complementary use case to an existing product.
Instacart started with the use case of getting your groceries delivered. They leveraged this use case to launch a complementary use case in their existing product that allowed users to get delivery from pharmacies.
The third type of adding complementary use cases is platform expansion. This is adding a platform to your existing business that leverages, reinforces or monetizes your existing network of users.
1
1
And the example of this is the Salesforce platform. This enables developers to add complementary use cases to the core Salesforce CRM, to expand their product market fit.
1
The third category of product market fit expansion is a new use case expansion, which is a new use case that does not reinforce an existing product.
There are three main types of new use case expansion: strategic sequence, diversification, and first and best customer. Let's start with strategic sequence.
Strategic sequence is launching a new use case that will allow the company to sequence to its overall product strategy.
During the web application era, Google quickly realized that there would be a shift to mobile usage. To capitalize on this platform shift, Google decided to purchase Android. Android is currently used as the operating system on more than 70% of smartphones globally, and has been instrumental in expanding and reinforcing Google's existing products such as search, YouTube, and others over the years.
The second way to create a new use case is diversification, which involves leveraging current core capabilities to launch a new business that does not necessarily reinforce our existing product.
Uber's expansion into freight and logistics through Uber Freight is an example of diversification. Uber leverages some of its existing core technology and operations capabilities to help match shippers to carriers. But ultimately this is a new use case, solving a new problem with a new audience.
The third type of new use case expansion is first and best customer.
The concept was coined by Stratechery's Ben Thompson.
First and best customer is building an internal tool or product to support an internal need, then commercializing this tool. The famous example for this is, of course, Amazon. Amazon's AWS was an example of building tech that solved internal problems first, but then commercialized and turned externally to sell to more users and customers. It was solving new problems for new audiences.
In this module, we're going to walk through how product leaders should approach product market fit expansion through the product market fit expansion process. Then we'll do a deep dive into each of the different types of product market fit expansion and explain some nuances involved in executing each of them.
The product market fit expansion has two core steps. The first is identifying and evaluating opportunities.
To identify and evaluate new opportunities, we'll walk through three steps.
First is macro evaluation, where we ask high-level questions product leaders need to address to understand how a given opportunity contributes to the long term product strategy.
Second, we'll go through micro evaluation, which is a deeper analysis of how likely a product market fit expansion opportunity is to be successful based on its shared capabilities with existing products and its market attractiveness.
The third step is mapping product market fit expansion opportunity, where we'll map our shared capabilities and market attractiveness to identify an approach to product market fit expansion.
Then we'll walk through a second step of the product market fit expansion process: successfully launching and executing on the opportunity.
Here, we will answer: what are the requirements of successful expansion? We'll cover a lot of the common mistakes and success factors.
After we've covered the product market fit expansion process, we'll go through a deep dive of each strategy, where we'll look at the nuances of each and how to execute them.
Lesson Summary
While feature and growth work are often focused on creating incremental improvements, product market fit expansion work is focused on creating a much larger step function improvement. This improvement requires higher investment, but when done successfully it creates a lot of opportunity for continued growth.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
Identifying & Evaluating PMF Opportunities
28 min
Launching and Executing PMF Opportunities
11 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
27:46
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last section, we introduced the three types of saturation: market saturation, product saturation and product market fit degradation.
Product leaders need to proactively identify and evaluate product market fit expansion opportunities to avoid the saturation. This is critical, as product market fit expansion is most valuable when you can build off your existing product market fit. Once saturation has started to happen, your ability to do that is much weaker.
We introduced the three categories of product market fit expansion: adapted, complementary, and completely new use cases.
In this section, we'll cover the product market fit expansion process.
We'll start by identifying and evaluating product market fit expansion opportunities.
To do that, we're going to go through three steps: the macro evaluation, a micro evaluation, and mapping our product market fit expansion opportunities.
The macro evaluation is a sense check that should be done at the product leader level, and it uses a series of questions to ensure that the high level strategic implications of the opportunity are fully understood before analyzing it in more detail. It's designed to prompt discussion and align the team.
In their book "Profit from the Core," Bain & Company partners Chris Zook and James Allen describe how companies should rely on their core business to power future growth and expansion opportunities. In doing so, they discuss five questions that leaders need to discuss with their teams and answer for any product market fit expansion opportunity.
The first question is how much does this strengthen, protect, and reinforce the core? It is important for product leaders to address this question because it assesses the ability of an opportunity to reinforce the defensibility of our existing products.
The second macro evaluation question is what are the chances of us becoming a leader in the new segment or business?
Category leadership is often a proxy for a product's ability to create and capture value relative to competitors.
The third question you should answer is, could this move have a defensive benefit against our present or future competitors? This question is important to address, especially in situations where your market is close to saturation or near product market fit degradation, as defensive opportunities could allow for additional value creation and capture for your products.
The fourth question is, does this investment position our core business strategically for an even stronger future set of adjacent moves, such as hedging against a major uncertainty? This question addresses how your product market fit expansion opportunity fits into your overall product strategy. Opportunities that lead to a greater sequence of strategic moves could help you create and capture more value in the short and long term.
The fifth and final question in our macro evaluation is, can we be certain of executing well?
A great opportunity that cannot be implemented well will not allow you to capture and create value. Before moving forward with a product market fit expansion opportunity, product leaders should have alignment with their team on these five questions.
This macro evaluation is a chance to ensure that there is a concrete understanding and clarity around each of these questions before moving on because product market fit expansion opportunities, once again, require a really large effort. These questions should prompt a healthy discussion that helps solidify the understanding and confidence in the expansion opportunity.
Let's look at how this applies to a recent product market fit expansion opportunity from Eventbrite -- their expansion from in-person to online events. We can evaluate the opportunity using the five questions.
The first question, once again, is how much does the opportunity strengthen, protect or reinforce your current product market fit?
Eventbrite started working on its online events product prior to March 2020, when COVID-19 became a significant concern. After this situation arose, Eventbrite's core business of in-person events was at risk due to regulations limiting in-person events. Online events allowed a new type of event creator to access Eventbrite's tools. It also allowed the existing event creators a new type of event to engage their audience, and it also gave the consumer more choice of events to purchase.
The second question addresses leadership potential. Category leadership is great to aspire to, but not necessarily a requirement for a good opportunity. Given Eventbrite's large network of creators and users and lack of major competitors, the online events product was likely able to develop a leadership position.
The third question is about the impact on current or future competitors, where we ask, could this move have a defensive benefit? For Eventbrite, an online events product likely prevents churn of existing event creators who would seek out new solutions from competitors. It also allows Eventbrite to build its online business until in-person events return to its markets.
The fourth question is about whether the expansion could enable even more strategic opportunities.
For Eventbrite, the expansion to online events unlocks the ability to create tools that make the actual online event experience stronger for event creator and attendee.
2
The final question is around execution. The move into online events leverages some key capabilities the team already has in acquiring and retaining event creators and consumers. Success in online events requires them to build a new skill of managing the online event experience.
Building hypotheses around these key five questions is important in assessing new opportunities. The macro evaluation can be used as a sense check to filter out ideas that have little chance of being successful, but for opportunities that are promising based on the macro evaluation, it's important to double click and conduct a micro evaluation where we analyze the shared capabilities between our existing and new use case, as well as the attractiveness of the new market.
Our micro evaluation stems from the philosophy that there are two major things that make a product market fit expansion opportunity likely to be successful. The first is shared capabilities. These are capabilities required by your adapted, complementary, or new use case that we already have in our organization.
The second is an attractive market, which is how much value you can expect to get from your new market based on its size, growth potential, and competitive density.
Once again, the difference between product market fit expansion and initial product market fit is that in product market fit expansion, we have a little bit of a head start. You have an existing product market fit that we can leverage as a "shortcut" to establishing this new product market fit, but we need to identify what the shortcut is.
To answer that, we'll start by evaluating shared capabilities.
When identifying shared capabilities for product market fit expansion, Fareed likes to ask, "Why are we better equipped to do this than anybody else?"
If your current capabilities are not relevant to your adapted, complementary or new use cases, then you're not really leveraging your existing product and therefore are closer to starting from scratch.
1
For example, YouTube had established a core capability and asset around user generated content. When they launched YouTube Premium, they found that it wasn't enough to make that product successful. Instead, premium content was a critical capability in making the YouTube Premium use case succeed. Here, they were not able to leverage their core capability of user generated content successfully.
The more shared capabilities your product market fit expansion opportunity has with your existing product, the more likely you are to be successful.
Therefore, product leaders need to determine what capabilities are required and important for our new product to be successful, and which of those capabilities are already developed within our current product and organization.
For example, Square leveraged its strong technical capabilities in financial services and distribution to successfully launch and scale its Cash App.
There are three main types of shared capabilities that can help your product market fit expansion be more successful: functional, domain specific, and defensible.
First are functional shared capabilities.
Functional capabilities means having expertise in the key business function that helps you build and grow the new use case. The three major areas are technology, distribution and operations.
Let's start with technology. Technological shared capabilities are pieces of technology you have built for your current product that can be used for your new product or in your new market.
A high shared capability around technology looks like Uber expanding into Uber Eats. The ordering, GPS tracking, payment, and many other technological aspects of the new product are highly similar to its existing core ride-sharing product.
However, if Uber were expanding into car sales, as an example, it would have to develop a lot of new technological capabilities to compete with a tech enabled car sales company like Carvana.
Next is distribution. Distribution is about having effective growth capabilities from our existing product that can be leveraged into the new product.
1
When HubSpot expanded from their core marketing product to a sales product, they were able to leverage their distribution capability in the form of company generated content loops and sales loops because the two products had very similar growth models.
However, if HubSpot wanted to expand into a social networking product for professionals, they would require new types of acquisition and engagement loops that they have no experience or current capability in.
The last functional capability is operational excellence. This is about having the organizational structure and processes to be successful in a new expanded product.
Roman, a direct to consumer men's health company that sells vitamins, hair-  and skin-care products, was able to go through multiple geographic expansions in the US by building a repeatable playbook around getting licensing to operate its pharmaceutical business in all 50 states.
However, if Roman were to expand internationally, that playbook would be less relevant, since international licensing looks very different. In that case, the shared operational capability would be much weaker.
For any given expansion opportunity, it's important to look first at how important each capability is to the new expansion opportunity. This has two steps. First, you should identify the capability required to succeed in that new opportunity.
1
Then, estimate how important this capability is to the success of that new opportunity on a low, medium and high scale.
We also need to look at the degree it has shared with our current product. First, based on the importance, evaluate the extent to which your team already has this capability.
Based on this, we can rank that degree of sharing from low, medium to high.
Let's look at Eventbrite's expansion into online events. We can determine how important each of these capabilities is to the expanded product and what level of shared capability we already have.
Let's start with technology. This has high importance to the new online events use case since it is a tech-enabled product that is sold digitally.
When thinking about degree of sharing, we first list out the key tech capabilities needed to execute on the new opportunity. For the new opportunity, we need things like payment features, booking features, event management features and hosting online video. Eventbrite has a lot of these core components like payment and booking, but there are some new things like hosting online video. As a result, we have a medium degree of sharing.
Let's look at distribution. Importance here is high to making the new use case work. We can think about the growth loops needed in order to distribute the product of online events.
When thinking about those growth loops, Eventbrite's existing product shares many of the same acquisition and engagement loops, which means the degree of sharing is high.
Finally, we have operations. This is a medium importance capability since it is important to online events, but is not a core differentiator in the category.
Eventbrite's shared operational capability is medium to high. Online events require slightly different processes to source, rate and provide support, but it has many similar operational requirements to Eventbrite's core live event product.
The second category of shared capabilities we need to evaluate are domain specific capabilities. This is about industry expertise needed to win in the new use case.
There are three types of domain-specific capabilities: intellectual property, industry knowledge, and hard assets.
First is intellectual property. Intellectual property is proprietary content or insights that an organization has developed and protected.
1
An example of high intellectual property sharing is Disney launching Disney+. They were able to use their existing programming and established expertise in creating new content to compete in the streaming space.
The situation would be different if Roku, the cord-cutting smart TV product, tried to launch a streaming service. Roku might have great distribution capabilities, but it would have to start from scratch on its content because it does not have established intellectual property it could use.
Next is industry knowledge. Industry knowledge is specific expertise that helps an organization succeed in a given industry.
Stripe, which as we previously discussed, has deep understanding of financial infrastructure and was able to leverage this in launching new products like terminal, billing, and its startup incorporation product Atlas.
If Credit Karma were trying to do the same thing, it would not have as strong of industry knowledge since it has primarily worked with credit products and ad sales. So their degree of relevant industry knowledge for terminal, billing, and other startup incorporation products would be much lower.
The last domain specific capability is hard assets. Hard assets are pieces of physical infrastructure that are required and needed to be successful.
Hard assets can include distribution centers, server firms, office space, and many other things. These are often high capital expense items that can make expansion very difficult if you don't already have them.
Many times, these can simply be acquired, but in some cases when they are critical and expensive, having existing hard assets that can be shared is a huge advantage.
For example, if the on-demand storage and delivery company Clutter decided to create a retail inventory management product in California where they currently operate, they would be able to leverage many of their existing storage facilities and equipment, and may have high hard asset sharing capability.
However, if Clutter were to expand their existing storage product to the East Coast, despite it being the same product, they would have very low hard asset sharing capabilities.
Let's go back to our Eventbrite example, and look at domain specific shared capabilities, starting with intellectual property. To succeed in online events, Eventbrite will need to build custom engagement tools on top of its video capabilities.
However, the importance of this in being successful in the new use case is pretty low.
While it currently doesn't share those capabilities, it probably isn't a factor in our decision.
To be successful in online events, there is also a high importance of having deep industry knowledge of the events business around the economics, delivery of events, and more.
Eventbrite has previously facilitated online events. So while it's still building its expertise in this space, it's able to leverage some of the knowledge from in-person events, so the degree of sharing is medium.
When thinking about hard assets, the importance of the new use case of online events is very low.
Since hard assets are not important to success in online events, the degree of sharing and capabilities is not relevant.
Finally, our last category of shared capabilities we want to evaluate are around defensibility.
Do we have the ability to leverage an existing competitive strength in the new opportunity?
There are four components to defensibility that can be leveraged: network effects, brand, scale, and embedding.
First is network effects. Network effects are about how much value improves as more users join or use our product.
For example, Facebook's launch of its Marketplace product was able to leverage the existing social network to reach marketplace liquidity almost instantly.
Next is brand, a core user emotion that, when reinforced, increases feature or product acquisition, retention and monetization.
Product leaders often make the mistake of thinking their brand is transferrable to a new product area. It's important to ask what is the key emotional need of the users in this new opportunity, then determine if our brand has already built a reputation for that.
Ravi Mehta, the former chief product officer at Tinder, says that "Product leaders should consider if they have permission from their users to launch this new product. That is, does the brand of your existing offering fulfill the needs of users for your new opportunity?"
A key emotional need in the financial product space is trust. When Intuit's Mint expanded into credit products, it was able to leverage its existing financial brand because they already had built a reputation around trust.
The third defensive capability is scale, leveraging distribution to drive more efficient acquisition or retention, which feeds even more distribution.
1
Spotify was able to leverage its scale to expand into podcasting since its enormous user base had high overlap with podcast consumers.
The last defensibility shared capability is embedding. This is where an organization or consumers' adoption of a product leads to switching costs, which increases product adoption even further.
1
HubSpot has used this effectively in expanding its product lines. Most customers started with their marketing product.
But over time, HubSpot launched additional adjacent products like the CRM and its sales acceleration tools. As customers adopt these additional tools, they're deepening their integration with HubSpot.
As a result, it increases the switching costs, which in turn leads them to adopt and integrate even more HubSpot tools instead because it's an easier decision.
Continuing with our Eventbrite online events example, let's look at the shared capabilities around defensibility starting with network effects. For online events, a cross-side network effect between creators and consumers is of very high importance.
Eventbrite has already built a strong network of event creators and consumers with its core product offering, so the degree of sharing is high.
When looking at brand in online events, it's only of medium importance to event creators.Eventbrite has medium to high in its brand and is well-known by both creators and consumers for its in-person events.
When thinking about scale for online events, it requires high to significant scale in order to drive value to both creators and consumers. Consumers often demand many options for events, and may try other platforms if not presented with those options. And creators want to post their events on the platform that likely leads to the most reach.
Eventbrite has scale in its in-person events, but it's still building scale for online events. Therefore, its degree of sharing is low.
Eventbrite doesn't currently have embedding for online events, but could develop it over time.
Eventbrite could leverage embedding over time through features like the checkout feature, which lets its event creators embed Eventbrite within their website, but currently the degree of sharing that capability is low.
Once we've assessed these different shared capabilities, we can assess an overall score based on how many of the most important capabilities required by an expansion opportunity have a medium to high degree of sharing.
There are three possible outcomes. The first is a strong capability sharing, where most capabilities that are of high importance to the new opportunity are already established or partially established.
1
The second is medium capability sharing, where some important capabilities have high overlap with our existing product.
Then, there's weak capability, where most capabilities that are of high importance to your product market fit expansion opportunity are not already established.
In our Eventbrite online events product example, we would rate the shared capabilities as strong, since many of the highly important capabilities already have a high or medium degree of sharing and none have a low degree of sharing.
However, shared capabilities are not the only consideration we need to look at. We also need to look at how attractive the new market is.
Similar to shared capabilities, market attractiveness has a big impact on your product market fit expansion. If your product market fit expansion opportunity now needs to compete in a much less attractive market, either because it is small, shrinking or has a lot of competitors, you're much less likely to be able to leverage your existing product market fit in order to be successful.
The more attractive your new market is, the more likely your product market fit expansion opportunity is to be successful.
There are generally three types of markets that are attractive:
Big markets with lots of opportunities.
Growing markets with the potential to add a lot of value over time.
Markets with few competitors addressing user problems.
It's generally rare to find huge markets growing very fast with low competitive density.
However, attractive markets can be some combination of these. It's up to a product leader to look at these things and determine how they all fit together to form overall market attractiveness.
We recommend using a scorecard that compares a new market to your existing market on market size, growth and competitive density.
For market size, how does your new market compare to your existing product's market? Is it much smaller, equal, or much bigger?
We can also look at market growth potential. How does growth of the new market compare to your existing market? Is it much slower, equal, or much faster?
Finally, competitive density. Here, we want to look at how many other companies are already competing where you want to expand and how strong they are.
The best situation is having a relatively open market. This is when there are only a few competitors, none of which are particularly strong.
Next is a fragmented market, where you may have a lot of different competitors present, each owning a small piece of the market and adding value in slightly different ways.
Lastly, you have a consolidated market. This is when you have a few competitors who own the majority of the market you are trying to expand into. This is usually the least preferable, unless you have confidence in your ability to disrupt.
For Eventbrite's moving to online events, the new market is a smaller market than their current live events product.
But the market trend is growing faster than their existing market because one, their existing live events market is hampered by the impacts of coronavirus and two, online events are exploding due to the same impacts.
1
Finally, the competitive density of online events is open to fragmented. There are some other competitors that are moving into this space, but there's no dominant market leader yet.
1
To identify the overall attractiveness of the market, we categorize responses as unfavorable, neutral or favorable. Unfavorable is the two responses on the left end of the spectrum. Neutral is the middle option and favorable are the two responses on the right.
As a general rule of thumb, we can use our categories to provide an overall score for market attractiveness. All three that say favorable would get a high score, two favorable would be medium to high, one unfavorable would be medium, two unfavorable would be low to medium, and three unfavorable would be a low score.
Therefore, Eventbrite's overall market attractiveness is a combination of a small market, faster growth and open to fragmented market. It corresponds to two favorable values, giving us a medium to high market attractiveness.
Now that we have our two critical variables of shared capabilities and market attractiveness, we can map these out on our Product Market Fit Expansion Opportunity Map.
On the Y axis, we have our market attractiveness score and on our X axis, we have our shared capability score. By mapping these out, we can sort opportunities into four categories that can help us determine which stand out as the most promising and how we can make opportunities more promising.
It is obviously most preferred to have high market attractiveness and high shared capability opportunities.
1
Eventbrite's online events product falls into this category, especially given how their market changed during the COVID pandemic.
When you find yourself with low market attractiveness and low shared capabilities, there are almost always better initiatives in feature strategy, growth strategy, or other expansion opportunities that are more worthwhile to pursue.
But let's discuss the two remaining categories, where a decision requires additional assessment and input from the product leader. Let's start with high market attractiveness, but low shared capabilities.
The ideal situation for this opportunity is to try to improve our shared capabilities and move it into the top right quadrant.
In assessing the feasibility of this goal, you should address the question, "How could we increase our shared capabilities relevant to succeeding in this opportunity?"
1
There are three primary ways to improve your shared capabilities. The first is by building. This makes sense when the capability could be developed quickly, the opportunity could be approached in a non-scalable way, or the capability is critical to overall strategy of the business.
It does not make sense when there's a time constraint, it's too costly or a low probability of success.
For example, Netflix built its tech capabilities for streaming while it operated its DVD distribution business. Despite building the capabilities in-house, Netflix was able to launch streaming with tech capabilities that were better than competitors', even as it developed network effects in its DVD business that it was able to apply to streaming.
The second way to improve our shared capability is by partnering. Partnering makes sense when there's a mutual benefit in capability sharing, meaning you want capabilities that a partner has and they want capabilities that you have, and you can learn from them in the partnership.
It also makes sense when the time to develop in-house would be prohibitive. It doesn't make sense when the partner does not have a good reputation or is a significant competitor. It also doesn't make sense if partnering reduces attractiveness of the market opportunity, as partners often split proceeds.
Microsoft and OpenAI partnered together to develop a hardware and software platform within Microsoft Azure. The collaboration helped improve knowledge transfer in artificial intelligence.
The third way to improve shared capabilities is acquiring capabilities. This makes sense when the target has strong capabilities that you would like to leverage in a short time span. Also, when the target has talent that will help you build your capabilities via an acqui-hire. When it doesn't make sense is when the cost of acquisition makes the opportunity significantly less attractive, or the tech integration of the acquisition is complicated and will result in a long time to develop the capability.
For example, when Spotify made the transition to podcasts, while it was able to leverage its scale, it had few podcast creation capabilities. To remedy this, Spotify acquired podcast creation platform Anchor and podcast content creator Gimlet.
Going back to our opportunity map, let's talk about situations when there is low market attractiveness, but high shared capabilities.
The goal for these opportunities is to redefine the market to one that is more attractive, to reach the top right quadrant.
In their book the "Blue Ocean Strategy," W. Chan Kim and Renee Mauborgne discuss how it is a mistake to look at markets as a zero sum game where one company's gain is achieved at another's loss. Instead, new products can redefine markets and the rules that they operate within.
"Instead of focusing on beating the competition, you focus on making the competition irrelevant by creating a leap in value for the buyer and your company, thereby opening up new and uncontested market space."
For example, when LinkedIn launched LinkedIn Sales Navigator, at first glance, it seemed like they were entering the very densely competitive sales CRM industry.
However, their product was really a new type of product built for a specific use case.
It didn't replace products like Salesforce for most users, but instead complemented them. In this way, LinkedIn created a unique sales tool market and became the instant leader. It was much better positioned for success than if they had simply launched a competitive CRM product.
After this lesson, you should be able to complete three templates to identify and evaluate product market fit expansion opportunities. First is the macro evaluation.
The second is the micro evaluation.
And the third is the market attractiveness evaluation.
That was a lot, we know, but it covers how to identify and evaluate product market fit expansion opportunities. Now that we've done that, we'll cover the second step of the expansion process, launching and executing on these opportunities.
Lesson Summary
To identify and evaluate PMF expansion opportunities, we go through three steps: the macro evaluation, a micro evaluation, and mapping our PMF expansion opportunities.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
Identifying & Evaluating PMF Opportunities
28 min
Launching and Executing PMF Opportunities
11 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
10:38
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we walked through the three steps in identifying and evaluating opportunities:
Macro evaluation, micro evaluation, and then mapping of product market fit expansion opportunity.
In this lesson, we'll cover the second step of the product market fit expansion process: launching and executing the opportunity.
Let's start by going through the three common mistakes in launching and executing new PMF expansion opportunities: mistiming the expansion, pouring on too many resources and jumping ahead to growth.
First, let's talk about mistiming the expansion. There are two ways teams can mistime their expansion opportunity.
First, teams wait too long. Product leaders who wait too long to expand their PMF will hit saturation. Waiting too long typically stems from a few different reasons:
Over-optimizing feature or growth work in reaching a local maximum.
Overconfidence that your current PMF will continue to be strong and not get disrupted.
And not recognizing the limitations of your current product's growth.
On the other hand, product leaders can also make the mistake of expanding too early.
Product leaders who try to do this too early won't be successful, and will steal valuable resources from more important growth and feature strategy initiatives. There are three key ways this manifests:
First, launching products you don't have strong capabilities in.
Second, not being able to compete with competitors and new markets.
And third, spreading your organization's resources too thin across multiple efforts.
Product leaders need to figure out how to balance the readiness to expand with the risk of saturation.
The second big mistake in launching and executing PMF expansion opportunities is pouring on too many resources.
Teams will frequently overstaff PMF expansion teams, with the belief that more smart people will lead to better results, or they think that they can out-muscle a competitor with pure people power.
1
This actually results in a situation where there are too many chefs in the kitchen; as more people are involved, decisions become slower due to increased alignment and hierarchal needs. This essentially kills the capability of iterating and moving fast, which is needed to execute and get PMF expansion opportunities off the ground.
The third mistake in executing is jumping ahead to growth. Product leaders sometimes rush into growth strategy before your new PMF expansion opportunity has actually reached that new product market fit, or they just pour on way too much distribution from their existing distribution.
One of the benefits of PMF expansion is it creates more opportunities for growth and feature work, however you need to reach that product market fit on the new opportunity before doing that. You can accelerate the steps, but you can't skip any.
You should assess the three basic factors to identify if you've reached product market fit on the new thing: stable retention, meaningful usage and top line organic growth.
1
First, stable retention, which we previously discussed in the module on growth strategy. It indicates you're solving the problem well enough that a healthy percent of users remain active after signing up.
So, what we would expect to see before product market fit is a retention curve that declines towards zero, but once we reach it, we should see it stabilize at a healthy level.
The second thing we want to look for is meaningful usage; are the users that are retained using the product on a meaningful level? If it's very light or casual usage, then even if you can retain them, you probably won't be able to monetize them meaningfully. Meaningful usage varies by product and business model.
The third thing that we're looking for is top line organic growth. If we have decent organic growth, it means that people are finding enough value in the product to tell other people about it, which means we can probably accelerate that growth in some way.
In avoiding these common mistakes, product leaders play two key roles. First, they need to mitigate the development risk, second is mitigating the launch risk. Let's talk a little bit more about mitigating the development risk.
One role product leaders play is understanding that not everything needs to be developed from scratch.
New products could be developed in three key ways. We could build by leveraging internal resources to build a product, we could partner by co-creating the product with a partner, or we could buy by acquiring an existing product.
Each of the three options has advantages and disadvantages.
Let's start with the build option, build has two key advantages. First that the team has full ownership of the product. And second, that the team has more control over product development. It also has two main disadvantages. Often it takes a significant time to develop and launch the product relative to other options, and two, it has moderately high costs to complete.
For the second option, partnering, there are two key advantages. Teams have the opportunity to learn or build a capability by interacting with their partner. And second, partnering often has a lower cost than building. But there's one key disadvantage. Revenue or profit sharing often results in less upside for the initiative.
For buying, there are two primary advantages. First, buying is often the fastest way to launch a product that has attraction. Two, acquiring often results in the acquisition of talent or capabilities. But it also has two disadvantages. Buying is often very costly and teams often underestimate the time, effort and cost of integrating the product into your business.
To decide on the right approach depends on the shared capabilities assessment that we did.
Building your product makes sense if your shared capabilities are strong relative to the expansion opportunity and your competitive landscape will not be too unfavorable by the time you're able to get to market.
Zillow Offers, which is a product that allows homeowners to directly sell their homes to Zillow, was built in-house, as the company leveraged its existing data and understanding of the real estate market.
Dropbox Paper is an example of a B2B product that was built in-house. Dropbox leveraged the shared capabilities in its existing distribution and adjacent product of storing files.
Partnering makes sense when there is potential for shared value between organizations.
Google partnered with Eventbrite and Ticketmaster in launching Google Events. Google provided machine learning and search know-how as well as distribution, while both Eventbrite and Ticketmaster offered their inventory of events.
Walmart partnered with Shopify to allow third party sellers to sell directly on Walmart's marketplace and website. Shopify provided the tech capabilities to deploy third party online stores, while Walmart provided access to its distribution.
In cases where a team requires new capabilities to succeed in an expansion, but does not have time to build or partner, then they should acquire.
Salesforce acquired Tableau to enhance its business intelligence capabilities.
And Pinterest acquired VisualGraph to improve its image recognition and visual search capabilities.
In the module on feature strategy, we discuss how to launch features successfully. We'll briefly cover the key aspects of new product launches and how they're similar, and then discuss how products should be launched differently than features.
1
Previously, we introduced three ways to launch a feature: an experimental release, a minimum viable feature and a phased release. We can use adapted versions of that to think through ways of launching products.
1
Like features, there isn't one correct way to launch a product. In order to determine the best release method for your product, you want to look at the degree of ambiguity the product has. You could do this by asking your team "How confident are we that the product will work and have a positive impact?"
1
If the answer is "very confident," your product has a low degree of ambiguity. Whereas if the answer is "not at all confident," your product has a high degree of ambiguity.
We can look at ambiguity as a spectrum from low to high. High ambiguity products should be launched as an experiment. Whereas low ambiguity products should be launched in phases, and products in the middle should be released as an MVP.
1
Let's dive into these three approaches: first is launching as an experiment. The reason this is best for high ambiguity products is that it allows you to learn and shape the product iteratively with one of the best data sources possible, user behavior.
When ambiguity is high, a valuable approach is to list out all of the assumptions that you need to believe in order for the product to be successful.
What we want to do with the experimental launch is identify which assumptions we can turn into an experiment that can be put into the hands of users and validated.
If you're able to release something to users, to validate one or more of the key assumptions in a product launch, your ambiguity drops significantly.
Furthermore, each assumption you test generates refined insights on what users like and don't like, this can help refine your product with every experiment iteration.
For example, Uber Eats launched as an experiment with the hypothesis that users valued speed. The initial product focused on limited delivery to around 10 minutes and offered limited options in terms of restaurants and menu options.
They found people were more concerned with variety and quality. So they ditched the pre-set menu and signed up more restaurants. Since experiments are designed to learn and validate assumptions, they should be quick, scrappy design solutions that leverage existing design components. They can be somewhat lower fidelity and less rigorous.
1
Casey Winters views experimenting on whole products as more complex than with features. "Experiments are basically the same for product or feature, except that a product will have a bundle of features. An experiment of a bundle is much harder to understand. When it's a feature experiment, it's easy to isolate variables to understand what is working and not working. A product experiment may have 10 different components that could be working or not working."
The second way you can launch your product is as an MVP. Launching an MVP involves launching with a product that solves the use case, but does it in the minimally functional way.Casey says "An MVP is all about delivering value to users by building the smallest product you can to test a hypothesis. You ship to learn, which influences future product development".
There are three key ways a product leader could reduce risk in launching an MVP. They could define the target population by narrowing the market. They could also minimize the number of platforms the product is built for. And also they could do things that don't scale.
Nextdoor and Grubhub initially launched in one neighborhood. Instagram initially limited the platforms it was built for by launching exclusively on iOS. And Uber Eats initially launched its operations in a very non-scalable way. This is why they had meals pre-bought and loaded into drivers' cars, instead of building a network of restaurants to test hypotheses around food delivery.
The third way you can launch your product is through phased development. This is for lower ambiguity, where there is more confidence that the product will be effective and what the product will look like.
1
Phased development involves having a clear vision of the product and building small chunks incrementally. Some of these chunks could be functional on a standalone basis, so you could launch it when ready.
Casey says: "Have a clear vision to execute towards, but be prepared to be surprised. Surprises create opportunities you wouldn't otherwise see and create new sequencing opportunities down the line."
1
Now that we've covered the two key steps in the PMF expansion process, in the following sections we'll start diving deep on all of the individual product market fit expansion strategies.
Lesson Summary
You should assess three basic factors to identify if you've reached product market fit on a new product: stable retention, meaningful usage and top line organic growth.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
Adapted Use Cases
2 min
Geographic Expansion
6 min
Tech Adaptation and Unbundling
6 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
2:23
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last section, we covered the product-market fit expansion process.
First we looked at identifying and evaluating product-market fit expansion opportunities, then we covered launching and executing opportunities.
In the next two sections, we'll dive deep into the strategies for the different types of product-market fit expansion.
We'll start by going through the adapted use case expansion in more detail.
Adapted use case expansion addresses the same use case. The problem we're solving remains the same. Adapted use case expands the addressable market by adapting to a new type of persona.
In contrast to complementary and new use case expansion, adapted use case expansion is about adaptation of an existing product rather than launching a new product. It adapts a product that has already reached product-market fit, or has proven product-market fit, while complementary and new use case expansion are about finding new product-market fit based off of shared capabilities.
Companies turn to adapted use case expansion as the use case is already proven and often provides a shortcut to product-market fit in a new market. This strategy is usually less expensive, risky, and uncertain than other product-market fit expansions.
1
Casey says, "Adapted use case expansions can be some of the easiest ways to drive step changes in the usage of a product. Frequently, a product is very close to unlocking a new audience if it just takes a little bit of time to understand what is preventing that audience from being successful already."
There are three types of adapted use case expansion strategies. First is geographic expansion. This is adapting our existing use case to a new geographic market. This can be regional or international expansion.
For example, when Grubhub expanded to the New York neighborhood of Queens, they had to rewrite routing logic because Google Maps at the time didn't work for the addresses in Queens.
1
The second type is tech adaptation.
Yelp initially launched as a web app. The team redesigned the product as they believed that mobile would be a key platform for their business. They adapted their product to new technology in order to expand product-market fit.
The third approach is unbundling, which is adapting a use case's format by either splitting it into a new company, product, or application.
1
For example, many users listened to and discovered music on YouTube. YouTube decided to address this use case by launching a YouTube Music product to better serve the needs of those users.
In the next lesson, we'll dive deeper into the first type of adapted use case, geographic expansion.
Lesson Summary
In contrast to complementary and new use case expansion, adapted use case expansion is about adaptation of an existing product rather than launching a new product. It adapts a product that has already reached product-market fit, or has proven product-market fit, while complementary and new use case expansion are about finding new product-market fit based off of shared capabilities.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
Adapted Use Cases
2 min
Geographic Expansion
6 min
Tech Adaptation and Unbundling
6 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
5:54
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In this lesson, we're going to look at our first type of existing use case expansion: geographic expansion.
Geographic expansion makes sense when user needs in the new geography, whether regional or international, are similar to those of existing users, but not exactly the same, and therefore need just a little bit of product work in order to make adoption happen.
Geographic expansion is one way to grow your market to offset market saturation in existing markets.
This type of existing use case expansion usually has the highest likelihood of success, as the existing product has already been proven by reaching product market fit in an existing market. Product market fit in an existing market is not a guarantee of success in a new market, but it does show that your product meets the needs of a segment of users.
Fareed says, "Language localization usually isn't enough to grow in a new international market. At Slack, we discovered that each region had different expectations and customer needs -- different communication modes, expectations of data privacy, or even pricing and payment methods -- that we needed to address before we saw meaningful success."
Product leaders make two key mistakes in geographic expansion. Thinking that language translation is enough and trying to leverage the same approach to growth that works in your core market.
Instead, successful teams adapt their products to fit the geography. This is more than just translating your product to a local language.
When Airbnb expanded to China, they adapted their product so that users could search for international areas out of China before people could search within China.
Successful teams also adapt their channels and strategies to the target geography.
In addition to focusing on international search in the product, Airbnb also rewrote their website to be HTTP only, so Baidu, the biggest search engine in China could index it for SEO traffic when expanding there.
Not all geographic expansions are the same. Products should be adapted for geographies based on two differences from your initial existing market, users and regulation.
First, let's talk about the differences in users. There are three main differences to consider: language, needs, and reach.
1
In most cases, your product should be localized to account for local languages.
For example, Stripe's website and products like checkout for France are in French.
To localize for Germany, Pinterest changed their product in several ways. The first, of course, being the language translation to German.
But second is user needs. Ideally your target users in the geography are similar to your existing users, but often there will be some slight differences. Often you will need to add minimum market requirements to your product. These are features that users in your new geography demand and expect within that established market.
Continuing with Pinterest's expansion into Germany, they found that local tastes, preferences, and interests were different from the US. So in order to build engagement, the team needed to customize topic recommendations to show users more locally relevant content.
They also found that relative to the US, Facebook login was not popular. So they had to deprioritize it in the signup and login flows for German users.
After launch into the European Union, Slack established European data residency as a way to address large enterprises' needs for additional data security.
A common mistake is not having "native" quality localization. If an opportunity is promising, there will be local competitors. It's important that a global product look and feel as good as a native competitor, rather than it feeling imported.
The third difference in users is reach. Reach is the approach to reaching and communicating with users in your new geography. This often is linked to user preferences around product discovery and marketing, as well as the availability and popularity of distribution channels in a geography.
Let's look at Pinterest expansion into Germany, which we previously discussed. Their core distribution in the US was through the user-generated content loop. To make it work in Germany, they needed to make sure the URLs were in German, and to include German backlinks from German brands to get the SEO part of the loop to work.
1
Product leaders do not always need to adapt the product to their new geographies right away, though.
Instead, they can launch a new geography with their existing product and see how users engage. Once the team has sufficient proof that the market will succeed and is meaningful, then the team could adapt their product.
For example, Tinder follows this approach. They make their product available on app stores globally, attract users in new geographies, then depending on the success in the market and the signals they're seeing, they will adapt a product to fit local needs.
The second difference you should account for is regulation. These are requirements imposed by government agencies or limitations from a technical perspective.
Redfin, a real estate search and brokerage company, had to become licensed in each state in the US that it expanded to. This also required setting up and running operations in each state with local realtors.
Twilio had to adapt its product to local laws and regulations specific to SMS receipts and prices.
Based on the user and regulation differences, you should identify an approach to adapting your product to succeed in a new geography.
Sometimes product leaders will try to adapt a product to very different users, creating a product that is a bad fit for both new and existing users. In these cases, it is better to treat your product market fit expansion as a new product, and take a more bottoms-up approach.
Adaptation is when we take an existing feature or set of features and modify them, but don't change the bundle of features. New products are when we form a new bundle of features, and that's called diversification, which we'll cover in more detail later.
Product leaders often overestimate the degree of shared capability for geographic expansion. Most commonly this happens in two ways. First is distribution. Distribution needs to adapt to new regional norms and often requires marketing strategies, new sales reps, and new channels.
The second overestimated shared capability is network effects. Network effects are often not leverageable as big networks from one region to another. And sometimes they're just local, and they don't have the same impact as you move to new geographies.
In the next lesson, we're going to cover the two other types of adaptation, which are tech adaptation and unbundling.
Lesson Summary
Geographic expansion is one way to grow your market to offset market saturation in existing markets.
This type of existing use case expansion usually has the highest likelihood of success, as the existing product has already been proven by reaching product market fit in an existing market. Product market fit in an existing market is not a guarantee of success in a new market, but it does show that your product meets the needs of a segment of users.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
Adapted Use Cases
2 min
Geographic Expansion
6 min
Tech Adaptation and Unbundling
6 min
PMF Expansion Deep Dive 2
26 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
6:14
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we discussed the first type of existing use case expansion: geographic expansion.
We assessed the level of adaptation needed for a product based on two factors. First, differences between existing and new geography users, and second, regulation required in the new geography.
In this lesson, we'll cover the other two types of existing use case expansion: tech adaptation and unbundling.
Both of these strategies are important to fending off disruption by competitors.
Tech adaptation helps you adapt new technology that competitors could otherwise use to address your product's use case in a cheaper or more effective way.
Chegg, a student media learning platform, started off renting out textbooks. The team had the foresight to understand that books would be digitally offered, and disrupted their own business by offering e-textbooks for rent or purchase.
Unbundling involves separating your product value proposition into multiple more focused parts.
In addition to unbundling YouTube Music, YouTube also unbundled its offering focused on children, YouTube Kids, allowing for similar functionality with additional guardrails for age appropriate content.
Additionally, both of these approaches could be important to the success of your business, but it's important to note that these approaches could undercut your existing proving use case.
1
In the Chegg example, physical textbooks were disrupted by e-textbooks.
And at Netflix, DVD distribution was disrupted by streaming.
Similar disruption can be seen in the unbundling of the music industry. Until the early 2000s, music was distributed via CDs, until new players began allowing users to download songs. This started with Napster illicitly, then spread to more mainstream venues like iTunes.
Later, downloading was disrupted with the emergence of streaming services like Spotify and Apple Music.
Both tech adaptation and unbundling help address disruption. Disruption Theory was developed and popularized by former Harvard Business School professor Clayton Christensen. It helps us understand both these strategies. Disruption theory starts with two premises.
First, the user needs evolve over time. This is often in the form of demanding more from their products and services.
And second, technology improves over time, allowing for cheaper, better, and more widely distributed use cases.
Because of these two premises, startups and new market entrants are able to launch new products and business models, which were not previously viable and better serve existing use or complementary use cases.
As these disruptive competitors are often startups or new market entrants, they target use cases of smaller or niche markets, which are often negligible or undetectable to incumbents, as it allows these new market entrants to grow without being viewed as a threat.
1
As they scale, they build advantages and their product becomes mainstream. The shift to a new, often better use case comes with new capabilities, which the incumbents do not possess and are often not able to replicate or compete against effectively.
In this way, disruption results in product saturation, market saturation and product market fit degradation. Product leaders make two key mistakes in dealing with adapting products to disruption.
First, assuming that their shared capabilities will allow them to win alone. Second, neglecting the needs or use case of a sub-segment of your users. Let's start with the first mistake.
First teams often believe that the capabilities that helped them succeed in their existing use case alone will allow them to succeed in adapting to the new use case. Instead, they should focus on leveraging existing capabilities, but they also need to build new ones that help best serve the new use case.
Walmart wanted to expand into e-commerce, and realized that many of its brick and mortar basic capabilities would not allow it to succeed. They decided to fast track their progress by acquiring the e-commerce site Jet.
And Uber is proactively seeking to disrupt their existing ride hailing technology with efforts around self-driving vehicles.
The second mistake is that it's often easy to overlook segments that are not highly valuable to your core business.
By thinking of ways to adapt existing use cases to fit these non-core sub segments, you could find new ways to create and capture value and proactively disrupt your own offering.Unbundling is often not the best way to approach this type of product market fit expansion opportunity. You should understand whether the existing use case could be improved by reducing complexity first, before unbundling.
1
Complexity in your existing use case could occur in three key ways. Each way presents an opportunity to reduce that complexity with unbundling.
The first is organizational, and this results in separating an existing use case from the company.
PayPal was previously part of eBay. eBay was focused on building its marketplace and viewed PayPal as a way to serve eBay rather than a standalone product with its own disruptive potential.
As a result, PayPal spun off in order to reduce organizational complexity and to create and capture more value as a standalone business.
The second way to unbundle is to reduce complexity by launching an existing use case as a separate product.
Foursquare unbundled the Swarm product to reduce complexity in its primary product and to serve a use case of check-ins.
1
The third way to reduce complexity is to split the product into a separate application.
2
The example here is, of course, unbundling messaging from Facebook. Messaging was launched as a separate app, Facebook Messenger, to make that use case more accessible to users and to counter the growing number of messaging app competitors.
According to Ravi Mehta, the former Chief Product Officer at Tinder, product leaders considering unbundling should ask: "Is a portfolio better than a single product? In order for this to be true, the use cases for the two products need to be distinct and appeal to largely mutually exclusive sets of users."
Successful organizations often focus on their most profitable customers or products while avoiding opportunities to disrupt their products through tech adaptation or unbundling. These disruptive opportunities often appear less attractive in size or profit. This is what Clayton Christensen refers to as "the innovator's dilemma." The best companies often overlook these disruptive opportunities.
One solution to this dilemma is to reorganize the organizational incentives in a way that leads to continual disruption. In fact, some companies dedicate entire teams to trying to disrupt their existing product to promote this innovative thinking.
1
In the next section we'll dive deep into the next two categories of product-market fit expansion: complementary and new use case expansion.
Lesson Summary
Tech adaptation helps you adapt new technology that competitors could otherwise use to address your product's use case in a cheaper or more effective way.
Unbundling involves separating your product value proposition into multiple more focused parts.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
Complementary and New Use Case Expansion
4 min
Horizontal vs. Vertical Expansion
7 min
Platform Expansion
7 min
New Use Case Expansion
8 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
3:41
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last section we covered the first category of product market fit expansion strategies, which was adapting a use case. This was all about adapting your existing use case to better address a different market.
There were three ways that we covered to do this: Geographic expansion, tech adaptation and unbundling.
Geographic expansion makes sense when you have a proven existing use case that you can adapt to fight off market saturation.
Tech adaptation helps you adapt new technology that competitors could otherwise use to address your product's use case in a cheaper or more effective way.
1
And unbundling allows you to reduce complexity in your product by offering to better serve and potentially expand your existing use case by unbundling the organization, the product, or the application.
In this section, we're going to identify and evaluate our second and third categories of product-market fit expansion: complementary and new use case expansion.
Complementary use case expansion addresses a complementary use case to an existing product, while new use case expansion involves creating an entirely new use case that does not reinforce the existing product.
There are three types of complementary use case expansions. The first is horizontal expansion. This is creating a complementary use case as a new and separate product.
Adobe launched the Photoshop Camera, which allows users to edit and add lenses to their photos. This complements Adobe's existing Photoshop product by addressing a use case that is related, but not core, to the regular Photoshop product.
Stripe started with a core use case that enabled customers to collect payment from websites and apps. Over time, they added new products for complementary use cases such as Terminal, point of sale payments, as well as corporate credit cards.
The second type is vertical expansion. Vertical expansion is adding a complementary use case within the same product, rather than launching it as a new and separate product.
1
TaskRabbit initially launched as a marketplace for various chores like handyman services and cleaning. As they grew, they launched complementary use cases like delivery and assembly.
Instacart started with the use case of getting your groceries delivered. They leveraged this use case to launch a complementary use case in their existing product that allowed users to get delivery from pharmacies.
The third type is adding a platform to your existing business that leverages, reinforces and monetizes your existing network of users.
Grubhub started as a marketplace for food delivery, but then they layered on an ad platform to help restaurants reach more demand and layer on additional monetization.
Developing complementary use cases is a higher cost investment than feature or growth work, or use case expansion, as it typically requires new product development and finding new product market fit. But they are lower risk and less expensive than launching completely new and non-complementary use cases, which we'll talk about in a later lesson.
As a result, complementary use case expansion should be prioritized over new use case expansion, since it is raising the product market fit ceiling at a lower cost.
As we previously mentioned, complementary use cases enhance your existing value proposition -- they do this primarily by reinforcing defensibility. As a result, the complementary use case should have defensibility as a high importance, high shared capability, when you compare to your existing use case.
As a reminder, there are four ways to reinforce defensibility as a shared capability: Network effects, brand, scale, and embedding.
1
However, there are times where good expansion opportunities do not necessarily reinforce defensibility and those shouldn't be ignored completely.
We'll cover the first two types of complementary use case expansion in our next lesson: Horizontal and vertical expansion.
Lesson Summary
Complementary use case expansion addresses a complementary use case to an existing product, while new use case expansion involves creating an entirely new use case that does not reinforce the existing product.
There are three types of complementary use case expansions. The first is horizontal expansion. This is creating a complementary use case as a new and separate product.
The second type is vertical expansion. Vertical expansion is adding a complementary use case within the same product, rather than launching it as a new and separate product.
The third type is adding a platform to your existing business that leverages, reinforces and monetizes your existing network of users.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
Complementary and New Use Case Expansion
4 min
Horizontal vs. Vertical Expansion
7 min
Platform Expansion
7 min
New Use Case Expansion
8 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
7:19
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the previous lesson we introduced complementary use case expansion.
This is where we're adding a new use case that complements your existing product.
One key with complementary use cases is that they are typically aimed to reinforce the defensibility of your overall business. And this can be done in one of four ways: around network effects, brand, scale, or embedding.
The first types of complementary use cases we'll discuss are horizontal and vertical expansions. Horizontal expansion involves launching a complementary use case as a new product, while vertical expansion is about adding a complementary use case within the same product.
1
Both are similar in that they reinforce defensibility but they differ in their approach. Horizontal expansion often results in a suite or a bundle of products that address the needs of core and adjacent users. Vertical expansion builds additional complementary use cases into an existing product that address the needs of new user segments.
Let's dive deeper on horizontal expansion. There are two types of horizontal expansion. The first is customer cross-sell. This is where we sell more use cases to the same user or customer. And then there's departmental cross-sell; this is selling more use cases to different users or customers in the same organization.
Let's first dive into the customer cross-sell. Customer cross-sell could be leveraged when building a suite of products that serve different use cases that collectively reinforce one another.
For example, Shopify launched additional services like fulfillment, in which Shopify manages a customer's shipping and returns.
Twilio, the telecom API, leverages its strong tech capabilities, distribution and operational abilities in launching new products. Initially they focused on text messaging, but over time they've been able to add new products like APIs for WhatsApp, programmable chat, and live video.
Uber found that to grow its business, the supply side or drivers were the primary constraint. One product Uber launched to make it easier to become a driver was a rental service that offered daily financing options to rent cars. This allowed Uber to grow the supply in its core business.
1
The goal of a customer cross-sell is to result in a situation where 1 + 1 > 2. That is, the combination of your existing use case and this customer cross-sell together create and capture more value than the sum of each standalone part. This can mean creating a stronger value prop, growth, or defensibility. But once again, you need to answer the question, "why are we best suited to take on this opportunity?"
The second type of horizontal expansion is departmental cross-sell, which involves selling more use cases to different users in the same organization.
ServiceNow launched as a platform to automate enterprise I.T. operations, with I.T. being their primary customer. But over time they launched new products to serve additional departments, including HR and customer service.
Another example is LinkedIn. They initially started with a professional social network, they then created products for recruiters, then a sales org and then finally the marketing org.
There are two common misconceptions product leaders hold that lead to failure in the departmental cross-sell, and they are on opposite ends of the spectrum. The first is just assuming that a relationship with one department will guarantee a cross-sell into another. The second is trying to get a completely new target persona in a new customer that the org has not sold into to adopt this new use case, when leveraging some existing relationship is often the better path.
The second type of complementary use case expansion is vertical expansion, which is adding a complementary use case to an existing product.
There are two types of vertical expansion. There's category expansion, which is adding more similar use cases to an existing product. Or moving up or down market, which is adapting an existing product to address users up or down the market.
Let's start with category expansion, which is a key way for marketplace businesses to add additional use cases within an existing marketplace. This makes sense when the marketplace has built a strong network effect and additional use cases could fit into that specific marketplace environment.
For example, Instacart initially focused on grocery delivery. They built solid network effects between consumers and grocery stores. This enabled them to launch other categories such as pharmacy, electronics, and prepared meals.
1
This strengthens the network effects even further, but launching those new categories would have been tough as a standalone product. One of the keys here is that out of these categories, groceries was the most frequent use case. This enabled Instacart to build the habit with the user and then launch categories with less frequency for further monetization.
Thumbtack is another good example. They started with handymen, then expanded into other categories to include things like massage therapists, house cleaners, and other occupations on demand. The entry point once again was very strategic; handymen and home services is both a frequent and versatile category. This gives Thumbtack a good foothold to launch into less frequent and less versatile categories.
1
1
Category expansion often comes about from two sources. One, looking at search on your own platform and where people are getting zero results. The second are search queries within Google that are adjacent in high volume to adjacent use cases you already have.
After launching a category expansion product leaders often make two mistakes. One is not really focusing on selling the category expansion to existing users. And then, more importantly, launching category expansion without understanding the use case.
Often category expansion requires building new capabilities your company currently does not have. So you need to uncover whatever hidden complexity exists within the new category.
The second type of vertical expansion is going up or down market. Up or down market should be leveraged when an existing use case does not address the needs of a segment of users and requires a significant change to address those needs.
Up market involves developing products for a smaller pool of larger and more valuable customers. Moving down market involves selling to a larger pool of smaller and less valuable customers.
In consumer, going up market involves building a more premium prop product for consumers, while in B2B going up market involves building for larger companies i.e enterprise.
In the enterprise case, this is usually led by customers who want to use the product but cannot due to gaps in administration, security or other parts of the value proposition. For example, many enterprises wanted to adopt Slack, but Slack lacked the additional security and admin features large companies needed. As a result, Slack launched Slack Enterprise as a separate product tier with additional functionality.
On the other hand, going down market often involves modifying the product or redesigning it to address the needs of users that have high interest and demand but a lower willingness to pay.
For example, Uber started with its black car offering, then moved down market to UberX to allow for a cheaper, more mass market experience. Uber still found that there were user segments that were even too price-conscious for UberX, and added UberPool, a ride-pooling service that lowered the cost even more. This required big changes to the business model algorithms and driver operations.
1
In both moving up and down market, users are often a mix of existing users that are better served by this use case and completely new users. In either case, it's critical to adapt your product to their actual needs, as well as to modify your growth model to specifically target your audience. Oftentimes the same growth model doesn't work for both user segments.
In the next lesson, we'll cover the third type of complementary use case expansion, platform expansion.
Lesson Summary
There are two types of horizontal expansion. The first is customer cross-sell. This is where we sell more use cases to the same user or customer. And then there's departmental cross-sell; this is selling more use cases to different users or customers in the same organization.
And there are two types of vertical expansion. There's category expansion, which is adding more similar use cases to an existing product. Or moving up or down market, which is adapting an existing product to address users up or down the market.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
Complementary and New Use Case Expansion
4 min
Horizontal vs. Vertical Expansion
7 min
Platform Expansion
7 min
New Use Case Expansion
8 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
7:20
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we discussed the two types of horizontal expansion: customer cross-sell and departmental cross-sell.
We also looked at two types of vertical expansion: category expansion and moving up or down market.
In this lesson, we'll cover the third type of complementary use case expansion, platform expansion, which involves adding a platform to your existing business that leverages, reinforces or monetizes your existing network of users.
Platform expansion makes sense when you have a high volume of users that are often engaged with one or more of your existing products. They can be leveraged to either build and reinforce network effects or monetize those network effects of your business.
There are three main subtypes of platform expansion: a developer platform, which is a platform that links developers in your ecosystem to your end users; a marketplace platform, which is building a marketplace out of your existing user base, typically often connecting supply to demand; as well as an ad network platform, adding an ad network to your business.
The first type of platform is a developer platform, which was a term coined by Brandon Chu, VP of Product at Shopify. A developer platform links developers in your ecosystem to your end users.
Developers build niche and adjacent use cases that solve the needs of your users. Often these use cases are not in your company's product roadmap and thus solve user needs without requiring additional resources or cost to build.
1
For example, Shopify Developer Platform links developers who create adjacent use cases with Shopify users that have needs not currently addressed by the core Shopify product.
Another example, of course, is the Salesforce platform, which also allows Salesforce users to directly purchase use cases created by third-party developers.
Developer platforms create value in several ways:
First, they create cross-side network effects for your business by adding third-party developers to your network.
Second, they facilitate the creation of mid- and long-tail use cases without the need to invest the time and resources yourself to build them all on your own. The investment in the developer platform is typically far less than what it would take to create all the use cases that the developer platform will enable.
Third, they also create an additional way for you to monetize your product.
So the question is, what should you have before launching a developer platform? There's a few different things.
1
The first is that you see a high variability of use cases. In other words, there are a lot of mid- to long-tail use cases that you and your team would never be able to build on your own. You also want to see some demand from developers to build these use cases. This usually stems from having a big enough audience of customers to make it worthwhile to them. There's also an existing ecosystem of complementary products that your customers use that you don't want to build on your own. And as a result, it makes more sense to provide a way to integrate those things. In addition, we're going to need to have the capability in business development partnerships, or a way to grow our actual developer base.
1
There are five common mistakes product leaders make when launching developer platforms.
The first is taking a "build it and they will come" approach. We want to gauge demand and need from developers before we build the platform.
The other thing is that we need to make sure that we incentivize third-party developers to create high quality applications.
We also need to make sure we include things like a rating system in the platform to increase transparency and participate in that incentive to create quality.
We also need to make sure that we create high quality documentation or API support. Otherwise, we're just going to end up with a bunch of buggy applications.
Finally, we'll need to make sure that we need to make it easy for users to discover third-party apps. Otherwise, developers won't be happy and the users won't be able to enable these mid- and long-tail use cases.
The second type of platform expansion is a marketplace platform. This is when we launch a marketplace to our existing user base. In most cases, your marketplace charges supply, usually businesses, to access demand, usually your users.
There are two key reasons to add a marketplace to your business. We can reinforce an existing use case or monetize our network.
The first, reinforcing our existing use case, makes sense when you have products catered to both supply and demand, and want to build additional defensibility.
1
One example of this is when Epic Games launched a games marketplace, Epic Games Store. The Epic Games marketplace enabled other game developers to sell their games to Epic's existing user base of consumers and gamers. The store did a few things for Epic Games:
One, it allows Epic to own more of the relationship with gamers.
Two, it helps monetize their existing user base in additional ways.
Three, it helps serve their existing user base with more use cases. Epic could never build all the games on their own.
And four, it helps them acquire more gamers by offering additional games that attract different segments of the market that they didn't currently serve.
Another example is when Walmart Marketplace partnered with Shopify to allow small businesses using Shopify to sell directly on Walmart. Stores using Shopify now had instant access to Walmart's audience and distribution, and Walmart gets instant access to supply of additional items that would take them forever to acquire on their own.
The second reason to launch a marketplace on top of your business is to monetize your network. This usually occurs when you have a large network of users that have a lower willingness to pay.
For example, Facebook marketplace creates another way to monetize Facebook's massive network of users who do not pay Facebook directly.
1
There are some things to look for before launching a marketplace. One is that we need to see significant scale. We need a large enough audience in order to attract supply for the marketplace. Two, we need to see additional utility to our existing users. In other words, the marketplace will add additional value to your users, not just adding additional value to us as a business. Finally, we need to make sure that there is willingness to pay from our audience for the use case that the marketplace brings.
The third type of platform expansion is an ad network platform. Typically, this involves finding advertisers that are interested in reaching your users.
There are two primary business models that facilitate ad network platforms: social media or e-commerce marketplaces.
Social media involves a large user base in which the company has a lot of data that allows for targeting, which is valuable to advertisers.
For example, of course, Facebook and Twitter and Snapchat and other social media companies have built ad networks on top of their social networks.
On the other side, there's e-commerce or marketplaces, which involves allowing supply (sellers) to reach demand (users) via ad. In contrast to social media, this approach focuses on improving liquidity in the marketplace. Often, one side of the marketplace will want to reach more of the other side in additional ways to the ones you provide and are willing to pay for it.
For example, Instacart added a fourth side to its marketplace by allowing CPG brands to directly advertise to users to improve marketplace liquidity for their items.
Etsy, an e-commerce site for handmade and vintage items, allows creators to advertise directly to its users.
1
Ad network platforms can be successfully launched when your business has the following attributes. First, we need to see a significant volume of users. Otherwise, the monetization opportunity isn't worth it to you as a business, and the effort from the advertiser isn't worth investing in your platform. We also want to make sure that those users are active and engaged on the platform. We also want to see that one side of the marketplace is interested in reaching the other side and has a willingness to pay for it.
1
In the next lesson, we'll look at the third and final category of product market fit expansion, which is completely new use case expansion.
Lesson Summary
Platform expansion makes sense when you have a high volume of users that are often engaged with one or more of your existing products. They can be leveraged to either build and reinforce network effects or monetize those network effects of your business.
There are three main subtypes of platform expansion: a developer platform, which is a platform that links developers in your ecosystem to your end users; a marketplace platform, which is building a marketplace out of your existing user base, typically often connecting supply to demand; as well as an ad network platform, adding an ad network to your business.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Introduction to PMF Expansion
26 min
PMF Expansion Process
39 min
PMF Expansion Deep Dive 1
14 min
PMF Expansion Deep Dive 2
Complementary and New Use Case Expansion
4 min
Horizontal vs. Vertical Expansion
7 min
Platform Expansion
7 min
New Use Case Expansion
8 min
BONUS: Module Recap
9 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
PMF Expansion Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
8:01
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Our final product market fit expansion category is launching new non-complementary use cases.
New non-complementary use cases are riskier than other product market fit expansion opportunities for a few key reasons.
First is that we have less ability to build around an existing product market fit. Once again, we aren't leveraging our current product market fit. We're just leveraging a shared capability to find new product market fit in a new area.
Second, there's less value since it does not add complementary value to our existing product. In other words, we don't necessarily end up with a 1 + 1 = 3 situation.
And third, they are more difficult to execute because it entails more unknowns in terms of new markets, products and capabilities.
As a result, complementary use case expansion is often preferred to non complementary new use case expansion because complementary use cases reinforce existing products and improve our existing defensibility.
New use cases don't necessarily do that, and they also take on a riskier and more expensive project.
1
This means that new use case expansion should be leveraged when there is significant product market fit degradation. This makes sense for a couple of reasons.
One is that if you have strong product market fit degradation, then you don't have a good foundation to leverage for one of the adjacent opportunities. The second thing is that new use case expansion is the riskiest and most expensive. So if other product market fit expansion opportunities exist, and you have a strong foundation to build from, then those tend to be the better path.
New use case expansion is best leveraged in three strategies: a strategic sequence, diversification, and first and best customer.
Let's start with strategic sequence. Strategic sequencing is when your product allows the company to sequence to a complementary product by reinforcing defensibility.
For example, Square, which focused on financial services for sellers and merchants, launched a consumer application called Cash App as a consumer banking product that allowed users to transfer, save and invest money.
Initially, Cash App did not reinforce the core Square app for merchants, but over time Square began linking the two sides of the network.
It did this by allowing Square sellers, often retailers to directly pay employee salaries in the Cash App. Additionally, Cash App's loyalty program Boost allows users on the Cash App to get discounts at sellers using Square for their payment systems. And then sellers are able to market directly to prospective customers via the Cash App.
For this to make sense, though, the new product needs to be able to create and capture significant value as a standalone product in the short term, but also unlock a future opportunity between the new product and the existing product.
This means you'd need two things in place. First is a clear picture of how you're going to create and capture value without that future opportunity.  The second thing is that you're going to need a product vision and strategy about how these two things might link over time. Note: we're going to dive much deeper into sequencing in the module on portfolio management.
Strategic sequencing is also risky because to be a meaningful step towards your product strategy, the new use case needs to be able to create and capture value on its own. It's more akin to initial product market fit, where you're building from nothing.
The second way teams could leverage new use case expansion is through diversification, which leverages strong shared capabilities to launch new use cases. Diversification involves making several bets in different use cases with the idea that some will fail, but the ones that succeed could result in significant upside and profit potential.
GE was actually the one to popularize this strategy by building businesses across multiple industries like aviation, finance, healthcare, power, and several others.
1
In their 1999 annual report, they refer to their diversified business in saying, "While widely diverse, are also highly familial in shared information, resources, technology, intellectual capital, and corporate institutions."
In other words, they listed out what they shared in terms of shared capabilities: a common operating system and social architecture; common initiatives of Globalization, Six Sigma Quality, Product Services and e-Business; a common leadership development system; and one set of common values.
The purpose here was to apply a common business success playbook to new industries to fuel growth.
Today in tech, we see large companies especially trying to do this by investing in unrelated markets that could provide future opportunities. An example here is Google's Moonshots.
Google has launched various Moonshots, covering everything from autonomous vehicles to cybersecurity to alternative energy storage. These diversified bets mostly leveraged Google's world-class AI capabilities.
Alphabet, Google's parent company, lays out their philosophy on Moonshots in their 2019 annual report. They say, "Many companies get comfortable doing what they have always done, making only incremental changes. This incrementalism leads to irrelevance over time, especially in technology where change tends to be revolutionary, not evolutionary... We will not shy away from the high-risk, high-reward projects that we believe in because they are the key to our long-term success."
Diversification is often used to drive new innovations or products that have the potential to dominate new or nascent industries.
To be successful, it requires world-class capabilities in target markets that are nascent and non competitive. This takes a portfolio perspective of use cases and allocates risk and reward accordingly. Any new use case would likely have to have a very high chance of failure, but possibilities for an outlier outcome. They require significant capital and a long-term perspective, and typically need to provide autonomy to teams working on them.
Diversification has two main risks. First, as you diversify, you spread your business into several different directions, which diversifies value, but also reduces focus. Second, as diversification consists of several new products or businesses, the time horizon to create and capture value could be very long, and much longer than the other opportunities that you're looking at.
The third way to launch new use cases is First and Best Customer, coined by Stratechery's Ben Thompson. This strategy involves building an internal tool that solves an internal use case very well, then adapting the tool to the needs of external new users.
1
For example, Amazon built the tech for AWS to solve internal issues. The team later commercialized the tech as AWS to external users. AWS was able to build a great product by building a great solution to internal problems first, and then turning it outside.
Another example comes from Epic Games. Early on Epic Games built the popular game Unreal using its internal tech. Ultimately the team believed that the engine that built this game could be commercialized. So they launched Unreal Engine, which is currently used to produce all sorts of world-class games and movies.
This approach creates and captures value by leveraging an existing asset, an internal tool or product, along with the capabilities that helped create it to commercialize a product to external users.
First and best customer strategies have three requirements: an internal product or tool that could solve the problems of an external target market; a defined target market for the product, which is often different than the company's existing users; and capabilities to commercialize the product.
The risk in the first and best customer is that teams will over-index for internal tools with the belief that they could be commercialized, when they should instead be focusing on building great core use cases for their users. This could be mitigated by not building internal tools with the idea of commercializing them, but rather considering commercialization for great existing internal tools that could solve a new use case.
This completes product market fit expansion strategy. In the next module, we're going to cover our fourth type of product work: scaling.
Lesson Summary
New non-complementary use cases are riskier than other product market fit expansion opportunities for a few key reasons.
First, we have less ability to build around an existing product market fit. Once again, we aren't leveraging our current product market fit. We're just leveraging a shared capability to find new product market fit in a new area.
Second, there's less value since it does not add complementary value to our existing product. In other words, we don't necessarily end up with a 1 + 1 = 3 situation.
And third, they are more difficult to execute because it entails more unknowns in terms of new markets, products and capabilities.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
Introduction to Scaling
7 min
Tech Scaling
43 min
Process Scaling
25 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
7:24
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last three modules, we covered feature, growth and product market fit expansion strategy. We previously saw how each of these strategic levers contributes to a product's value proposition in a different way.
Feature strategy is focused on enhancing the existing value prop by adding incremental value to the product or extending the value proposition to marginal users. We do this in two ways, by evaluating and enhancing existing product features or developing new features.Growth strategy is focused on maximizing existing value proposition -- that is, getting the most out of your existing product and existing target market by removing barriers to access and increasing product distribution. We do this in three ways -- by moving things like acquisition, retention and monetization.
Product market fit expansion strategy is focused on adding new value propositions to a product to increase the ceiling on our overall product market fit. We do this in two ways. We can adapt products to new complementary markets, and we can also add new complementary products.
Great product leaders are able to leverage all three of these in different ways to continue to create and capture more and more value with their products over time. However, these three alone are not enough. Product leaders also need to invest in supporting processes, infrastructure, and strategies that enable these three strategic levers.
Casey Winters, the chief product officer at Eventbrite, says, "When you have something that works, all of a sudden a part of your job is to keep that thing working. The underlying infrastructure, tools and user experience need to get better."
This is the role that Scaling plays.
Scaling is making strategic investments to critical infrastructure to enable continued product success.
Product leaders should think about scaling their products in three ways:
Tech scaling
Process scaling
User scaling
As your product grows and evolves, new complexities emerge that, if not addressed, can significantly inhibit your product's success.
Fareed Mosavat, an EIR at Reforge and former Director of Product at Slack, views much of scaling work as inevitable. He says, "Your ability to ship the things you actually want to ship will go down if you don't invest in scaling. Eventually, something will break and you'll have to halt shipping to fix it."
Product managers often focus on shipping new features without addressing the parts of the business that enable your product to succeed at scale. In contrast, product leaders need to understand the implications of tech processes and users on successfully scaling. As companies grow and evolve, so do their scaling needs.
Let's look at how scaling has evolved at Pinterest.
We'll start with tech scaling. A few key tech scaling initiatives that needed to be done over time were one, significantly investing in shifting from desktop to mobile app. The second is switching their web framework from a proprietary web framework to ultimately REACT, which was 30% faster. And also improving its computer vision and image machine learning capabilities as the product scaled.
For process scaling, as the company grew, product leaders finally needed to do a few things. First, they found that adding a project kickoff was essential to the success of launching new features, products, and markets. It involved alignment of PMs, engineers, and designers on the approach to launching the key milestones. By aligning on day one, they found more success in launching new things. They also found that holding experiment review boards was important to evaluating experiments and ensuring new ones were robust.
However, the team found that review boards often delayed the continuation of experiments by several weeks. The product team also focused more of their time on mapping out interdependencies and including infrastructure and platform processes in their roadmaps.
1
And for user scaling, as the user base grew, Pinterest encountered a growing amount of bad behavior. And to deal with this, they needed to invest in a number of user scaling initiatives, like building a large spam prevention team in both engineering and operations. Also, adding warning labels on dangerous content, like things around self-harm and misinformation.
All of these three areas were required in order to enable the product team to act on feature, growth, and PMF expansion strategy.
Now that we've walked through an example of the different types of scaling, let's dive into each one. There are three different ways that you need to scale as your product complexity and scope grows.
The first is tech scaling. There are three different strategies to consider in tech scaling. There's platform and infrastructure work, debt management, and modernization.
The second category, process scaling, is the need to scale your internal processes to handle the increased scope of work across a growing team. And we can do that through process improvement evaluations and value stream mapping.
And the third category of user scaling is that over time, as our user base grows, we need to evolve our product to accommodate the different ways users interact with it. There are three things that we'll need to consider here:
Identifying value-added use cases and learning how to leverage them into product market fit expansion opportunities.
Identifying underserved user segments that might be hidden in the high-level data.
Identifying bad behavior and mitigating it to prevent negative consequences.
A key question we'll discuss is when to take on scaling initiatives.
There are a few symptoms or signals that occur when we know we are running into one of the scaling categories.
The first is that strategic priorities are constrained by organizational or technical capabilities. This could happen when the product does not function properly, processes break down, or user scaling issues emerge that stall or derail your product strategy.
The second is frequent predictable frustrations in which teams fail to deliver projects on time and budget due to scaling issues. Specifically, facing delays in launching new features, products, or markets.
The third is significant unplanned work, which is work completed but not planned in your initial product roadmap. This commonly occurs when scaling work is underestimated or not included in plans needed to reach milestones in a roadmap.
The fourth indicator of scaling issues is that unofficial ad hoc workaround processes emerge because processes are not improved to meet the needs of evolving product work. Individuals create tribal knowledge processes as a workaround.
And then the fifth indicator of scaling issues is declining user-facing indicators. For example, NPS detractors due to quality or performance issues within the product.
It's easy for product leaders to avoid scaling work because they often don't own these decisions. Scaling decisions are often owned by specific functions like engineering, design, marketing, or operations.
Product leaders avoid this work for two reasons. One, it can be complex. It involves diving into the weeds of a different function. And two, it can just feel not attractive. It's not like shipping a product or moving a metric, and it takes much more storytelling to explain the impact that you had around the scaling work.
However, product leaders are directly impacted by scaling decisions and are often limited in their ability to implement a product strategy by scaling constraints.
Therefore, the best product leaders are proactive in identifying where scaling issues exist and find the right degree of involvement to work collaboratively with other departments to address them.
1
In this module, we're going to dive deeper on the three types of scaling and how product leaders should be involved in managing each, starting by diving deep on tech scaling.
Lesson Summary
Product managers often focus on shipping new features without addressing the parts of the business that enable your product to succeed at scale. In contrast, product leaders need to understand the implications of tech processes and users on successfully scaling. As companies grow and evolve, so do their scaling needs.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
Adapting to Changes in Tech
11 min
Platform and Infrastructure Work
10 min
Managing Debt
10 min
Modernization
12 min
Process Scaling
25 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
10:54
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last section we introduced scaling, which is making strategic investments to critical infrastructure to enable continued product success.
We also discussed the three subtypes of scaling:
Tech scaling, which is scaling our technology to incorporate new functionality.
Process scaling, which is scaling your internal processes to handle the increased scope of work.
User scaling, or evolving your product to accommodate the different ways users interact with your product at scale.
In this section, we're going to dive deeper into the first type of scaling, tech scaling.Tech scaling is about scaling your technology to incorporate new functionality.
There are two primary reasons why it is critical for product leaders to manage tech scaling.
The first is that underinvesting in tech scaling can lead to poor product performance, which often results in product market fit degradation.
This is because tech scaling often leads to a bad user experience, where the product underperforms in terms of performance or reliability.
Performance is how fast it takes a user to complete a task within the product compared to expectations. I imagine we have all used products that just feel painfully slow to use.
We can see the importance of performance play out in the search engine wars between Google and Yahoo. Google had and continues to use a simple site that loads quickly, while Yahoo had a site with lots of content, like news, on the same place where the search engine is, leading to a slower interaction. Better performance was a primary reason that Google won over the long term.
Reliability is how often actions accomplish what a user is expecting them to accomplish. High quality products are those with consistency, graceful error handling, smooth transitions, appropriate loading, and high feeling of responsiveness. High-quality products generally have bugs that do not significantly impact the user experience.
How many times have you ran into a product where you just get errors you don't understand, and quit as a result?
Let's look at an example where better reliability was critical to the success of a product. We can compare the iPhone to a Windows phone. Apple iPhones delivered a smooth and reliable experience, while in contrast, the Windows phone often had reliability issues, bugs, and became synonymous with their blue screen of death.
The second reason why tech scaling is critical is that when product leaders don't put enough focus into tech scaling, they end up being limited in their ability to do growth, feature or PMF expansion work.
Sketch, the design tool, was initially built as a desktop application. New design tools that allowed for cloud based interactions emerged, like Figma. Sketch followed suit slowly, due to tech complexity of the initial product. As a result, Figma and other tools have severely eaten Sketch's market share and momentum.
When it comes as tech scaling, there are three mistakes we want to avoid:
Assuming engineering problems are not product problems.
Not understanding the difference between tech scaling as a differentiator or enabler.
Measuring tech success independently of product success.
Let's first start with assuming engineering problems are not product problems.
Fareed says, "If scaling work is not addressed, it can dramatically slow product development."
The problems engineering faces can seem daunting and challenging, and many product leaders want to wave it off and let engineering solve for engineering constraints. But that leaves a blind spot for product leaders and reduces the opportunity to view scale as a weapon for enabling new features and products.
It is a product leader's job to ensure that scaling doesn't grind the business to a halt and that technology opens doors for new innovation.
Product leaders have their priorities, goals, and success criteria, and engineering teams have theirs. But they're interdependent. There are times when engineering and product goals overlap, but even if they don't, it's a product leader's job to find and build alignment between the two. Great product leaders empathize with and understand their engineering counterparts.
To do this, product leaders need to spend the time to understand the maintenance and scaling costs in their business to empathize and align with engineering. Specifically, product leaders need to know the indicators to identify potential problems, which we'll discuss later, and also seek to co-evolve product priorities with engineering leadership, to see new solutions.
They work alongside engineering to identify scaling problems, constraints, and opportunities up front, to build roadmaps that prioritize important scaling work and enhance the overall product strategy.
Let's walk through a hypothetical example of this. A product team keeps pushing for new features, but bugs and debt keep piling up. A key consequence of this over time is that the team can't ship new things anymore.
In contrast, a jointly owned approach to scaling would be a product leader working with engineering and design to assess technical and design debt created every sprint. They allocate a percentage of time for each sprint to clean up or post-release sprints to clean up that debt.
1
The second common mistake product leaders make is not understanding the difference between tech scaling as a differentiator or enabler.
As new technology is available, it can either be used as a differentiator or as an enabler to our product strategy. This is a nuanced differentiation, but let's explain.
Part of your product strategy might be using tech as a product differentiator. This usually means the launching new features or new products leveraging this new technology to improve the value prop of your product.
For example, real estate website Trulia was able to integrate map and commuting data into a feature that calculated commute time and visually displayed it in a map form, based on where you live, providing users with a better user experience.
1
Using tech to enable the value prop, on the other hand, is not about changing or improving the value proposition, but rather strengthening your ability to consistently deliver on this existing value proposition.
Product leaders could think about this using the Diffusion of Innovation, which states that adoption of new innovation or product occurs in stages, rather than being simultaneously adopted by all players. This concept was coined by renowned sociologist Everett Rogers.
We can visualize these stages as a bell curve, in which technology is first slowly adapted, then gradually increases as it's adopted by a majority of users. Innovation adoption often follows this curve, due to time and friction related to becoming aware of that technology, deciding to adopt that technology, and building it.
There are five key stages in the diffusion of innovation: Innovators, Early Adopters, Early Majority, Late Majority, and Laggards.
Innovators are the first to adopt a new technology and often pioneer that technology. Innovating often requires a lot of time and resources to succeed and has a low probability of success. However, when innovation does succeed, there's often high rewards involved.
Early adopters, on the other hand, adopt new ideas and take advantage of the early advances in technology. In contrast to innovators, who pioneer the new tech, early adopters have the advantage of learning from the mistakes of innovators and adopting their tech accordingly. However, early adopters often face more competition than innovators, as the tech becomes more mainstream.
The early majority adopt faster than average in are often able to leverage technology to support product strategy, but to a lesser extent than innovators and early adopters.
And the late majority are skeptical of change and adopt technology later than the average.
And laggards delay adoption of technology, and are often skeptical of its potential impact to improve their business.
Matt Greenberg, the CTO at Reforge and former VP of Engineering at Credit Karma says, "It's appropriate to either adopt as an innovator or try and invent when you think that's a core differentiator of your business. Whereas, when it's not a core differentiator of your business, it's appropriate to be in the late majority or even laggard, depending on the situation."
Product leaders want to be innovators or early adopters for tech when it's used to drive product strategy. It is often advantageous for companies to leverage tech as a differentiator by being an early adopter, as early adoption allows you to use tech in novel ways to add to your value proposition.
1
Leveraging tech as an enabler is more acceptable for later adoption, since the underlying tech often does not need to be differentiated.
Being an innovator or early adopter allows you to differentiate your product effectively. New tech adopted in a novel way could add significant value to your product strategy and could be a shared capability that helps you out-compete your peers.
However, being an innovator or early adopter also results in increased risk, as new tech is often unproven and has a higher risk of failure than existing technology.
For example, Netflix has built tech around its recommendation engine as a product differentiator. Relative to peers like Disney+, Netflix has a strong advantage in terms of its ability to identify content relevant to viewers. Additionally, Netflix is able to understand its users interests and build content in-house that is also highly relevant.
However, when tech is used as an enabler, it's actually smarter for product leaders to be in the middle to the back end of the adoption curve and adopt at the early majority or later. Instead of being a differentiator, tech as an enabler involves leveraging tech that is proven and reliable.
A common example of tech as an enabler is managing a database. Supporting technology like databases are rarely differentiators, and there is significant value in choosing something that is already well tested, well understood in terms of vendor support, has a large open source community, and is easy to hire for.
The third common mistake we see product leaders make is measuring tech success independently of product success.
It's easy for product leaders to get excited about tech improvements, regardless of their impact to the business. Ultimately, however, tech objectives and key results have to be business OKRs.
Matt Greenberg says, "What should the technical organization's OKRs look like? They're the business OKRs, because ultimately, we all get paid because the business is moving forward, not because we're building sweet technology."
If problems from technology are preventing the business from moving forward, then those are problems that need to be addressed. If your business is stuck in the mud or not able to launch new things, then you have waited too long to address the scaling issues.
Fareed says, "If you are finding that certain strategic priorities are difficult to prioritize because of technical issues, there's probably a high leverage way to systemize that priority to make that possible."
1
For example, Evernote faced difficulty in launching new features because of complexity caused by running five clients, using five different code bases. The team ultimately decided to use Conduit, a single code library, to simplify its architecture by running one code base across all five platforms, allowing the company to ship faster.
Adopting the latest technology is only valuable if it increases value to your overall business, by increasing or maintaining acquisition, retention, or monetization.
It is tempting for product leaders to boast about their tech success. It's cool to have implemented the latest infrastructure that automates tasks and speeds up processes, but it's also really common for those to not actually add value, because their improvements don't unlock any constraints within a system. When product leaders are more focused on tech than outcome, they miss this.
Over the next three lessons, what we're going to do is dive deeper into each of the three types of sub tech scaling work:
Platform and infrastructure work
Debt management
Modernization.
Lesson Summary
Tech scaling is critical because underinvesting in it can lead to poor product performance, which often results in product market fit degradation.
In addition, when product leaders don't put enough focus into tech scaling, they end up being limited in their ability to do growth, feature or PMF expansion work.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
Adapting to Changes in Tech
11 min
Platform and Infrastructure Work
10 min
Managing Debt
10 min
Modernization
12 min
Process Scaling
25 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
9:32
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we introduced tech scaling.
1
We discussed how there are three major types of tech scaling and common mistakes product leaders make when dealing with them.
Now, we're going to look at each type of tech scaling in more detail, starting with platform and infrastructure work, which is investing in technological improvements to your platform and infrastructure.
The purpose of platform and infrastructure work is to enable teams to drive their product strategy forward.
Casey says, "A product team works on platform and infrastructure when it has product market fit and wants to allow the product engineers working on it to scale. This work requires understanding the technical architecture and the future roadmap of the product really well."
Oftentimes product leaders can anticipate issues that could arise with platform and infrastructure work. However, there are cases where the team does not anticipate a tech scaling problem. Often these issues are difficult to predict using indicators and if left unmanaged, could result in stagnation over time. These are technical asymptotes. Successful platform and infrastructure work prevents hitting these technical asymptotes.
2
Let's represent technical asymptotes graphically. On the X axis we have time and on the Y axis we have value creation. In successful businesses, they start off by not creating much value, but once they reach product market fit, that value grows. In order to continually grow, teams need to stay ahead of these technical asymptotes or ceilings that cap your growth from a tech perspective.
Successful platform and infrastructure work stays ahead of technical asymptotes. Product leaders work to resolve tech issues to effectively shift the technical scope up, allowing additional runway for growth.
In the last lesson we discussed different indicators of tech scaling issues. However, a product leader's goal is to continue to evolve your platform and infrastructure to avoid these indicators before they even occur.

Therefore, product leaders should not take a wait and see approach but should instead do three things to stay ahead of these technical asymptotes:
Incorporating platform and infrastructure work into your product roadmap
Finding ways to use platform investment to solve multiple problems at once
Making the decision to build or buy internal tools.
The first one is aligning your roadmap and plans with key stakeholders.

Platform and infrastructure work should be planned within the scope of your roadmap. A common mistake occurs here when product leaders do not allocate resources in time to platform and infrastructure work in their roadmaps. This results in significant unplanned work and could derail important initiatives.
Snapchat found that building and deploying new lenses was critical to the virality and resurrection for the product. The team decided to productize lenses and to systematically deploy them in a fast and efficient way. Almost like a template. In this way, the underlying tech that builds these lenses became essential to Snap's overall roadmap.
In another example, Pinterest built Copytune, which is a notification and email experimentation tool. The tool allowed Pinterest to scalably run a variety of experiments around their notifications in email, without writing new code for each experiment. This ultimately helped shape key product decisions over time.
Fareed says that, "While it's often difficult to make the case, product leaders should be willing to sacrifice progress against near-term goals to gain long-term improvements in scalability and execution, which often have lower near-term ROI."
1
The second way of preventing technical asymptotes is leveraging platforms and infrastructure to solve multiple problems.
Product leaders see multiple problems that individual product managers don't. They have the ability to identify where multiple problems can be solved by a single platform investment more than others so it becomes their responsibility. When product leaders don't do this, they end up investing in lots of individual partially redundant systems that add to organizational complexity.
For example, Pinterest acquired VisualGraph to improve its image recognition in visual search capabilities. In leveraging VisualGraph as a tool, Pinterest was able to 1) improve its saving and pinning algorithm and 2) significantly increase SEO traffic, killing two birds with one stone.
The third way of preventing technical asymptotes is making the decision to build or buy internal tools.
Product leaders often default to looking at third party tools to solve problems but now that they have a broader view of organizational needs, there are many times when building a custom solution becomes more cost effective over the long-term. Therefore they need to think critically about the question in a way that individual PMs probably don't.
In evaluating the build versus buy decision, product leaders should ask the following four questions:
How core is the internal tool to your product strategy?
How unique are the needs of the users?
What are the costs to build and integrate and support over time?
What are the long-term needs from the solution?
The first question is what is the role of tech in your internal tool? This question is important because platform and infrastructure work should help drive your product strategy. The two key options are the internal tool being a differentiator or an enabler.
The more core the tech, the more it makes sense to be innovative and differentiated, which often is best achieved by building tools in house.
For example, Amazon strategically built a cloud platform to manage its growing business. Due to its innovation in leading cost economics, the team ultimately commercialized the platform as AWS.
The second question is how unique are needs of internal users? To understand user needs first, you should identify the primary users of your solution, then understand their preferences and needs related to the internal tool.
If their needs are standard and addressable by an existing solution, it might make sense to buy an existing solution.
However, if user needs are unique, a bespoke or custom solution might be required so building one would be a more viable option.
The third question is how does the cost of building compare to buying? Here product leaders should compare the cost to build or partner. In either case there will be upfront costs to build or in partnering to integrate, as well as a cost to maintain the platform and infrastructure over time.
A common mistake product leaders make is to underestimate costs when they think about building. In a build, this typically occurs by not including the long-term costs to maintain in terms of resources and budget.
For buying, integration costs are often underestimated.
2
The final question is how aligned is the buy solution's roadmap to our future needs? Specifically, even if the buy approach works in the near-term, will it continue to work into the future? Long-term viability impacts the decision, as well-maintained internally-built tools are often more adaptable to long-term changes.
It's a product leader's job to understand which of these factors should be weighted most heavily in driving the decision.
For the role of tech, often highly differentiated tech won't be ready for purchase, so building makes more sense.
When many internal users will use an internal tool that is important for the organization, building a unique solution could be a more important factor.
If cost effectiveness is the priority in building the tool or the team has limited budget following the approach with the lower cost to the organization could be ideal.
When the long-term viability of a solution in terms of predictability is critical to the success of your product or a large part of the organization, teams should base their decision on predictability.
Let's look through two examples -- a build example at Slack and buy example at Eventbrite. We'll start the Slack example, which was an experimentation tool that was built in house.
First, for what is the role of tech in the internal tool? The experimentation system was novel in B2B and provided Slack with an advantage over their competition.
2
In evaluating the second question, how unique are the needs of internal users? It ended up being unique since no existing out of the box tool supported Slack's B2B use cases, their internal metrics correctly or provided the required security needs.
The third question, how does the cost of building compared to buying? In Slack's case, the cost to buy was slightly cheaper than the cost to build. However, this was a secondary factor since Slack's needs were unique and needed to be built in house.
2
And then for the fourth, where they're evaluating what are the long-term needs for the solution? The long-term needs were very predictable. Ultimately the experimentation tool was built in house despite having slightly higher costs and being predictable, as it served an important differentiator role and addressed unique requirements that could not be purchased out of the box.
Let's look at an example where a tool was bought. To improve its message transferring capabilities, Eventbrite decided to buy an existing solution from a company called Sparkpost. First evaluating the question, what is the role of tech in this internal tool? The technology was an enabler to send emails at scale. It did not end up being a differentiator.
For the second question -- how unique are the needs of internal users? -- the need was generic in that it required the ability to handle a high volume number of centers.
For the third question -- how does the cost of building compare to buying? -- the cost to build was much greater than the cost of buying.
And for the fourth question -- what are the long-term needs from the solution? -- the long-term needs were very, very predictable. As a result, Eventbrite ended up buying the solution rather than building in house.
In the next lesson, we'll discuss the second type of product scaling, managing debt.
Lesson Summary
Oftentimes product leaders can anticipate issues that could arise with platform and infrastructure work. However, there are cases where the team does not anticipate a tech scaling problem. Often these issues are difficult to predict using indicators and if left unmanaged, could result in stagnation over time. These are technical asymptotes. Successful platform and infrastructure work prevents hitting these technical asymptotes.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
Adapting to Changes in Tech
11 min
Platform and Infrastructure Work
10 min
Managing Debt
10 min
Modernization
12 min
Process Scaling
25 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
9:55
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we discussed the first type of tech scaling: platform and infrastructure work.
We discussed the purpose of tech and infrastructure work, and we introduced the concept of technical asymptotes and how to avoid them.
Product leaders can look at three ways to stay ahead of these technical asymptotes: incorporating platform and infrastructure work into the product roadmap; finding ways to use platform investments to solve multiple problems; and making the decision to build or buy internal tools.
Now we'll cover the second type of tech scaling: managing technical debt.
1
Debt, in the context of product management, is technical work that needs to be completed, but not necessarily a priority. We'll focus on the most common form of debt, which is tech debt.
Technical debt emerges in four key ways:
Non-Roadmap Work
Workarounds
Deprecating Tech
Unplanned Work
The first one is non-roadmap work, which is work that leaders anticipate but do not include in a roadmap. This work typically arises and is usually deprioritized.
Second are workarounds. Workarounds happen when people find things that don't work, but instead of fixing them, they just work around them, leaving the fix to a backlog of debt.
Third is deprecating tech. Deprecating tech occurs when the existing technology becomes outdated due to advances in other tech.
The fourth is unplanned work. Unplanned work is debt that is unanticipated. These are usually driven by external factors like security hacks and outage, or it could be an internal shift in strategic priorities.
Over time, debt will accumulate for these different sources, and product leaders need to decide how much debt they are comfortable taking on and when they need to prioritize paying off that debt.
A common mistake product leaders make is avoiding product debt altogether. When you avoid debt over time, it can result in a significant effort to build and deploy systems that need to get updated or completely replaced over time.
Pinterest experienced this at one point, where they initially had made the decision to build out a proprietary web framework. At a later date, they then decided to switch to REACT, which Facebook open-sourced.
The team made the decision for two main reasons. One, REACT was easier to hire developers for, since many already knew it vs. having to learn a new in-house proprietary framework. And two, REACT's loading time and performance was 30% faster than the one that was proprietarily built in house.
Product leaders want to prevent things from breaking. But the reality is that when we're in a scaling organization, it's inevitable that something will break. The first step to being successful at managing debt is normalizing this.
Matt Greenberg, the former VP of Engineering at Credit Karma, views scaling as an analogy.
He says, "Scaling is all about living in a burning house. Everything around you is on fire all the time and you just have to be able to look at the stuff that's broken and make sure that you're fixing the most broken, most impactful stuff and not getting distracted by the fact that basically everything is broken."
Having a responsible amount of debt is a reflection that leaders are appropriately prioritizing work.
Overinvesting means defaulting to completing work as it arises, without thinking about the opportunity cost. This often means deprioritizing work with a higher ROI or strategic importance to the company. This also means that you will have more rework as changes are made to fully built out products and features.
In contrast, underinvesting in technical debt means always defaulting to the highest ROI work, which is rarely technical debt.
However, technical debt tends to become a bigger and bigger problem the longer is left unchecked. And therefore underinvesting in technical debt often results in having to stop production of those higher ROI work initiatives in order to fix things that overdue debt created.
Product leaders, as a result, need to do this balancing act between overinvesting and underinvesting in managing technical debt.
We can think about managing and prioritizing technical debt through five criteria: confidence, time, impact to the user, sequence, and accumulated debt. Let's go through each one of these in a little bit more detail.
First is confidence, which answers, is there a probability that this will lead to a significant problem? The higher the confidence that is significant problem will occur, the more likely paying off the debt should be a high priority.
The second is time, which answers, when will this become a problem? When time is urgent or the problem will arise in a short period of time, it often should be a higher priority.Timeline involves the time sensitivity of paying off that debt.
Product leaders often look too far into the future. In reality, everything is burning and often a short-term view is more important in driving the product strategy forward. Prioritizing things that need to happen in the longterm means missing out on the higher value near term opportunities.
1
The third thing that we look at is the impact to the user. Does not doing this thing result in a speed or quality problem that will harm the user experience in a significant way? The higher the impact to the user, the more likely the debt should be prioritized.
1
The fourth thing we look at is sequencing. Will this prevent the team from reaching important milestones, like launching features, products or new markets?
1
Accumulated debt is our fifth criteria. And it's how much existing debt your team has not yet resolved.
As accumulated debt becomes significant, your ability to ship new things and reach milestones in your roadmap is hindered. If your accumulated debt levels are low, then you have more flexibility on when to deal with the existing debt, meaning it's lower priority. In contrast, when accumulated debt harms your ability to launch new things and reach milestones, paying off that debt should become a priority.
Fareed says: "Modern product leaders follow the ethos of fast iteration and lean techniques have fully embraced the benefits of technical debt. Unfortunately, if you accumulate too much of it, debt quickly has the opposite impact: slowing your team to a halt."
Let's look at three of the common ways we see these criteria play out: systemic debt, an extinction event, and a papercut.
Let's first look at systemic debt. This is when previous decisions result in the creation of more work at the organizational level.
Systemic debt should often be solved or remedied, as these are usually important problems with high confidence that a problem will occur in the near term. If the problem will prevent sequencing or reaching key milestones, then it should be solved. That is structurally addressing the problem and solving at a system level to ensure that the problem does not reoccur.
However, in situations where the debt has minimal impact on sequencing, you can use your discretion on whether to solve it or just remedy it. Where remedying involves a fast solution that temporarily fixes the problem or finds a workaround.
1
An example of systemic debt was Credit Karma's data model for credit reporting. Initially, new user data that Credit Karma received didn't match data from credit bureaus. It took them several years to identify the issues and to properly match data by changing systems. The impact was small and rarely impacted the teams, but they finally fixed the problem when it became a sequencing issue for a couple of different strategic initiatives.
In evaluating this example, the team had high confidence that the problem was important. The timing was flexible until sequencing became an issue. It had moderate to high impact due to accuracy of the credit reports. It eventually became a significant blocker to two strategic initiatives, and it accumulated a moderate level of debt by not fixing the problem immediately. The team decided to leverage a workaround for a while, until those strategic initiatives became a huge blocker.
Next, let's look at an extinction event.
An extinction event is an unexpected event that could cause significant damage to your business. These are high priority because of high confidence it causes serious problems for the user in the near term. For these reasons, you should resolve the problems immediately. Given that the confidence time and impact to the user are all high, sequence and accumulated debt do not make a significant difference in how you should approach these types of events. These are already highly critical to solve and need to be done immediately.
For example, Chime, the online bank, had a multiple day outage in which users could not access their accounts. The team likely dropped all prioritized work to resolve the outage and get the bank live. They had very high confidence that a significant problem occurred, had critical time constraint, and it had a high impact to users because they couldn't access their accounts.
Next, let's look at papercut debt.
Papercuts have low confidence and are often are not time sensitive. These are problems that will not significantly harm the business and often occur sporadically. Product leaders should deprioritize these and solve on an ad hoc basis when your team has the bandwidth.2
Credit Karma in 2015 built many of their contracts with revenue partners to let third parties account for user conversion. After two years of hypergrowth, the team found that their revenue actuals were wrong, which would result in investigations to determine why their actual revenue just didn't match expected revenue.
In this situation, the team had moderate confidence that the problem was significant as they began investing more time debugging this situation. They had sufficient time though to fix the problem, so it wasn't necessarily urgent, and it had a low impact to the end user.
It didn't prevent large strategic initiatives. And finally it was causing a moderate amount of accumulated debt. As a result of this ending up being kind a papercut debt, the team decided to incrementally solve this debt over time, in an ad hoc way.
1
In the next lesson, we're going to discuss the third type of tech scaling:  modernization.
Lesson Summary
Debt, in the context of product management, is technical work that needs to be completed, but not necessarily a priority. We'll focus on the most common form of debt, which is tech debt.
Technical debt emerges in four key ways:
Non-Roadmap Work
Workarounds
Deprecating Tech
Unplanned Work.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
Adapting to Changes in Tech
11 min
Platform and Infrastructure Work
10 min
Managing Debt
10 min
Modernization
12 min
Process Scaling
25 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
12:13
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we discussed the second type of tech scaling, managing debt. We talked about the main type of debt, which was technical debt, and covered the five things to consider when making a decision on if we should prioritize debt or not.
1
Let's dive into the third type of tech scaling work in this lesson, which is modernization.
Modernization is incrementally redesigning your product to create and capture more value for your users and your product.
Let's first cover the two major ways you can modernize your product, and then we'll discuss when and how product leaders should think about investing in these types of efforts.
There are two primary ways to modernize your product: Frontend redesign, which is modernizing the product's user interface and experience; and of course, a backend redesign, modernizing the product by updating the backend.
In either case, the objective of modernization should either be...
Improving your product KPIs around acquisition, retention, or monetization
Or being able to deploy new features, products or markets more quickly and effectively.
Modernizing your product's user interface is a way to simplify your product or improve your user experience.
An example of this is Slack's redesign. It improved discoverability and therefore adoption of features like drafts and saved items. This resulted in higher user engagement within the product, so a direct impact on product KPIs.
The second way to modernize your product is to change its backend to allow for better functionality or ability to launch new tools or features.
Early in its history, Netflix had a monolithic architecture for its DVD distribution business. After facing an outage, Netflix decided to shift to a cloud architecture and began leveraging new tools like Chaos Monkey to improve its performance and reliability.
Despite having the potential to improve deployment and product KPIs, modernizations often fail because they change too much of the product in too short of a timeframe.
This happens in two main ways. The first is not realizing that customers have formed habits around your existing product experience. When you make too big of a change too fast, you end up breaking those habits and forcing users to rebuild new ones. This requires a lot of energy and effort on the user's part and can lead to churn.
The second reason modernizations often fail is that the new modernized product often has not undergone testing or iteration, and therefore isn't optimized for the experience of the user.
These failures occur due to two key misconceptions held by product leaders:
That modernizing our product will automatically lead to improved product KPIs.
That our product needs modernization just because it's several years old.
Modernizing your product will often not lead to improvements in product KPIs, as major changes can negatively impact the user experience.
An example of this is the site Digg, a social news aggregator. They saw a significant audience decrease after trying to modernize their user interface. Specifically, Digg removed popular features like saving to favorites, and changed the frontend design, resulting in dissatisfaction of its core user base.
1
1
Fareed Mosavat says, "Massive redesigns are often pitched as 'metric movers'. If we redesign it so customers understand it better, our metrics will automatically improve. But that's very rarely the case, especially because existing customers already have developed behaviors around the existing design. We might even see declines in key metrics and feature usage at the beginning."
When thinking about the age of the product, product age is not necessarily an indicator of needing a modernization, specifically if the team has followed an incremental approach to modernizing over time.
Amazon has never been through a redesign as it's typically defined, yet it is one of the most usable, highly converting and effective products ever created.
Similarly, Google has not been redesigned, yet was updated through a series of smaller iterations over time.
Casey Winters says, "In many ways, large modernization efforts are a mistake. They mean you failed to iterate on your design patterns over time to meet the standards of the platform you're building on. There are some exceptions though, where this makes sense."
Product leaders could avoid these pitfalls by determining if their product truly needs a modernization effort. And if they need a modernization, then carrying it out strategically.
So let's first talk about when modernization makes sense. There are two situations where it typically makes sense.
First, when we group it with major product updates, and second, when there's a major shift in technology that affects the product.
First, modernizing might make sense when grouped with major updates to the product. These major updates should be those where a front-end or backend redesign allows for easier deployment or an improved experience over time.
1
Atlassian's Jira, the project management tool, underwent a major modernization in 2018 for two main reasons. First, more of their customers were shifting to the cloud and wanted their project management tool to follow. And second, to simplify the user experience so that multiple departments in the organization, including non-tech folks, could collaborate effectively.
The team made some key changes, including adding boards to allow for easier project tracking and collaboration. Ultimately, the team made these changes along with the redesign of both the backend stack and the user experience at once.
Second, modernization might make sense when it helps mitigate the risk of shifts in technology that leave your product vulnerable to disruption. If the tech used in your product is at risk of disruption, it often makes sense to go through one of these efforts.
In the past decade or so, there have been four major shifts in tech that have led product leaders to modernize their products. First is a front-end shift away from Flash towards JavaScript and React. The second is the shift from desktop to mobile. The third is the shift from on-premise to cloud, and the fourth is the shift to using AI and machine learning within the core of our products.
Let's look at a couple different examples. Nike.com modernized because it was originally built in Flash, and Apple banned Flash apps from its App Store.
In addition, YouTube was in a similar situation where they were originally built in Flash, but shifted to HTML5 over time during this major tech shift.
If you're going to go through a major monetization effort, there are five success factors product leaders should leverage. Let's go through each one. The first success factor is aligning with supporting insights.
Ravi Mehta, the former Chief Product Officer at Tinder says, "Modernization is not a license to replace data with gut feel."
The focus here is to be deliberate in making decisions in modernization by leveraging data in insights. Specifically, product leaders should pressure test the assumptions of their team around the decision to go through this initiative.
We can do this by looking at a few different sources of information. The first is tech data. Are there any indicators or signals that the product is underperforming technically?
1
The second is product data. Are there product KPIs suffering despite feature and growth work?
And then third is user research. Are there any indications that users aren't adopting or using the product due to some tactical shift?
The second major success factor in modernization is defining scope and objectives of the redesign. We want to modernize with the future product roadmap in mind.
Specifically, we want to define what success looks like based on two key objectives. The first is how the modernization will help deploy more quickly or effectively, and the second, how will it help improve product KPIs?
1
Ultimately the redesign should create and capture value for both users and the product. Product leaders should specifically define which metrics they anticipate will be impacted. This helps guide the modernization but also functions as a way to measure success after the modernization.
The third success factor of modernization is deconstructing and simplifying.
After defining your objectives and analyzing your sources of insight, you should develop a plan that is broken into discreet user-centric iterations. One common mistake here is for product leaders to modernize their product and to launch an intermediate version that is not fully functional. Instead, product leaders should incrementally modernize their product in an iterative way in which each version is functional and built upon the previous version.
Ravi Mehta says, "Companies know that iterative data-driven development works better than the waterfall development approach, yet companies throw that to the wind when it comes to redesigns."
This addresses two common mistakes in implementations of redesigns. The first is when you don't show intermediate progress, that often leads to a shock by users. When a group of people go into an ivory tower and come back months later with a product of opinion, rather than informed by data, they spend even longer building that new redesign to launch to the world, and it leads to a high failure rate.
The second major mistake we want to avoid is launching non-functional chunks of a redesign. This is when parts of the modernization effort do not function on a standalone basis, so users cannot engage with the intermediate steps, and as a result the team can't give feedback.
Asana launched its successful redesign incrementally and shared it in phases with its users. Sam Goertler, Director of Product Management at TheSkimm, and former Senior Product Manager at Asana, said: "After identifying the independent parts of the redesign, we had to figure out how to sequence the launches in a way that would optimize for learning upfront. To do that, we listed out what we believed we could learn from each individual release."
Asana's team gradually evolved its product. Here, we can see Asana pre modernization and after its modernization, from 2015 to 2020.
As a result, modernization should be approached iteratively with functional discrete steps that allow for testing and interaction with users.
The fourth success factor in these types of efforts is collaborating cross-functionally within the organization.
Successful modernization efforts require collaboration and alignment across multiple teams. Too often marketing and product teams look at a redesign as an opportunity to remake the product with a new look, often thinking more about form rather than function. Product leaders should identify key stakeholders, align on modernization objectives and build together as a team to avoid this.
1
1
Ravi says, "Modernizations are a particularly vulnerable time for companies when they risk throwing the baby out with the bath water. And for this reason, product leaders need to approach prioritization and communication vigilantly so that the modernization reflects the strategic needs of the company, not the cathartic need to fix annoying but minor issues."
The fifth success factor is balancing user needs.
This specifically refers to the trade offs involved with engaging power users and acquiring new users. Power users often demand more features and functionality in products while new users prefer simpler user experiences and basic functionality. Over optimizing for more features can lead to less acquisition while simplifying the product could lead power users to churn.
Product leaders should engage both power and new users to identify areas of potential compromise.
In their modernization, Reddit engaged power users and specifically moderators of the platform very early on. In their redesign, they added tools that specifically helped simplify the role of moderators. To simplify the product to appeal to potential new users, Reddit removed the option to design sub-reddits using CSS, and instead standardized design templates. This made the product easier to use for new users, likely resulting in increased acquisition and engagement, specifically among new moderators.
Despite having less functionality in the form of designing via CSS, power users were given the ability to customize design templates with a set of tools. Reddit launched a sub-reddit for its redesign and communicated regularly with its users, including the changes it made and a plan for the rollout of new updates, many of which were additional modification options to appease power users.
In the next section, we're going to start diving into the second category of scaling: process scaling.
Lesson Summary
Modernization is incrementally redesigning your product to create and capture more value for your users and your product.
There are two primary ways to modernize your product: Frontend redesign, which is modernizing the product's user interface and experience; and of course, a backend redesign, modernizing the product by updating the backend.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
Evolving Your Process
6 min
Process Improvement Evaluation
8 min
Value Stream Mapping
11 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
5:59
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Earlier in this module, we introduced the three types of scaling: Tech, process and user scaling.
In the last section, we covered the first type, Tech Scaling, and dove into three things product leaders should do: Invest in platform and infrastructure, manage technical debt and modernize your product.
In this section we'll dive into the second type of scaling: process scaling.
Process scaling is redesigning product development processes to increase their throughput, quality, or consistency.
As organizations scale, the processes they need to run effectively evolve in several different ways. The first is that organizational complexity increases, and communicating and aligning efforts across teams becomes more challenging. This creates more potential for misunderstanding or misalignment, which often leads to processes breaking or no longer working as initially designed.
The second thing that happens as an organization scales is the user base grows. As a user base grows, you need to expand the capability of your existing processes to cover the changing needs of the users.
And then, the third thing is that the tech undergoes major changes. As your business improves or changes in tech, you need to adapt your processes to match these changes.
Before we dive into how product leaders should think about process scaling, it's important to start with an explanation by what we mean by process. A process is simply a repeated collection of tasks or sub-processes that combine to create some output or value for an organization.
Processes can be large in scale, involving multiple stakeholders, or they can be small, involving a small number of people.
For a product team, some example processes could include collecting user feedback or how we design new features, how we do strategic planning, how we evaluate product analytics, how we run QA, how we ship products, how we onboard new hires, how we do budgeting, evaluating tools or reporting internally or externally.
These are all processes that need to scale with the organization, and product leaders can think about a few ways of doing this. The first is to standardize. We can establish a document or repeatable set of steps that minimize variability in a process and make it more accessible to people without specific knowledge. This is often a good first step in processes to help move things from things that individuals do and know, to things that can be repeatable by others. This is often known as shifting from people to process.
The second thing that we can do to scale processes is delegate. We can train other employees with less opportunity costs to be involved in the process. This often requires standardization training and empowering employees to make more decentralized decisions.
We could also hire or outsource, adding employees or contractors to a process to allow for more time to be dedicated to the process without interfering with other employees' output. All companies need to hire as they scale to manage the increased workload required by certain processes, but often short-term scaling can be done through temporary hires.
We can also augment, by building internal tools or adopting third-party tools to reduce the workload required through more customized functionality or automation. This is a topic we discuss in Tech Scaling in more detail, but it's one approach to improving existing processes.
We can also think about redesigning the process, identifying ways the process can be structurally changed to minimize the effort required to complete. This can include eliminating specific or adding steps that make the process more efficient, or changing the order of tasks, or assigning certain tasks to specialists. We can do a number of things to redesign the process from the ground up.
One challenge is that while scaling processes is necessary, as we do it and as organizations grow, they almost universally start off with lower quality and output before we iterate and improve over time.
1
When we standardize a process, for example, we might restrict the output of that process to something that is only standard and repeatable when we might want to leave more room for creativity. As we delegate processes, people with less experience will have to learn the new process.
When we hire or outsource, there's going to be time and investment needed in training new employees on the process. When we augment the process with tooling, there will often be some functionality we miss and often have to diagnose correct and manually work around.
1
And finally, when we redesign a process from the ground up, we often drop pieces or forget pieces as a new process is adapted.
We can visualize this with a graph where the Y axis shows the value processes create for an organization and the X axis shows the scale of the organization.
Most processes increase in value as an organization scales, though as aspects of the product and organization change, the value diminishes over time.
For most processes, at a certain scale a process just breaks entirely because it can no longer keep up with the needs of the organization.
For example, if you have one person running all hiring for your product team, that might work with a small organization, but at a certain point, that one person won't be able to keep up with the scale required for a growing team.
New processes are implemented with the intention of eventually creating more value and being set up to handle more scale, but they almost always start with a dip in value during an implementation period.
When product leaders think too short term, they avoid making process improvements, not wanting to sacrifice the value of existing processes and not wanting to invest time and resources into implementing the new ones. However, this often leads to processes whose value doesn't scale with the organization, hurting the output and the functionality of the product team and in extreme cases, breaking it altogether.
In the next two lessons, we're going to talk about process scaling from a product leader's perspective. Specifically, we're going to discuss...
Process Improvement Evaluations: We'll look at how to conceptually think about how to invest time and resources effectively into scaling processes.
Value Stream Mapping: We'll look at how to identify the bottlenecks in your process that have the highest priority to scale.
Lesson Summary
Process scaling is redesigning product development processes to increase their throughput, quality, or consistency.
As organizations scale, the processes they need to run effectively evolve in several different ways.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
Evolving Your Process
6 min
Process Improvement Evaluation
8 min
Value Stream Mapping
11 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
8:30
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we talked about why processes need to evolve as an organization grows.First, the organizational complexity increases. Second, the user base grows and we need to expand our capability with that. And third, as our tech, product, and our business undergo major changes, we need to adapt our processes to those things.
We then illustrated how processes evolve, usually creating diminishing value with scale, until they are replaced and upgraded with new ones.
In this lesson, we're going to talk through our first part of scaling processes as a product leader, where we go through process improvement evaluations. We'll look at how to effectively invest time and resources into process scaling.
Let's start with a simple example of a growing company with a messy database. Let's assume every quarter, it takes four junior PMs three weeks to go into the database, and wrangle it to put together a bunch of data and build visualizations needed for executive presentations in quarterly board meetings.
In the last lesson, we talked about five approaches to scaling processes. Let's go through an example where we could apply these to our hypothetical situation and see some options for how we could think through scaling this process.
First, let's think about standardization. We could create a more defined playbook for what data needs to be pulled and how, build templates for visualizations that are easy to update, and agree on standard reporting metrics to minimize quarter to quarter variations.
We could also delegate by finding an employee with less responsibility to take over the task after being taught how.
Third is that we could hire or outsource, where we could hire an employee or contract out the work to a dedicated individual instead of having it as somebody's side job.
We'd also augment by building a custom analytics reporting tool or partnering with an analytics platform to automate aspects of the process.
And finally, we could redesign the process entirely, creating a lower effort format for quarterly updates.
In order to decide what the best way to redesign a process is, product leaders need to apply some heuristics to think through what process improvement adds the most value for the least effort.
Product leaders often make three mistakes when thinking through this decision of when and how to invest in scaling processes. First is defaulting to building customized solutions for labor intensive processes. Second is not accounting or planning for implementing process improvements. And third is over-investing in highly scalable processes.
Let's walk through these, starting with the first.
Looking back at our data analytics process, one of the first solutions product leaders turn to is building internal solutions for a labor intensive process like this. After all, the four PMs are taking weeks every month to pull messy data, undoubtedly a tedious and stressful process, and the instinctual action here is "if we could just have engineering fix the database and build some better tooling, this would be so much easier."
However, when product leaders default to this decision, they end up loading up engineering teams with admin work and can create big disruptions in a product roadmap.
Instead, Matt Greenberg, the former VP of Engineering at Credit Karma, says that product leaders need to first sense check their math. "Sense checking the math is about creating a simple conceptual model of how to compare different approaches to improving a process and seeing which create the most value with the least opportunity cost."
In this case the four junior PMs are taking three weeks every quarter. That means they are investing 48 weeks a year in this process.
An engineering solution may take a team of four engineers 10 weeks to build out, making it a one-time investment of 40 weeks. However, that 40 weeks doesn't capture the opportunity cost. So what in a product roadmap gets slowed down by spending 40 engineering weeks on this initiative?
Losing 40 weeks of engineering time could be way more valuable than gaining 48 weeks of junior PM time if we include the opportunity cost.
1
So good product leaders recognize this opportunity cost in their evaluation. They might think: for 48 weeks of junior PM time, we could hire a full-time employee whose job it is to run the process manually. It might be a more menial job, but it could make the most sense for this given situation.
1
Matt Greenberg says: "Leaders often overweigh emotions over logic when it comes to people and processes. They don't want to rely on processes requiring lots of menial, manual tasks. But this can lead to over-investment in sexy solutions to simple problems."
The purpose of sense checking the math is not to come to a perfect model of how much a PM's week is worth vs. an engineer vs. somebody else. Not everything can or should be quantified to that degree. The point is to make sure you understand all the trade-offs and make a logical and objective decision, especially when you take into account opportunity costs.
The next mistake is not accounting or planning for implementing process improvements.
In the last lesson we visualized how scaling processes can create value.
We saw how new processes create an initial dip in value as they get up to speed, caused by investments needed to set up new processes and get them there, ultimately leading to a higher value process after some initial implementation period.
But product leaders will often put a lot of thought into a decision of whether or not to change a process and how, but they often fail to take it one step further in think through how to implement it best.
This causes a larger negative dip in value in the short term, which leads to a longer payback period.
In order to plan for a new process implementation, product leaders need to identify five implementation factors. One is who is involved in the current process, meaning identifying who has the relevant knowledge and expertise currently. The second is who will be involved in the new process. The third is what initial training and setup needs to be completed before new process is implemented. The fourth is what ongoing support will the new process need during the implementation period. And finally, what backup plans or alternatives do we have for any initial issues with the new process.
Product leaders do not always have to be involved in all of the details of these five factors, but they do need to pressure test their teams to make sure that the factors have been identified and thought through.
Let's take our product analytics example and evaluate our proposed solution of scaling the existing four PMs by hiring one dedicated full-time employee, responsible for managing the data and visualizations.
1
Using these factors, we might answer that the person who was involved in the current process are the four junior product managers.
The second is who will be involved in the new process, which is one new dedicated full-time employee.
The third is what initial training and setup needs to be completed before the new process is implemented. One existing PM will need to formalize the process into a document and walk through it step by step in training the new employee.
The fourth is what ongoing support will the new process need during the implementation period, one existing PM will need to shadow the new full-time employee for the first quarter to monitor and provide feedback.
And five is what backup plan or alternatives do we have for any initial issues. If needed, up to two existing PMs can be pulled into support if needed during that first quarter training.
The last problem product leaders face is over-investing in highly scalable processes.
In many situations, product leaders want to come up with processes that pay compounding dividends with scale, and won't ever need to be improved further in the future, that perfect process. These types of investments typically have a very long payback period, with the hope that they will continue to last and scale for a long time.
However, great product leaders don't look to create perfect long lasting processes and said they get good at iterating on processes based on the needs of the business.
As your product grows, organizational complexities grow and new processes needs are introduced and old processes become obsolete. It is better to lean into this evolution than a revolution and try to prevent coming up with that perfect process.
It's important to get into a rhythm of identifying process bottlenecks and approaching them with consistent incremental improvements. Experimenting with lightweight process improvements can often yield better results than large scale process redesigns.
In order to do this, we're going to dive into this topic a bit more in the next lesson, and talk through a version of value stream mapping that helps product leaders identify and address the specific bottlenecks within the process.
Lesson Summary
Product leaders often make three mistakes when thinking through this decision of when and how to invest in scaling processes. First is defaulting to building customized solutions for labor intensive processes. Second is not accounting or planning for implementing process improvements. And third is over-investing in highly scalable processes.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
Evolving Your Process
6 min
Process Improvement Evaluation
8 min
Value Stream Mapping
11 min
User Scaling
20 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
10:35
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we walked through our first topic on scaling processes as a product leader: process improvement evaluations. This is where we looked at how to conceptually think about how to invest time and resources effectively into process scaling.
Specifically, we discussed the three different mistakes product leaders make when evaluating process improvements and how to avoid them. We look at defaulting to building customized solutions for labor-intensive processes, not accounting or planning for implementing process improvements, and over-investing in highly scalable processes.
In this lesson, we're going to talk through our second topic: value stream mapping. This is how we look at and identify bottlenecks in our processes that are the highest-priority to scale.
As a product leader, it's not enough just to be able to evaluate how to improve specific processes. Product leaders need to be able to zoom out and look at your critical system-level processes and identify the bottlenecks that hinder your team's productivity.
To do this, we're going to introduce an adapted version of an operations management concept called value stream mapping. In an operations research context, value stream mapping is a process of illustrating, analyzing, and improving the steps required to deliver a product or service.
It is typically a detailed process that involves mapping things like the manual, verbal or electronic information flows; units of work; inventory; shipments; kanbans; and production steps. Then we conduct an analysis to identify inefficiencies and bottlenecks that can be improved.
For most product leaders, the full details of how to build and analyze a robust value stream map are not important. However, the intention behind value stream mapping is relevant to product leaders. In this lesson, we're going to pull out some of the key concepts that product leaders can apply to their work.
One of the key outputs of value stream mapping is identifying bottlenecks in processes. Bottlenecks are specific steps or tasks in a process that limit the process from creating more value for an organization.
There are different types of bottlenecks for different situations, but we're going to discuss three types of bottlenecks that can be found in product processes; throughput bottlenecks, quality bottlenecks, and single points of failure.
To illustrate these, we're going to look at a simplified high-level process to bring these to life. Let's assume there is a process for testing product improvements that goes as follows:
We identify the focus area of improvement and synthesize customer feedback. Both of those in parallel lead to ideating on improvements to test. That then leads to three different things happening in parallel: getting permissions to run the test, waiting for a right time to launch to minimize data bias, and building ideas in a testable format. Once those are done, we can launch the test and collect data. We can then validate that improvement and build up into its full launch.
Throughput bottlenecks are tasks or subprocesses that limit the overall throughput, or overall volume and velocity of work that can be completed by a process.
These generally can be identified in two ways. We can ask:
What steps unnecessarily slow down the overall process?
Where there are parallel steps, which one of them takes the longest?
For example, if this process is designed in a way that ideating ideas requires inputs from several departments and scheduling time for everybody to meet and collaborate often pushes this step by days or weeks, this step could be considered a throughput bottleneck for the entire process.
Alternatively, if waiting for the right time to launch usually only requires a couple of days to ensure no other tests are running on the same user segment, building tests usually require a week, but all tests need to be approved by a chain of people which takes more than a week, then getting that permission to run a test would be a throughput bottleneck.
Quality bottlenecks are tasks or sub-processes that limit the value of a process by creating low quality outputs to specific tasks that serve as low quality inputs to future steps, thereby limiting the overall quality of the process.
For example, if the ideation step is simply a couple product managers brainstorming in a room, this could limit the number of tests that get approved, limiting the number of successful tasks that can be built and rolled out to all users.
The last type of bottleneck is a single point of failure. These are similar to throughput bottlenecks, where a single person has the requisite knowledge to complete that step.
For example, if a team had one data analyst who knew how to analyze test data appropriately, that would be a single point of failure bottleneck. If that person is on vacation, then this entire system can't run.
The problem with bottlenecks is that they tend to compound with scale. Therefore, product leaders need to consistently proactively look for what are the most limiting bottlenecks to any process, even if they are not an immediate problem.
In order to do this product leaders can use this modified value stream mapping process to map out the process, identify the bottlenecks, identify the quality bottlenecks, and then identify the single point of failure bottlenecks.
First, we can map out the key steps in a process, noting which steps are done in parallel and which are done in sequence.
Steps in processes can include specific tasks like defining OKRs, or communication flows like communicating OKRs with your team, or use of tools like updating the database, approvals in reviews like conducting a product review, or sub-processes like identifying interdependencies with the roadmap of other product teams, which is a sub-process of roadmapping.
This is what we've done with our improvement testing process. One common question that comes up is how detailed should these processes be? In our testing example, each step listed is, in a way, its own sub-process that could be mapped by itself.
For example, launch test and collect data could include ramping the test, validating appropriate assignment of users to test and control groups, calling the test complete, and more. However, in general, trying to go too detailed too quickly adds a lot of complexity to this process that often doesn't add any value.
Therefore, we recommend that you start with high level processes and then when it comes to diagnosing and fixing specific bottlenecks, zoom into the specific sub-process and evaluate it in more detail.
Next, we can identify throughput bottlenecks. This can be done as follows:
The first step is determining a hypothesis for the amount of time you expect each step to take. This is a helpful exercise to ensure you, as a product leader, have an understanding of what needs to be completed in each step. This hypothesis can be informed by people involved in the process and your own experience.
For example, identifying the focus areas for improvement might take one week, synthesizing customer feedback might be another week, ideating on improvements to test might be three days, getting permission to run the test one day, so on and so forth.
The second step that we want to go through is to check for the actual length of time the process takes. Have your team record specific completion dates to validate your hypothesis. Extenuating circumstances aside, this can often reveal where processes are taking much longer than your hypothesis and expectation.
A throughput bottleneck is any step unnecessarily slowing down the process. These are most commonly identified as steps with a big delta between that expectation and an actual completion time.
Quality bottlenecks can be harder to identify. For processes that have a tangible output, you can start by looking at the quality of the output and then work backwards to see where lapses in quality started.
In an example like our testing one, this could be looking at the quality of learnings coming out of tests. For tests with poor quality of learnings, you could work backwards and see whether it was caused by low quality analysis, or further back to low quality ideation that resulted in bad test ideas.
However, in other processes, these can be difficult to assess. For example, if we were looking at a product manager onboarding process to identify quality bottlenecks, low quality output might not manifest so easily. Situations like these would require managers or leaders to regularly review and do quality checks on steps to provide feedback and ensure any low-quality steps are improved.
The last step is identifying a single point of failure.
Single point of failure bottlenecks can be identified by listing out which people are primarily responsible for the completion of a given step and which people can serve as backups to complete that task. When this is one person or one specific team, you have a single point of failure.
It is common for early stage companies to have single point of failure bottlenecks, and they can be difficult to avoid. However, even at early stage companies, identifying these bottlenecks and creating documentation about how this step is completed can help allow others to step in and prevent that single point of failure.
This value stream mapping process helps build a more qualitative approach that is actionable yet not overly cumbersome to product leaders, and analysis like this can be run on many different processes, including some of the examples we discussed earlier, like collecting user feedback, designing new features, shipping new products, amd onboarding new hires.
When looking for high-level bottlenecks in key processes, there are two best practices product leaders should adhere to. The first is focusing on upstream bottlenecks first. Upstream bottlenecks are those that occur early in a process. The reason product leaders should focus here is that issues that occur upstream, whether it is delays, low quality outputs, or a single point of failure, usually have compounding impacts on the downstream steps.
This compounding impact is known as the bullwhip effect. Also originating from operations research, the bullwhip effect explains that like a person making small motions to the handle of a bullwhip that cause large movements at the end of the bullwhip, small variations in quality or throughput early in the process can create large variations in an overall process, quality or throughput. Therefore, improving upstream steps in a process can often produce the largest impacts to overall process improvements.
1
The second thing is, be aware that every bottleneck fix creates a new bottleneck. Bottlenecks are relative, meaning they are the step that hurts the output of the process the most. This means that there will always be a bottleneck. Whenever a bottleneck is fixed by improving that particular separate process, something else becomes the new bottleneck.
Product leaders should therefore focus on improving the most pressing bottlenecks, and then be aware of what the next bottleneck in a given process is, and whether it also needs to be prioritized for improvement.
In the next session, we're going to dive into the third type of scaling: user scaling.
Lesson Summary
Value stream mapping is typically a detailed process that involves mapping things like the manual, verbal or electronic information flows; units of work; inventory; shipments; kanbans; and production steps. Then we conduct an analysis to identify inefficiencies and bottlenecks that can be improved. Product leaders should focus on three types of bottlenecks.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
25 min
User Scaling
Intro to User Scaling
6 min
Value-Added Use Cases & Under-Served Segments
5 min
Bad Behavior
9 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
5:46
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Earlier in this module, we introduced the three types of scaling: tech, process and user scaling.
In this section, we'll dive into the third type of scaling, user scaling.
User scaling involves identifying and managing unintended uses of your product. As you grow, it's inevitable that users will find a way to use your product in unintended ways. And there are three ways this can happen.
The first is through value-added use cases. These are unintended use cases that actually can drive a business outcome or create an opportunity.
There's also under-served segments. These are specific user segments for whom the product is unintentionally not optimized.
And the third is bad behavior. These are use cases that have negative consequences if left unchecked.
Value-added use cases offer an opportunity to create additional value, while under-served user segments and bad behavior often lead to significant negative consequences.
Unexpected use cases are often hidden in smaller user segments. Therefore you need to segment and find trends in use among these segments. Product leaders could proactively identify unintended use cases through KPI anomalies and user research. KPI anomalies means data analysis focused on drilling down into KPIs in terms of segmentation and time.
Product leaders make two mistakes in identifying anomalies. First, just not tracking the right metrics. And the second is relying on averages.
We need to make sure that we're tracking the core metrics behind the growth inputs of acquisition, retention and monetization. And we also need to make sure we're segmenting the data to identify the anomalies.
Fareed Mosavat says, "Breaking out of averages and thinking in terms of distributions and groups of people and how they behave becomes more and more important as you scale."
Once you've defined your metrics and segmented the data, you should look for stagnation or declines of these metrics. These are often a sign that you have an unintended use of your product.
The second way to uncover unexpected use cases is through user research. Normally, user research is about finding insights and validating that they apply to a large enough segment of your users, either by validating with data or getting a critical mass of feedback.
However, when it comes to finding unintended use case, it requires proactively investigating outlier feedback.
One thing to keep in mind is that small problems that occur from unintended use amplify as the company scales.
Casey says, "Early-stage companies should be focusing on nailing their existing use case, and only be thinking about the unexpected use cases that are presenting a stronger form of product-market fit if they threaten the original use case. Whereas if you're at a bigger scale, if you're not anticipating these things, then you'll find that consequences could be significant."
Negative consequences can occur in four different ways. The first is just dissatisfaction, where users are not able to use the product as intended, or can't solve the problem they have. The second is brand damage, where negative media or distrust weakens your overall brand.
The third is user harm to individual users, oftentimes through harassment or discrimination. And finally there's societal harm, which is harm to an audience broader than your initial users.
For example, during the COVID-19 epidemic, some Instacart users began enticing shoppers and delivery people by adding significant tips, as many delivery people did not want to risk their health for a low or zero tip.
After their orders were confirmed, the users would then reduce or remove the tips. This created a situation in which one side of Instacart's marketplace could game the other side. This likely resulted in dissatisfaction among shoppers, and brand damage as the incidents spread in the media.
Another example are romance scammers on Tinder. These scammers create fake accounts, generally of attractive women, and target men. They engage in conversations and then eventually ask for money.
This causes dissatisfaction, because it's a horrible experience for the victims and a bad experience for women whose photos get stolen.
It creates brand damage because it's a PR and trust issue, and causes user harm directly to the victims. And it causes societal harm by generating distrust of using dating apps and meeting new people.
Many dating apps hit a vicious cycle due to these types of scammers and aren't able to recover. Tinder, on the other hand, has been very diligent about removing these accounts and rectifying the issues as they're found.
A third example of this is organized fake review campaigns on TripAdvisor. TripAdvisor uses a traveler ranking that ranks all hotels, attractions, and restaurants based on a proprietary calculation that takes into account the recency and rating of reviews.
A business rank can have a significant impact on the demand that they see. This is particularly true for the top businesses that are on page one. Moving up the ranking can happen organically, but some businesses have hired agencies to run fake review campaigns that leave bad reviews for their competitors and good reviews for themselves.
This causes dissatisfaction because it erodes trust in the reviews, which undermines the product market fit. It causes brand damage because it causes negative media and distrust. It causes user and business harm because users make misinformed decisions and the businesses get hit with unfair negative reviews, and it causes societal harm because review sites help businesses build a good reputation that can get undermined.
All of these can negatively impact your product KPIs around acquisition, retention, and monetization, but also have negative societal value.
1
As a result, product leaders have a responsibility to mitigate and prevent harm that their product could create.
In the next lesson, we'll dive into the first two types of user scaling: value-added use cases and under-served user segments.
Lesson Summary
User scaling involves identifying and managing unintended uses of your product. As you grow, it's inevitable that users will find a way to use your product in unintended ways. And there are three ways this can happen.
The first is through value-added use cases. These are unintended use cases that actually can drive a business outcome or create an opportunity.
There's also under-served segments. These are specific user segments for whom the product is unintentionally not optimized.
And the third is bad behavior. These are use cases that have negative consequences if left unchecked.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
25 min
User Scaling
Intro to User Scaling
6 min
Value-Added Use Cases & Under-Served Segments
5 min
Bad Behavior
9 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
5:07
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson we discussed user scaling, which involves identifying and managing unintended uses of your product.
KPI anomalies and user research are the two primary ways to identify user scaling opportunities and issues.
We introduced the three types of user scaling: value added use cases, underserved user segments and bad behavior. And in this lesson we're going to dive into these first two types.
Let's start with value added use cases, which involve users using your product in a novel way to solve a problem they are facing. They occur when customers use your product in unintended ways that could drive new retention or monetization opportunities.
For example, Facebook found that some of its users were finding workarounds to buying and selling personal belongings within Facebook groups. This occurred before the infrastructure to list products, process payments, and other functionality common in marketplaces was built, leading Facebook to develop Facebook Marketplace.
LinkedIn found that users found workarounds to identify and reach out to sales leads, despite not having tools to easily identify and contact leads. This led them to productize this use case into Sales Navigator.
As more people use your product, they find creative use cases that your product solves for. They identify workarounds to use your product to solve new problems. You often have a head start in product market fit when your users are engaging with your product in new ways.
In this way, value added use cases are opportunities to strengthen product market fit with existing users. Alternatively, if not addressed, these user segments could switch to competitive products that better fit their needs.
Product leaders should approach value added use cases as product market fit expansion opportunities.
In our module on PMF expansion, we described that expansion opportunities have an easier time reaching product market fit because they build off an existing product market fit. In value added use cases, the product market fit is already established, despite the product not being designed for that specific use case. Therefore, evaluated use cases are often some of the highest return, lowest risk PMF expansion opportunities that you should pursue.
The second type of user scaling is under-served segments, which are specific user segments for whom the product is unintentionally not optimized.
1
These could be demographic, geographic, or behavioral segments.
As you scale, sub-segments emerge within your target users who are less optimized than others. These segments can often be missed because there are sometimes small segments of your user base that don't move high level KPIs. However, small problems with some user segments can quickly manifest into product wide issues by damaging the brand, disruption, and societal harm.
For example, a segment of female heterosexual users on Tinder found interacting with overly eager male heterosexual users to be a bad experience. This resulted in some potential users not activating and other users churning.
Another product, Bumble, identified the problems faced by this underserved segment and developed features to better serve them. Bumble's First Move feature requires female users to initiate discussions after matching, which eliminates the inflow of messages that women may find overwhelming or toxic. In addition, matches expire so that female users have a lot more control over who they're speaking with.
While Tinder is still dominant in online dating, by not addressing this underserved market, they did allow Bumble to become a formidable competitor.
Underserved segments can be fixed by revisiting your growth strategy for that specific segment. Product leaders should...
1
Identify these under optimized user segments.
Build new use cases for that specific segment.
Apply growth work to improve that segment's product KPIs.
An example of fixing an underserved segment is Facebook in India. Female users in India were an underserved segment for Facebook. India is currently Facebook's number one country in terms of monthly active users. However, just 24% of Facebook users in India are women vs. more than 50% in the US. There are a variety of factors that drive this discrepancy, including lower access to mobile devices and internet connectivity in India.
However, one important aspect is that women felt very unsafe sharing information on Facebook due to that information being used for unsavory purposes. Here, Facebook decided to focus on redesigning the female user experience to allow women to engage in the community more safely.
From 2017, Facebook began introducing features to create a safer environment for female users to engage on the platform, including the feature of profile picture guard. This feature locks the profile picture, so that other people can't download it, or even make a screenshot, and limits who can tag a profile picture to the specific user and their friends.More recently, in May 2020, Facebook added the ability to lock your profile, which locks a woman's profile from all non-friends. These two features now give women more control over their information and a higher feeling of safety, which encourages them to connect and share with their friends without worrying about public ramifications.
In the next lesson, we're going to dive into the third category of user scaling: bad behavior.
Lesson Summary
Value-added use cases involve users using your product in a novel way to solve a problem they are facing. They occur when customers use your product in unintended ways that could drive new retention or monetization opportunities.
Under-served segments are specific user segments for whom the product is unintentionally not optimized.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
25 min
User Scaling
Intro to User Scaling
6 min
Value-Added Use Cases & Under-Served Segments
5 min
Bad Behavior
9 min
BONUS: Module Recap
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
9:20
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the last lesson, we covered value added use cases and underserved segments.
Value added use cases should be evaluated using the same tools that we used for product market fit expansion strategies: macro evaluation, micro evaluation, and mapping PMF expansion opportunity.
Under-served user segments can be fixed by revisiting your growth strategy for that specific segment.
In this lesson, we'll look at our third type of user scaling: bad behavior. This includes use cases that have negative consequences if left unchecked.
Bad behavior is more common in products where users provide input to one another. Social media companies allow users to share lots of information with one another, allowing for potential bad behavior.
In contrast, products where users have less input from users generally result in less bad behavior. For example, Credit Karma mostly shares information with users, and users fill out forms that are shared with Credit Karma, rather than other users.
There are two steps product leaders need to follow in dealing with bad behavior. First, proactively identifying that bad behavior and then second, approaching and figuring out the management strategy.
Let's start with proactively identifying.
As we discussed earlier in this section, bad behavior could be identified by analyzing KPIs for anomalies, as well as conducting user research.
Product leaders need to look for different types of user activities when identifying bad behavior.
The first are scams. These are tricking other users or the company into taking financial or nonfinancial actions.
We previously mentioned an example where during the COVID-19 epidemic, some Instacart users began enticing shoppers and delivery people by adding significant tips, as many people didn't want to risk their health for low or no tips. After their orders were confirmed, the users would then reduce or remove the tips. It's created a situation where one side of the Instacart marketplace was gaming the other side.
The second type is harassment, or negatively writing or speaking about other users.
An example of harassment is where players of the popular racing game, Forza Horizon, modified their race cars to include racist symbols like swastikas, as well as Confederate flags. Microsoft, the publisher of the game, banned these users.
The third type is discrimination, where we treat other users differently due to their demographics, like gender, sexual orientation, race or religion. An example of discrimination can be found on Airbnb. Airbnb found that its black guests were more likely to be rejected than other groups of guests. Airbnb used several approaches to deal with this problem, which we'll explore a little bit later.
And the fourth type is misinformation. This is creating and spreading inaccurate, misleading information that can cause harm.
Misinformation was actively shared on Facebook by members of Myanmar's military, eventually inciting racial violence.
Just because bad behavior is not illegal does not mean it does not need to be fixed. Lots of non-illegal behavior can have significant negative consequences. The previous example of Facebook is one example of this.
On Tinder, some female users put their Instagram handle in their profile as a means to drive more followers to their Instagram, but they have no intention of matching, or chatting, or dating people on Tinder's platform. While unwanted, this behavior is totally legal.In contrast, some fake female accounts included their Venmo account in their profile, with the goal of asking or scamming people for money. In addition to being banned from Tinder, this behavior is illegal.
Therefore, while there's a legal imperative to ensure your product does not facilitate illegal activities, there is definitely a moral imperative to ensure your product does not harm your users or society.
Let's think about the second step, which is managing bad behavior.
There are three common mistakes product leaders make in managing bad behavior. The first is not feeling accountable for the negative consequences.
Product leaders should think about how their product could negatively impact users or society, and mitigate against those risks. That should be considered for both existing and new features and products.
Casey says, "Product leaders should play the role of the devil's advocate to uncover how their product could potentially harm users."
Product leaders can consult their legal team in understanding the consequences of their products or features, and how to remedy them. However, exclusively listening to lawyers probably isn't the best approach. Legal teams often focus on minimizing risks, sometimes at the expense of the product and user value. You need to work collaboratively with the legal team to identify legal and ethical solutions that allow you to drive value for the users.
The second mistake is only focusing on policies. A common misconception product leaders hold is that establishing and enforcing policies are the best way to deal with bad behavior. However, policies alone are not enough, in a lot of cases.
There are three key levers that product leaders should take to use in managing bad behavior, establishing and enforcing policies, moderating, and redesigning the product.
We can think of these three levers as escalating. Policies can be used to combat bad behavior initially. If that doesn't work, then your team could look to moderating content, and then finally redesigning the product.
Let's dive into establishing and enforcing policies. Policies help manage the bad behavior in two different ways. They articulate what constitutes bad behavior; a common way users see this is in Terms and Conditions, or the terms of service for the product. And the second is that they lay out remedies, or an action to take, to resolve that bad behavior.
For example, Airbnb does not allow hosts to make decisions on whether to host guests based on their demographic info. And two, it provides remedies, including permanently banning hosts that don't comply.
Key remedies could include temporarily banning users, permanently banning users, or fining a user.
In the Tinder example, we can see a few of these in action. For the case where somebody creates an account, just to request to follow on Instagram, they are banned only if they're fraudulent. Whereas if they detect catfishing or photo detections that are copied from other sites, it results in a ban. And then there are the romance scams where they get people to try to send them money. Here, there's a first time warning and a second time ban.
Another example would be TripAdvisor. If there's suspicious behavior, like paying others to post reviews is detected, it equals a user ban. They also have a credibility score, where they detect posting multiple reviews on day one of signup, which also equals a user ban. They also do IP address tracking, so if multiple posts are made on the same IP address, that also equals a user ban. And if there's any detection of blackmailing, like, "If you don't upgrade me, I'll give you a bad review," that also equals a ban.
The second lever of managing bad behavior is moderating content, which involves passively or actively observing user behavior to identify that bad behavior.
Passive moderation involves leveraging community members to help ensure product norms are maintained.
Nextdoor and Reddit both leverage volunteer moderators, who are users within the community that help ensure bad behavior is not happening.
In contrast, active moderation involves the company leveraging tech to automatically moderate, or hiring or outsourcing teams to manually moderate.
Facebook has contracted moderators to scan through posts, to identify and moderate abusive and offensive writing, images, or videos.
WhatsApp allows users to fact check messages that have been forwarded at least five times, to mitigate risk of spreading misinformation.
Ravi Mehta, the former Chief Product Officer at Tinder, says: "As the content increases, you need to get better at keeping out the bad content, and making sure you get more of the right content to the right user at the right time."
The third lever is redesigning your product with the goal of limiting opportunities for users to behave badly. Redesigning your product could help increase positive friction, and lead to reduced bad behavior while maintaining a good experience for the users.
1
There are two key ways you could redesign your product to reduce bad behavior. The first is by changing the user flow.
In the HR platform Greenhouse, they nudge recruiters during their hiring process, by reminding them of racial or other biases that sometimes occur.
We could also add or delete a feature.
In the case of Airbnb, they added the Instant Book feature, which helps drive product KPIs by allowing for fast bookings. This feature also removes some of the bias hosts face in confirming guests on a case by case basis.
In the case of Nextdoor, they ended up removing its "Forward to Police" feature, which allowed users to forward concerning content directly to police. Removal of this feature was due to racial profiling concerns.
The third common mistake is treating bad behavior as a business decision. Bad behavior, as we mentioned, could cause significant consequences to your users and society. For this reason, product leaders should not only track how effective or ineffective an organization is, they should proactively identify and mitigate bad behavior.
Managing bad behavior often involves a tradeoff between the short-term and long-term perspectives. The short-term perspective looks to maximize value in the near future by not actively managing bad behavior. For example, if you're promoting hate speech into an echo chamber of users, your retention metrics could look great, but users in broader society could be negatively impacted.
In contrast, the long-term perspective involves minimizing bad behavior on your product. Here, hypothetically, this would create a safe environment where users interact with one another and are more happily engaged while reducing societal damage, creating value to your business, users and broader society in the long run.
In the next module, we'll walk through how to put your four types of product work together, by Developing and Communicating Your Product Workplan.
Lesson Summary
There are two steps product leaders need to follow in dealing with bad behavior. First, proactively identifying that bad behavior and then second, approaching and figuring out the management strategy.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
Scaling Issues
7 min
Tech Scaling
43 min
Process Scaling
25 min
User Scaling
20 min
BONUS: Module Recap
Recap: Scaling
5 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Scaling
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
4:35
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Great product leaders are able to leverage feature strategy, growth strategy, and product market fit expansion strategy in different ways, enabling them to continue creating and capturing more and more value with their products over time. However, these three alone are not enough.
Product leaders also need to invest in supporting processes, infrastructure, and strategies that enable these three strategic levers. We call this Scaling, or making strategic investments to critical infrastructure to enable continued product success.
Product leaders should think about scaling their products in three ways: Tech scaling, Process Scaling, and User Scaling.
Product managers often focus on shipping new features without addressing the parts of the business that enable your product to succeed at scale. In contrast, product leaders need to understand the implications of tech processes and users on successfully scaling. As companies grow and evolve, so do their scaling needs.
First, there’s tech scaling.
There are two primary reasons why it’s critical for product leaders to manage tech scaling. The first is that underinvesting in tech scaling can lead to poor product performance, which often results in product market fit degradation. This is because tech scaling often leads to a bad user experience, where the product misses the mark in terms of performance or reliability.
The second reason why tech scaling is critical is that when product leaders don't put enough focus into tech scaling, they end up limiting their ability to do growth, feature or PMF expansion work. It is a product leader's job to ensure that scaling doesn't grind the business to a halt, and that technology opens doors for new innovation.
There are three different strategies to consider in tech scaling. There's platform and infrastructure work, debt management, and modernization.
It's easy for product leaders to get excited about tech improvements, regardless of their impact on the business.
But ultimately, adopting the latest technology is only valuable if it increases value to your overall business, by increasing or maintaining acquisition, retention, or monetization.
Oftentimes product leaders can anticipate issues that could arise from platform and infrastructure work. However, there are cases where the team does not anticipate a tech scaling problem. If these issues are left unmanaged, they could result in stagnation over time. These are technical asymptotes. Successful platform and infrastructure work prevents hitting these technical asymptotes.
The second category, process scaling, is the need to scale your internal processes to handle the increased scope of work across a growing team. And you can do that through process improvement evaluations and value stream mapping.
Process scaling is redesigning product development processes to increase their throughput, quality, or consistency.
For a product team, some example processes could include collecting user feedback on how we design new features, conduct strategic planning, evaluate product analytics, run QA, ship products, onboard new hires, budget, evaluate tools, or report internally or externally.
From a PM's perspective, process scaling can be looked at in two ways:
Process Improvement Evaluations, or how to conceptually think about how to invest time and resources effectively into scaling processes.
And Value Stream Mapping, or how to identify the bottlenecks in your process that have the highest priority to scale.
It's important to get into a rhythm of identifying process bottlenecks and approaching them with consistent incremental improvements. Experimenting with lightweight process improvements can often yield better results than large scale process redesigns.
And the third category is user scaling.
User scaling involves identifying and managing unintended uses of your product. As you grow, it's inevitable that users will engage with your product in unintended ways. And there are three ways this can happen.
The first is through value-added use cases. These are unintended use cases that actually can drive a business outcome or create an opportunity.
There are also under-served segments. These are specific user segments for whom the product is unintentionally not optimized.
And the third is bad behavior. These are use cases that have negative consequences if left unchecked.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Contents
Phase 0: Introduction
Developing Expertise
Three Common Mistakes in Applying Learning
Bridging the Gap from Learning to Impact
Phase 1: Choosing Your Goal
Step 1: Identify an area for improvement
Step 2: Identify Relevant Material
Step 3: Define an Improvement Goal
Phase 2: Building a Narrative
Step 1: (S) Identify the Situation
Step 2: (C) Develop the Complication
Step 3: (Q) Decide the Question
Step 4: (A) Write down the Answer
Phase 3: Taking Action
Step 1: Validate Interest
Step 2: Involve Your Team
Step 3: Follow Up to Ensure Success
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Matt Greenberg
CTO @ Reforge
Elena Verna
Interim Head of Growth @ Amplitude
Ravi Mehta
Co-Founder & CEO @ Scale Higher
Brian Balfour
Founder / CEO @ Reforge
Building Your Reforge Action Plan
Share
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this project, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Project →
YOUR PROJECT
Building Your Reforge Action Plan
Phase 0: Introduction
Our goal at Reforge is to give participants insights, tools, and frameworks you can use in your organizations to solve complex problems, add business value, and elevate your career. However, cohort after cohort we get feedback looking for perspective on how to apply these insights, tools, and frameworks most effectively.
What's the best practice for pacing Reforge application in my company?
How are you spreading Reforge learnings within your company?
Influence without authority
In this project, we're going to get insights from five of our Reforge Experts on how to most effectively leverage what you've learned at Reforge to create value for your organization. Each expert comes with a deep knowledge of Reforge material, as well as personal experience leading organizational change at major organizations:
Brian Balfour, Reforge Founder & CEO
Ravi Mehta, Reforge EIR
Elena Verna, Reforge EIR & Growth Advisor
Matt Greenberg, Reforge CTO
Fareed Mosavat, Reforge VP Programs & Partners
Before we jump into specific strategies from these five experts, let's understand what success looks like in applying Reforge material, and what challenges you may overcome in trying to take what you've learned here and create business impact.
1
Developing Expertise
Participating in a Reforge program does not make you an expert. Learning, and even getting reps applying material, are steps in the road to expertise, but they are not sufficient themselves.
Martin Broadwell, an executive coach and former director of engineering at the once cutting-edge Bell telephone company, created a framework that illustrates the stages people go through when developing expertise: the consciousness-competence learning model.
The model suggests that people start out on a new area with unconscious incompetence:
They don't understand something and don't even know what they don't know. They may not understand something is even valuable to know.
The next stage is conscious incompetence:
Even though an individual does not know something, they recognize this and the value that competence in an area could bring.
The third stage is conscious competence:
The individual knows how to do something and can demonstrate skill or application of that knowledge. However, applying that knowledge requires deliberate, concerted effort.
Finally, expertise is achieved at the unconscious competence stage:
This is where an individual knows something well enough that it becomes intuitive to apply it. The individual may be able to teach others or apply their knowledge to unique circumstances.
When you passively consume Reforge content, you can move from unconsciously incompetent to consciously incompetent.
When you fill out exercises in order to apply the material to your company and engage with other participants to share experiences, you can start to move into the consciously competent stage.
However, to develop a deeper conscious competence and to move into the unconsciously competent phase of expertise, you need to apply the material in real life. Getting practice and experience helps you build intuition that you can readily apply in your day-to-day activities to create value.
This project on developing your Reforge material will help you strengthen a sense of conscious competence with Reforge learnings. This sets you up to better apply material at your organization, and also to achieve unconscious competence or deep expertise in the future.
"Reforge frameworks can help accelerate your learning, but no framework is 100% applicable to every context. You can create something really powerful by applying, customizing, and integrating the frameworks to fit the unique nuances of your business." – Brian BalfourMARK STEP COMPLETE
Three Common Mistakes in Applying Learning
People often have very different perceptions of how to apply new learnings to an organization that can be ineffective and even detrimental. There are three common archetypes of people who fail to effectively apply their learnings in their organizations.
THE PREACHERS
Preachers take exciting concepts and try to share them too broadly and too conceptually with their organization.
This often looks like individuals trying to explain to their organization, "WE NEED TO THINK IN LOOPS NOT FUNNELS."
"It took a lot of time and effort to get HubSpot to think in loops, not funnels. It's not realistic to think you can just give a presentation and change the way your organization does business." – Brian Balfour
As a Reforge member, you've thought about these concepts longer than your peers, and understand what could be valuable and why. The key to avoiding the preacher trap is to connect Reforge material to tangible problems you or your colleagues are facing.
"People are busy and everyone has their own priorities. They're not looking to change their thinking unless they can see the value it can bring to them, and are generally slow to release tightly held beliefs." – Fareed Mosavat
THE REVOLUTIONARIES
Revolutionaries look to make a bunch of changes all at once, especially if those changes are large in scale or affect many cross-functional stakeholders.
This often looks like people who immediately go to their executive team saying "We need to completely re-organize our teams!"
"It immediately makes me nervous when I talk to a participant after a cohort ends and they explain that they scheduled time with their executive team and are ready to present out everything they learned." – Matt Greenberg
You need to start in your sphere of influence, and start building proof points that help you get more buy-in in a broader sphere of influence.
"People struggle conceptualizing compounding returns. They try to take a big swing to create a ton of value at once, and don't realize that creating value at scale is almost always the result of lots of smaller wins that build on each other and snowball." – Ravi Mehta
THE DELAYERS
Delayers know they can create value with the material you've learned, but they wait until the time is right before they try to make a change. This can happen for a number of reasons:
They're passively waiting for an opportune moment to make a change, which never comes
They wait to put themselves in a position to get maximum credit for making a change
They're just busy and think that it'll get easier to wait until they have more time
The problem is that slowly, over time, that knowledge fades without them ever getting into conscious competence, much less unconscious competence.
In the vast majority of situations, there is no opportune moment to drive change. New priorities emerge that take your attention and time, and you can slowly revert to your previous status quo. If you want to benefit from new learning, you have to prioritize it and have a plan.
MARK STEP COMPLETE
Bridging the Gap from Learning to Impact
One principle of Reforge is that we don't teach hacks. A lot of people come into Reforge looking for a way to hack success. In other words, they want a shortcut to creating value - for their organization, their teams, and themselves. However, this type of impact takes work, and there is plenty of friction you have to overcome in order to really create impact at an organizational, team, or even personal level.
Preachers, Revolutionaries, and Delayers are the result of trying to create impact without putting in the full amount of work required:
Preachers look to simply teach others high-level concepts, and expect them to run with it to create impact
Revolutionaries assume drastic changes are easy, not recognizing everything that is currently in place and the complexity of creating change across different stakeholders
Delayers look to wait until the time is right to create impact, not recognizing that impact needs to be created in line with other responsibilities and priorities
Creating impact out of learnings requires going through four major steps:
Learning: you've learned something valuable that you think could create valuable impact
Relevant: you translate the learnings to be relevant to your specific context
Influence: you convince others that your relevant learnings are valuable
Action: you and relevant stakeholders follow through and take action to achieve impact
Therefore, creating "impact" means making sure you can move from learning to impact without getting held up in any one of these phases. Let's talk through the three major gaps you have to bridge in order to get to impact.
GAP #1: THE LEARNING TO RELEVANCE GAP
This is one of the most common challenges with professional development. People take courses, they learn something interesting, but it's not relevant to what they're working on. So that knowledge atrophies over time.
The first step in creating impact is picking the right starting point - the point where your knowledge is applicable to a relevant business problem within your scope of influence. The first phase of our project will lay out how to do that effectively.
GAP #2: THE RELEVANCE TO INFLUENCE GAP
Once you have identified a relevant area to apply your learnings, the next gap people struggle to clear is the influence gap. They may know something valuable, but they struggle to influence others on the value of their knowledge or approach.
This happens a lot when people bring a lot of new terms, concepts, and frameworks without adequate context - it becomes difficult for others in your organization to fully understand your thinking. The second phase of our project will address this by helping you create a compelling narrative that customizes your learnings to your specific situation.
GAP #3: THE INFLUENCE TO ACTION GAP
The last gap people face is the action gap. Even if you can convince others you have good ideas that have potential value, getting the right stakeholders to take action to actually create impact can feel like herding cats.
We'll discuss a tactical approach to getting buy-in and ensuring relevant stakeholders successfully take the action you need and create successful outcomes.
Once you are comfortable clearing these gaps, you can start to take on progressively larger challenges to expand the scope of impact you can create from your learnings.
"This is the messy middle of career development. You have to choose your problem, put in the work, learn from your experience, and repeat the process with bigger and bigger problems." – Brian Balfour
You can build out the next three phases using the Building Your Reforge Action Plan Template. Building out the next three phases of the project helps you think through your plan more clearly and bring a higher rigor of thought to your ideas. Whether or not you follow our plan exactly, going through these phases will greatly increase your chance of being successful in making a positive impact on your organization.
We'll walk through two examples of what this could look like in practice throughout this project, one pulling problems and frameworks from our Scaling Product Delivery program and the other from Product Leadership. However, this approach is applicable to any program you are currently taking or from which you can pull valuable insights.
MARK STEP COMPLETE
NEXT UP: CHOOSING YOUR GOAL



Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
Introduction to Product Workplan
5 min
Identifying Strategic Priorities
8 min
Brainstorming Product Work
12 min
Developing a Product Workplan
21 min
Communicating & Iterating Your Product Workplan
11 min
BONUS: Case Studies in Long Term Product Evolution
47 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
5:27
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
So far in this program, we covered our four types of product work: feature, growth work, product-market fit expansion, and scaling.
Each aims to create and capture maximum product value, after you reach product-market fit. We previously saw how each of these types of work contributes to a product's value proposition in a different way.
First, feature strategy is focused on enhancing the existing value prop by adding incremental value to the product, or extending the value prop to marginal users. We do this in a couple of ways, by evaluating and enhancing existing product features, or developing new product features.
Second, growth strategy is focused on maximizing the existing value proposition, that is getting the most out of your existing product in existing target market by removing barriers to access and increasing product distribution.
We do this in a few different ways, by moving things like acquisition, retention and monetization.
Third, product-market fit expansion strategy is focused on adding new value props to a product to increase the ceiling on our overall product-market fit. We do this in two ways. We can adapt products to new complementary markets, and we can also add new complementary products.
Fourth, we looked at scaling. Scaling enables and enhances feature growth and product-market fit expansion strategy. Scaling involves making strategic investments to critical infrastructure to enable continued product success.
These four types of product work form the foundation of your product workplan, a tool to help you translate your strategic priorities into product work, sequenced over multiple periods of time.
In order to succeed as a product leader, you need to know how to bring these types of work together and communicate them effectively.
Most companies have an organizational strategy at the company level. This strategy is informed by strategic priorities, which are top-down priorities defined by leadership. The org strategy guides the overall business, and therefore, should also influence your product strategy.
Additionally, most companies also have a product roadmap, which articulates the tactical actions that a product team should take in the short term. A roadmap serves as a concrete step of actions that the team should take.
The org strategy influences the product roadmap, but an org strategy is usually too abstract to be executable. A roadmap, on the other hand, doesn't look far enough into the future.
As a product leader, your role is to bridge these two together with a product strategy, something that looks into the future, but also informs your near-term roadmap.
Product leaders often fall into the pitfall of overemphasizing their org strategy, or roadmap, in building their product strategy. Defaulting to the org strategy ends up in building a product strategy that is too high-level or not actionable.
Hypothetically, this could look like a product leader at Zoom telling their PMs to make video communications frictionless and secure, which is Zoom's mission statement, but this only provides a high-level aspiration and is too abstract to put into action.
In contrast, a roadmap is too short-term focused, so it optimizes for the short-term rather than the long-term compounding value.
Casey says, "Too often when you're focusing on the short-term instead of long-term value, you can optimize your way straight into a strategic brick wall."
At Pinterest, the team became so efficient at driving signups that they could draw a line straight to signing up every single person in the US. That meant signups ceased to be a key metric, and instead, the team needed to focus on how many Americans ultimately activate, potentially at the expense of signup growth.
When product leaders don't bridge the gap between their company's strategy and roadmap, a few consequences occur:
Short-term optimization of a roadmap, which is taking action that creates value in the short-term at the expense of the long-term.
Working backwards to a lofty goal that can't be measured or accomplished.
Different definitions of success between you and leadership.
As a product leader, you can address this gap by building a product workplan. A product workplan is a tool to help you translate your strategic priorities into product work sequenced over multiple periods of time. Your product workplan helps in a couple different ways.
First, it helps you build the roadmap. A well-articulated product strategy includes a high-level plan of how to reach your strategy and guide your roadmapping process.
Casey says, "Your product workplan is the framework you can use to inform your actual product roadmap."
Second, the product workplan helps you communicate your roadmap. A great product workplan allows you to communicate important decisions and trade-offs that will be included in the roadmap itself.
In this section, we're going to walk through a process to develop and communicate your product workplan. We're going to cover this in four different phases.
First, identifying strategic priorities, determining the strategic priorities of your business that are within your scope as a product leader.
Second, we're going to brainstorm product work, ideating and refining product work ideas that support your strategic priorities.
Third is developing a product workplan -- categorizing the sequence of product work based on the degree of impact and urgency.
And finally, communicating and iterating your product workplan. This is aligning your product workplan with leadership and your team, as well as refining your product workplan due to internal and external changes.
In the next lesson, we'll start with the first phase; identifying strategic priorities.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
Introduction to Product Workplan
5 min
Identifying Strategic Priorities
8 min
Brainstorming Product Work
12 min
Developing a Product Workplan
21 min
Communicating & Iterating Your Product Workplan
11 min
BONUS: Case Studies in Long Term Product Evolution
47 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
8:10
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the previous lesson, we introduced the common pitfall product leaders face of overemphasizing their org strategy or roadmap in building their product work plan.
We covered the two ways a product work plan is important to roadmapping. It helps you build the actual roadmap and also helps you communicate that roadmap.
Finally, we introduced Reforge's framework for putting product strategy into action: identifying strategic priorities, translating those strategic priorities, developing the product workplan and communicating and iterating that product workplan.
In this lesson, we'll dive into the first phase, identifying your strategic priorities.
1
Strategic priorities are top-down priorities defined and communicated by leadership. Strategic priorities are the way org strategy gets translated into your product workplan. They are often stated in board notes, C-suite presentations, quarterly goals, or discussions with leadership.
For example, Airbnb's host growth team had the strategic priority of increasing host growth by Y percent on an annual basis. At Tinder, a strategic priority was to improve engagement of the Gen Z audience on an annual basis.
Your job as a product leader is to incorporate relevant strategic priorities into your product workplan. Specifically, your product work should be informed by these priorities. When your product work is informed and connected to your strategic priorities, it is more likely to drive the company's org strategy, while a product workplan that is not aligned with the relevant strategic priority could lead to a siloed strategy and underperformance.
Ravi says, "Today, product is often the most important lever a company has to achieve its strategy. As a result, product leaders play an essential role in a company's success. Product leaders must understand and enable the strategic priorities in order to succeed."
In identifying strategic priorities. We see product leaders often fall into two common pitfalls. One, not focusing on the most relevant strategic priorities. And two, not having clarity on those priorities.
First, product leaders often don't focus on the most relevant strategic priorities to their team.
Company strategy and priorities are designed to influence the collective efforts of lots of teams throughout the org. They are not designed for individual product leaders. It's your job to understand your scope, which helps you understand which strategic priorities are relevant to you and your team.
Second, product leaders often don't have clarity on strategic priorities. This occurs due to three reasons.
One, having multiple strategic priorities. There might be many strategic priorities that have been communicated by leadership.
Two, implicit strategic priorities. Not all strategic priorities are explicit or fully articulated. In more extreme cases, strategic priorities are completely absent.
And third, variance in strategic priorities. The stage of your company and other factors impact which priorities to focus on.
1
To avoid these mistakes, we use the strategic priority map. In it, we include the strategic priorities that are relevant to a leader, as well as key elements of those priorities.There are two steps involved in building your strategic priority map. First, identifying the relevant priorities to you and your team. And second, clarifying those priorities for you and your team.
1
Let's start with the first step: identifying relevant priorities, which corresponds to the highlighted column in your strategic priority map.
Product leaders can identify their relevant strategic priorities by categorizing these priorities into three buckets. First, relevant priorities. Second, peripheral priorities. And third, tangential priorities.
Relevant priorities are the priorities that fall within your sphere of influence, which will act as a north star for your product strategy.
Peripheral priorities are those you can influence, but do not own directly. You can discuss these priorities with relevant stakeholders and your leadership to determine if you own these priorities.
You can provide insight to others owning these priorities, but should not build out strategies for them directly. Still, these are priorities that you can influence and often will need to support. Therefore you should include them in this strategic priority map.
Tangential priorities are those that are explicitly outside of your sphere of influence. This helps you clearly define the priorities that you will not work on, allowing you to focus your effort and resources on driving value to your relevant priorities. Tangential priorities are out of scope for your product strategy, and therefore do not need to be included in the strategic priority map.
Let's consider the example of a product leader who is responsible for monetization at Tinder. A significant part of Tinder's monetization comes from Tinder Gold, a subscription product that unlocks a valuable feature, the ability to see who swiped right on you. As a result, people can find matches much more quickly.
The relevant priorities for Tinder's monetization team are increasing revenue by improving Tinder's existing monetization offerings and providing new paid features.
The peripheral priorities for Tinder's monetization team include improving Tinder's recommendation algorithm. The recommendation algorithm is responsible for determining which profiles a user sees. A better recommendation algorithm will increase how often a person sees another person they want to swipe right on. As a result, improvements in this algorithm have a direct impact on revenue. The monetization team should influence the priorities of their recommendation team to achieve its goals.
Tangential priorities for Tinder's monetization team include Tinder's user acquisition efforts. Since the monetization team doesn't have significant influence over user acquisition, the team's efforts are primarily measured on a per user basis so that the team's work is evaluated based on their sphere of influence.
Fareed urges that product leaders ask the question, "Which pieces of your strategy are you able to do within the scope now vs. what do you need get buy-in to do?" This will help you identify specifically what is in the sphere of influence.
After you've identified your relevant strategic priorities, product leaders should clarify them.
Product leaders can ensure that priorities are clear and actionable by identifying three key characteristics for each priority.
The first is the outcome, the action that the strategic priority focuses on achieving.
The second is the criteria, the direction and magnitude of improvement for the outcome. Direction could be increased, decrease or maintain. Magnitude would be more about the amount or value.
And the third component is rationale, the explanation of why the strategic priority is important.
Let's look at our two previous examples from Airbnb and Tinder to articulate their three elements.
Airbnb's host growth team had the strategic priority of increasing host growth by X percent in the coming year. Here, host growth is the outcome, increase is the direction, and X percent is the criteria.
The rationale for this strategic priority was likely linked to the importance hosts played in the Airbnb ecosystem. As a two-sided marketplace, they needed to increase the number of hosts to add more inventory, which would help acquire new users and build deeper engagement for existing demand.
Tinder identified the importance of Gen Z in their long-term viability. Accordingly, Tinder's strategic priorities were to improve engagement of this audience. Engagement of the Gen Z audience is the outcome, improve as the direction, and Y percent is the criteria.
The rationale for Tinder's strategic priority was twofold.
First, since inception, Tinder's brand and value prop have been focused on meeting the needs of younger users looking for a fun serendipitous way to connect. It turns out that strategy has a halo effect. The product that meets the needs of 18 to 26 year old users also appeals to many other demographics.
Second, the needs of Gen Z are different than past generations of 18 to 26 year olds. As one example, Gen Z is spending a lot more time meeting people on social apps like Instagram. To win with Gen Z, Tinder needed to significantly improve engagement by making the experience more social.
In the next lesson, we'll cover the second phase of developing and communicating your workplan: brainstorming product work.
Lesson Summary
Product leaders can identify their relevant strategic priorities by categorizing these priorities into three buckets. First, relevant priorities. Second, peripheral priorities. And third, tangential priorities.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
Introduction to Product Workplan
5 min
Identifying Strategic Priorities
8 min
Brainstorming Product Work
12 min
Developing a Product Workplan
21 min
Communicating & Iterating Your Product Workplan
11 min
BONUS: Case Studies in Long Term Product Evolution
47 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
12:25
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the previous lesson, we covered the first phase of putting your product strategy into action, identifying strategic priorities.
We looked at the two common mistakes product leaders make and identifying strategic priorities, lack of relevance and lack of clarity.
And we saw how product leaders could avoid making these mistakes by identifying the strategic priorities relevant to them and their team and making sure there's a lot of clarity around those priorities.
In this lesson, we'll dive into the second phase of developing and communicating your product workplan: brainstorming the product work.
Now that we have the right starting point -- the strategic priorities we're responsible for -- we need to focus on translating that into tactical product work. We need to know what types of product work among feature, growth, product market fit expansion, and scaling to leverage to achieve those strategic priorities. This lesson will explain how to do that effectively.
Not brainstorming different types of product work occurs due to a lack of creativity or lack of focus, both which manifest in two common ways.
One, just copying product work of competitors without understanding their strategy.
And two, doubling down on the product work that was successful in the past.
First is copying product work of competitors without understanding the strategic context of their work. Product leaders often copy competitors without understanding that link between their strategic priorities and the product, leading to lackluster performance.
For example, Instagram built IGTV as a response to YouTube, which was dominant in long form video. IGTV allowed users to share long form videos. However, it lacked the virality and monetization that allowed YouTube to grow. This led Instagram to ultimately remove the IGTV button.
Helen Sims views copying competitors through the metaphor of just skating to where the puck is going. If you copy competitors, you will only build something worse than what they have and later than they have it. This isn't a winning strategy.
1
Second is doubling down on the type of product work that was successful in the past. Product leaders often over-index to one type of product work, like new features or growth, making the incorrect assumption that what has worked in the past will help us succeed in the future.
Let's look at the approach of two home sharing companies, HomeAway and Airbnb.
HomeAway was the 800 pound gorilla of vacation rentals, but took a solely growth mindset to increasing vacation rental supply, which resulted in incremental improvements.
In contrast, Airbnb took a much more balanced approach to this market, treating the expansion of supply, not just as an incremental growth type of problem, but also a product market fit problem for hosts and guests. Airbnb worked on product market fit expansion by launching new markets and new products like Airbnb Experiences.
To more properly translate strategic priorities into product work, we need to leverage a product work ideation session. This type of ideation session is a structured meeting in which you and your team pitch product work ideas with the goal of reaching your strategic priorities, then filter through and determine which product work ideas to include in your product workplan.
1
A great ideation session is one where different members of your team can effectively share and build on each other's thinking to either foster creativity, allowing for new and novel ideas, or keep the team focused on product work relevant to achieving priorities.
The output of our ideation session will be different product work ideas covering the four different types of product work for a given strategic priority.
Running a well-structured product work ideation session involves preparing your attendees for the session and also creating and managing the session agenda.
Before the product work session can begin, your team will likely have a variety of product work ideas. It's your job as a product leader to facilitate discussions in a way that empowers attendees to collaborate creatively while staying focused on ideas that will help you reach your priorities.
Bad ideation sessions consist of rambling or discussion of half-baked ideas. Prep for the ideation session helps set teams up for success in contributing great ideas for the session. They can do this in three key ways: providing the context for the strategic priorities, defining your charter principles, and being clear on the expectations of participants.
First, providing context for your strategic priorities. Product leaders need to pre-socialize context on strategic priorities as it's important in setting the stage for the ideation session. Attendees without the right context may provide product work ideas that sound attractive, but actually do not best serve your strategic priorities. By setting the context up front, product leaders help attendees generate relevant ideas by providing sufficient context on the strategic priority.
Providing context involves socializing the elements of your strategic priority map before the ideation session. We need to know what strategic priorities are in scope for the team and why these priorities are important. The goal of the product work ideation session is to identify product work ideas to the strategic priorities.
Let's look at our Tinder example. The strategic priority was to improve engagement for Gen Z. Rationale allows participants to understand assumptions about the best way to achieve an outcome.
Continuing with our Tinder example, their rationale was likely twofold. First, since inception, Tinder's brand and value proposition have been focused on meeting the needs of younger users, looking for a fun serendipitous way to connect.
And second, the needs of Gen Z are different than past generations of 18 to 26 year olds. Initially, Tinder approached this work from a growth perspective, a series of rapid experiments helping Tinder define informed hypotheses about the needs of Gen Z. Once Tinder had a clearer understanding of the market, the product team shifted to product market fit expansion ideas to drive a step function change in engagement.
The second big thing around good preparation is defining your charter principles. Charter principles are guiding principles that will shape your ideation session and ultimately your product strategy. Charter principles help keep ideation sessions focused by providing constraints for product work ideas.
There are three types of charter principles that can help guide a product team. The first are guardrails. What could derail you product work or hinder it from achieving its strategic priorities? The second are lessons learned. What lessons learned are critical to succeeding in those priorities? And the third is validated capabilities. What capabilities have stood out as successful in the past that we want to leverage and lean on in the future?
Guardrails are top-down inputs that scope the solution space. Leadership often determines the guard rails that increase the likelihood of success.
1
One of Tinder's guardrails in improving engagement for Gen Z was delivering a unique, innovative experience. There is a constant stream of fresh apps and content targeting that audience. The team knew they needed to deliver an innovative experience in order to break through the noise. This helped the team shape its product work solutions to new work that was innovative rather than incremental improvements to the existing product.
Second, lessons learned are insights that the team has learned from progress and existing product work.
One lesson learned that Tinder identified was interactive content. Gen Z enjoys not just consuming content, but interacting with content by sharing, commenting, and co-creating. So, Tinder decided to develop a live interactive video experience with Hollywood-level production values. This would be unlike the matching and messaging experience Tinder's users had grown accustomed to.
Third are validated capabilities. They have been successful in the past that could be leveraged in to help us succeed in the strategic priority.
Tinder's validated capability in improving engagement for Gen Z was to leverage their scale. As a result of its scale, Tinder had the capital to create the type of Hollywood-quality content that would attract Gen Z audience. More importantly, Tinder's scale enabled the company to deliver a live experience that would bring millions of users into the product at the same time.
When you don't have charter principles, you're always starting from scratch, not leveraging things you've learned in the past in your future thinking. However, if you have too many guiding principles, it can artificially constrains your team's thinking. Therefore, we generally recommend product leaders focus on the top 3-5 guiding principles to keep a good balance of adding value without being too prescriptive.
Finally, before the product work session can begin, be clear on participation expectations. A lot of ideation sessions are doomed to fail before they start because people don't come prepared and the wrong people are in the room. Instead, we need to set expectations for attendance and pre-work.
In attendance, clearly state 1) who attends and 2) the role of each attendee. This includes who should attend, who is optional, and who should be informed of the decisions. Typically attendees will include your team, your engineering and design counterparts, and any stakeholders that are critical to the success of the priority.
As a product leader, you should use your judgment in deciding who should attend. Additionally, state how attendees should contribute in the session. This will typically include preparing product work ideas before the session begins.
Pre-work allows you to focus the meeting on ideation and defining product work rather than communicating context. All attendees should complete pre-work before the ideation session.
Typically pre-work will include identifying several product work ideas before the session. These ideas need to support the strategic priorities, time horizon, and rationale; adhere to the constraints of your charter principles; and cover the four different types of product work.
After preparing for the product work session, product leaders will manage the agenda of the ideation session. Managing the agenda is important in that it helps maintain focus on strategic priority and promotes creativity.
An ideation session involves an agenda that covers one strategic priority at a time. This allows the audience to ideate and refine their ideas on a given strategic priority before moving to the next one.
A great agenda has four key components. The introduction idea, pitches, brainstorm gaps, and idea filtering.
First, the introduction sets the ground rules for conduct during the ideation session. Ground rules often include:
-Pitches allow one person to present their ideas, uninterrupted.
-No re-pitching ideas that have already been pitched.
-Discussion or feedback happens in the brainstorming gaps.
-The product leader facilitates and guides the session.
Second, each attendee will be allocated time to pitch their product ideas. Any feedback or input on the ideas should not be shared yet.
Two reasons for this are:
-Certain attendees can dominate the discussion, often senior folks, limiting the involvement of other attendees.
-Also, ideas that are evaluated during pitches stifle creativity, as attendees may be reluctant to face live feedback.
As ideas are being pitched, the product leader has two roles: making sure the guidelines are followed and grouping ideas into the four different types of product work.
An ideation board with the four types of product work will help organize ideas during the session and make sure each different type of product work has an idea.
Third, the product leader needs to identify gaps in the ideation board and facilitate brainstorming to fill in those areas.
Often product work ideas are concentrated in one type of product work. Not all product strategies require all four types of product work. However, teams often tend to over-index on product work they know well, which could indicate siloed thinking.
So, we want to force the thinking and make sure that we are creating ideas in each type of product work. Scaling work is often underrepresented in ideation sessions. At companies that focus on feature and growth work, product market fit expansion is also often forgotten. Your goal as a product leader is brainstorming gaps and to fill in the parts of the ideation board that are empty.
1
The fourth thing that we need to do on the agenda is collectively filter ideas down by removing the ones that are least strategically aligned. These ideas often do not help reach your strategic priority or do not support product work that will help reach that priority. These ideas need to be identified and removed from the ideation board.
1
The Tinder team filtered out several product ideas as part of defining the company's Gen Z strategy. The ideas had merit, but were not strategically aligned. For example, the company scrapped an idea related to VR because not enough people in the Gen Z demographic would have access to VR hardware within the time horizon defined by the team.
In the next lesson, we're going to cover the third phase, developing a product work plan.Lesson Summary
Now that we have the right starting point -- the strategic priorities we're responsible for -- we need to focus on translating that into tactical product work. We need to know what types of product work among feature, growth, product market fit expansion, and scaling to leverage to achieve those strategic priorities.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
Introduction to Product Workplan
5 min
Identifying Strategic Priorities
8 min
Brainstorming Product Work
12 min
Developing a Product Workplan
21 min
Communicating & Iterating Your Product Workplan
11 min
BONUS: Case Studies in Long Term Product Evolution
47 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
20:37
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the previous lesson, we covered the second phase of developing and communicating your product workplan: brainstorming product work.
We explained how great product work ideation sessions foster creativity, allowing for a variety of novel ideas, and to keep the team focused on product work relevant to achieving priorities.
We also walked through the three ways to prepare for an ideation session: providing context for strategic priorities, defining the charter principles, and being clear on participant expectations.
We also looked at how to manage the agenda through the introduction, idea pitches, brainstorm gaps and idea filtering.
We've ideated and refined product work ideas to come up with product work that supports strategic priorities. Now we want to actually develop the product workplan.
1
As a reminder, your product workplan is a tool to help you translate your strategic priorities into product work sequenced over multiple periods of time.
In planning product work, product leaders often over-focus on short-term work at the expense of long-term growth. This leads to stunted performance and less compounding value. Detailing short-term work is the role of a product roadmap, but product leaders need to be thinking longer term in building their product workplan.
Focusing on short-term work at the expense of long-term value creation and capture often occurs based on how product leaders are evaluated. Many products are evaluated based on their quarterly or near-term progress and therefore, it's top of mind, but still great product leaders think long-term allowing them to accomplish more over that time period.
Developing a product workplan helps product leaders shift their focus from quarterly planning and roadmaps to a more long-term perspective on strategy, which helps teams create and capture value over a longer horizon.
Ravi says, "Too often, teams prioritize short-term results over long-term value creation. Like steroids, the short-term injections give the appearance of enduring strength, but weaken the patient over time. Great product leaders create sustainable value by laddering day-to-day product work into strategy."
We'll walk through developing a product workplan, which will serve as an input into your product roadmap. The key tool we'll leverage is the product sequencing matrix, where we categorize product work into four buckets based on their impact and urgency.
Our first category is cornerstone work, which is high-impact and high-urgency product work. When building a roadmap, these are product work initiatives that you include first and often form the foundation for the strategy.
Second is non-essential work. This is low importance, low urgency work. These could be useful to your product workplan, but are not essential. Therefore, you can deprioritize or delay in cases where there is more important or urgent work.
Sequencing cornerstone and non-essential work is easy, since cornerstone work is high priority and non-essential work can be deprioritized.
However, the remaining two categories, important but flexible work and supporting work, are challenging for product leaders to prioritize, because there are reasonable trade-offs. Important but flexible work creates and capture significant value, but isn't urgent, while supporting work is focused on the short-term and has lower impact. There isn't always a right answer here, but that doesn't mean that there isn't a good approach to thinking through it.
When it comes to your important but flexible work, two things can happen if you put it off.
First, the work can become higher urgency. This often happens when competitors in the market pursue similar types of work and you're forced to play catch up.
Second, the work gets into a cycle of continuously getting pushed off. Everyone knows the work could add value, but it always feels like too big of a lift to take it on.
In order to overcome this before deprioritizing important but flexible work, product leaders should proactively look to set themselves up to be successful. They can do this by finding intermediate work that helps lay the foundation to take on this important but flexible work in the future.
This could involve investing in project planning and scoping, working on smaller pieces of the work, investing in research, prototyping, or experimentation that helps validate the idea for the work. When product leaders can do this effectively, they can reduce the friction and increase the probability of success of that work being valuable in the future.1
When it comes to supporting work, which is low importance and high urgency, a lot of product leaders find themselves putting off this work because it's not high visibility. This is often internal work addressing nagging customer concerns or low impact improvements. It's usually easy to put off or work around. However, when this work is delayed too long, the workarounds start to become cumbersome or the problems they are solving fester and grow until the work becomes high importance.
Therefore, when you have to make important trade-off decisions and deprioritize supporting work, product leaders need to determine a mitigation plan that identifies:
-What workaround or temporary solution can we use instead of prioritizing this work?
-And how long are we comfortable using this mitigation before prioritizing the work?
When these two aspects are clear, product leaders protect themselves from supporting work creating significant problems in the future.
Sequencing product work is part art and part science. For this reason, we'll walk through how to make sequencing decisions critical to your product workplan in four steps.
First, evaluating the impact of the product work; second, evaluating the urgency of the product work; third, mapping the product work onto the matrix; and fourth, leveraging the matrix to develop a workplan.
First is evaluating the impact of the product work that you shortlisted from your ideation session. Impact answers the question, how effective is the product work at creating value that aligns with your strategic priorities?
At this phase, it's not always worthwhile to invest in building detailed forecasts of what the impact of specific types of product work would be, which is why starting with a broad categorization can help.
In determining what is high impact versus low impact, there are four things that you should look for.
The first is upside. How many users will this touch and what magnitude of value will it create for them? The second is does this product work support more than one strategic priority? The third is looking at linear versus compounding. Are the returns from this product work compounding or linear in results? And the fourth is differentiation. Does this product work help differentiate the company relative to the competition?
Upside is the combination of reach and value. Doing work that touches a small user base and adds minimal value is going to be lower upside than high value added work that touches a lot more users. Still, sometimes product leaders can get too focused on one of these factors and lose sight of the other.
The strategy intersection occurs when product work supports multiple strategic priorities. This allows product leaders to double down on work that could create and capture value in multiple ways. When estimating your value created or captured, determine if the product work will likely support multiple priorities.
Product work that supports two or more strategic priorities results in a higher score for this component.
1
For example, TripAdvisor made a significant investment in machine learning and natural language processing, which allowed for semantic understanding of review content. By getting a better understanding of the meaning of reviews, TripAdvisor was able to support multiple strategic priorities, including increasing revenue by displaying a more personalized set of results, improving SEO by building and expanding the quantity and quality of SEO landing pages, improving internal search capabilities to reduce the company's dependence on SEO traffic, and  increasing trust by more accurately identifying fraudulent reviews.
Compounding work builds on itself leading to exponential impact. In contrast, linear work results in a fixed amount of value for each user it touches. Prioritizing compounding work over linear work leads to a greater impact for every user it touches.
Continuing with our TripAdvisor example, several years ago, they made trip-planning a strategic priority for the product team. The team decided to start by improving the save feature in the product. These improvements led to a compounding impact. Travelers who saved were more likely to return to TripAdvisor rather than continue their trip-planning elsewhere. Each time they return, TripAdvisor had better data with which to show personalized results, making them more likely to save and more likely to return as a result. Over time, the improvements in the personalization improved TripAdvisor's SEO loop, further compounding the impact of saves.
Differentiation involves building product work that addresses user needs in a novel way, or in a way that is distinct from your competitors. Differentiated product work helps build a competitive advantage, and allows you to create and capture more value for your users and business.
One way to understand if your product work is differentiated is to survey what competitors are doing. If your product work is different, then it falls in the differentiation bucket. Differentiated product work often coincides with a high score for this component.
TripAdvisor's unique value has always been the breadth and depth of user-generated reviews contributed by travelers. In 2015, TripAdvisor was looking for a differentiated way to further incentivize contributors to share their reviews and opinions.
That year, the TripAdvisor product team launched TripCollective, a system of points and badges designed to recognize and reward travelers for their contributions. For example, the program offers badges such as Top Contributor, Boutique Hotel Expert, Helpful Reviewer and New Photographer. This program drove significant increases in traveler contributions, further cementing TripAdvisor's differentiated position in the market.
After evaluating impact, we need to evaluate the urgency of the product work. Urgency answers the question, how urgently do you need to execute on this product work to reach your strategic priorities in your designated time horizon? Product leaders need to understand the urgency of work, as there are cases where not doing product work at the right time could prevent future product work from succeeding and derail the strategy.
Urgency is impacted by three components. Sequencing: is this work required for other types of work? And does this work require other types of work? Competition: are there competitive pressures you need to respond to? Third is leadership expectations. Is there an explicit leadership time horizon for this product work?
Sequencing involves planning work to unlock future product work by doing prerequisites sooner. There are several types of sequencing.
A few of the common forms include, first, learning about a hypothesis before deciding whether to do this product work. The second is technical. We have to do product work X before product work Z for a technical reason. The third is user behavior. A user currently does a certain behavior, but we want the user to do a different behavior, but that different behavior is too distant from the existing behavior and habit, so we need to do something in the middle. And the fourth is an asset. We need a certain asset before we do some type of product work. Assets could include a library of content, a certain amount of data or something else.
Let's look at an example from Tinder. In 2018, the team was focused on better understanding the needs of Gen Z. As part of this, Tinder explored multiple features catering to different situations common for that audience. Tinder U for university students, Spring Break Mode for Spring Breakers and Festival Mode for music festivalgoers. Those efforts reinforced Tinder's learnings about the Gen Z audience, paving the way for the Swipe Night strategy, for example. That Gen Z audience wanted that shared context in dating and these immersive experiences.
Prior to launching Swipe Night, Tinder wanted to test it to make sure it functioned properly, but doing so would have ruined the surprise. To solve this, the team sequenced a technical roadmap that allowed the company to prove the stability and scalability of each individual part in isolation.
For example, the roadmap included an onboarding video using Tinder's new streaming service, a survey using the new branding story system and a concurrent user counter using the new lives event system. Each of these parts was launched and scaled during the time period leading up to the Swipe Night release, providing technical stability while keeping this Swipe Night feature under wraps.
An example of user behavior sequences involves TripAdvisor users that were comfortable browsing trips. TripAdvisor believed that trip-planning should be the direction that the company goes in. To get from browsing to trip planning, users first had to develop a habit of saving their trips.
TripAdvisor started the sequence of features by launching a save trip feature, then rolling out additional features to support pre-reqs of trip-planning, itinerary creation, collaborative planning, personalized recommendations, in-destination experience and a post-trip experience.
For an asset sequencing example, let's look at TripAdvisor again. One of the steps in the sequence of building a trip-planning product was to leverage personalization to allow TripAdvisor to make recommendations for trips. To do this, TripAdvisor needed significant user data on behavior related to trip planning before it could implement a robust personalization algorithm.
When product work is required to sequence to another important initiative or product work, then we can consider it to be high urgency.
The second component of urgency is competition, in which product leaders assess competitive threats across two dimensions.
The first is proximity. Does this help us fight off a near-term competitive threat? And the second is severity. How severe is that threat?
For example, Slack faced a high-urgency competitive threat when it expanded into enterprise. It needed to compete with Microsoft Teams for the same customers. Though Slack had an advantage in terms of its viral growth and UX/UI, Microsoft had the ability to bundle Teams with other  products, and could distribute it through an existing salesforce that was highly competent in selling the enterprises.
In contrast, a new startup focused on in-person events would likely not be a threat in the near-term, and would likely not be a significant challenge given Eventbrite's significant shared capabilities in distribution and network effects.
High competitive urgency is work that helps respond to a serious competitive threat, as in the case of Microsoft's launch and expansion of Teams. A low competitive urgency situation would be one where competition is minimal or non-existence.
Leadership often develops expectations about specific product work, specifically when certain features, products or markets should be launched. As a product leader, you need to understand if your product work has a leadership time horizon. Product work that has a short leadership time horizon will likely be high urgency.
For example, as Snapchat's popularity grew, specifically in its Stories feature, Facebook's leadership began to take notice. After Facebook unsuccessfully attempted to acquire Snap, Facebook launched a Stories feature in Instagram, Facebook and WhatsApp, driven by leadership expectations.
Now that you've evaluated your product work on impact and urgency, we need to map them into a 2x2 of impact vs. urgency in our product sequencing matrix.
On the y-axis, we have our impact score, and we have our urgency score on the x-axis. By building out this 2x2, we get four quadrants that map to the four categories we want to bucket our product work into. Cornerstone work, non-essential, important but flexible and supporting work.
Let's walk through these four buckets using Tinder as an example -- thinking specifically about the start of the COVID-19 pandemic, when many companies needed to rapidly change their priorities and develop new workplans based on those priorities.
The cornerstone work for Tinder would be adding a minimum viable video chat feature to the app. This work is high-impact because it's necessary to prevent users from leaving the app for other products that had video chat. The work is also high urgency due to competitive pressure.
Now, let's look at an example of non-essential work at Tinder. As part of the video chat feature, one of the PMs on your team suggests supporting the ability to video chat in both portrait and landscape orientation. Although, this feature would be nice to have, it is non-essential. The ability to change orientation is unlikely to change the number of people engaging with video chat. In addition, the feature is low urgency, because there is no need for that feature in a particular time-frame.
Tinder's profile consists of primarily static photos. Someone on your product team suggests that Tinder should add video profiles. They hypothesize that people will be more likely to video chat if they can see a video profile first. In addition, other apps make it easy for people to share video of themselves. This work is important but flexible. The work will likely have a high impact, but it is not necessary to solve the immediate threat of churn facing the company.
In the Tinder example, a small number of bad actors will likely abuse the newly introduced video chat feature. The work to add trust and safety features such as user reporting and automatic detection of objectionable content fits our definition of supporting work. The number of people impacted is small, but Tinder cannot release video chat without the trust and safety features. Therefore, those features must get completed urgently.
However, if in the case that Tinder found users were not willing to try video chat without existing trust and safety features in place, then that feature would likely shift from supporting work to cornerstone work.
In our fourth step, it is the product leader's role to use the product sequencing matrix to evaluate the product work that came out of their ideation session. Product leaders could do this by developing a product workplan.
Having this product workplan is critical in ensuring that product leaders have a comprehensive view of how their product work supports key organizational priorities. And it ensures that they take longer-term view on what product work is important before building a shorter-term roadmap. However, if product leaders use this tool to inform their decision-making, they need to make sure that they communicate it to their team and leadership.
There are six elements of the product workplan: the product work description, the product work type, the sequencing category, the strategic priority, next steps, and the date that we're going to add this.
First is the product work description, which is an explanation of the product work idea. There should be a few words summarizing the idea.
Second is the product work type; this could be any of the four types of product work we previously covered, like feature strategy or growth strategy. A great product workplan will cover the different types of product work.
Third, is the sequencing category, which comes from our product sequencing matrix. As a reminder, there are four categories here: cornerstone, non-essential, important but flexible and supporting work.
Fourth, after documenting the sequencing category, is the strategic priority. Here, the product leader lists the strategic priority that the product work supports.
Fifth, is the next steps, which is what the product leader plans to do with the product work. There are four key options here.
We can include it in the current roadmap. This is often your cornerstone work, as it likely forms the foundation of the plan. Second, we can commit some capacity to validating or prepping. This is a great option where work is important, but not urgent, as you're able to incrementally make progress towards work that will drive results. The third is not scheduled, but put in the queue. This work will be addressed when there is an additional bandwidth, if often it is good for supporting or non-essential work.
And finally, we can deprioritize for the short-term. This often includes your non-essential work.
Once you fill out the next steps, you can go on to the last column.
This is the date you entered the product work into the plan. The date added allows you to track how long product work sits in your plan and could help you understand areas where you have not made progress.
In the next lesson, we'll cover the fourth phase in this plan, communicating and iterating on your product strategy.
Lesson Summary
In planning product work, product leaders often over-focus on short-term work at the expense of long-term growth. This leads to stunted performance and less compounding value. Detailing short-term work is the role of a product roadmap, but product leaders need to be thinking longer term in building their product workplan.
Focusing on short-term work at the expense of long-term value creation and capture often occurs based on how product leaders are evaluated. Many products are evaluated based on their quarterly or near-term progress and therefore, it's top of mind, but still great product leaders think long-term allowing them to accomplish more over that time period.
Developing a product workplan helps product leaders shift their focus from quarterly planning and roadmaps to a more long-term perspective on strategy, which helps teams create and capture value over a longer horizon.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
Introduction to Product Workplan
5 min
Identifying Strategic Priorities
8 min
Brainstorming Product Work
12 min
Developing a Product Workplan
21 min
Communicating & Iterating Your Product Workplan
11 min
BONUS: Case Studies in Long Term Product Evolution
47 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
11:00
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the previous lesson, we covered the third phase of developing and communicating a product workplan.
We walked through how to develop that product workplan by evaluating the impact of the product work, evaluating urgency, categorizing the product work by mapping your product work into a product sequencing matrix, and then leveraging your product sequencing matrix to develop the workplan.
We also looked at how to prioritize the work for your product roadmap using the six different categories within the workplan itself.
In this lesson, we'll cover the fourth phase: communicating and iterating on the product strategy.
After you've developed that workplan, your strategy work is not over. You need to get your leadership and team on board to successfully execute that workplan. After successfully executing your product workplan, your internal and external environment will change, leading to changes in your strategic priorities and/or changes in the impact and urgency of your product work.
To address this, product leaders need to first communicate their product workplan with their leadership and team. And second, iterate and refine their product workplan due to internal and external changes.
We'll start with communicating your product workplan.
In the previous phases, you've developed a lot of knowledge that won't be in your roadmap. Like the strategic priorities you've focused on, why they're important, what your approach to achieving them will be, and how and why you will sequence your product work. This will provide you with both the content and context to shape your product strategy communication.
Now let's get to how to present your product strategy to leadership. There are two primary considerations here. First, what to emphasize in your communication. And second, how to release that communication.
When product leaders communicate up, they need to focus on the how. When they're communicating down, they need to emphasize the why.
Communicating your product workplan up without identifying leadership's priorities could lead them to question your strategy, its assumptions and key decisions you've made. This could lead to a loss of trust in your ability to present decisions, specifically your strategy.
Instead, product leaders need to proactively address the needs of leadership, which include a focus on the question, "How?"
Communicating up is about using your product workplan to explain how you plan to execute against your company's priorities. Specifically, it should address three needs.
1
-Strategic Priorities: How will we reach the strategic priorities of the company?
-Product Workplan: How will your product strategy drive progress towards company priorities?
-Product Roadmap: How is your roadmap structured to reach your product strategy and ultimately company priorities?
Ravi says, "Product is one of the most important levers executives have to achieve the company's strategy. Great product leaders understand this. They don't just communicate their product strategy, they build confidence in it."
In contrast, not tailoring your communication to the needs of your team could lead to misalignment and could leave them without the necessary context to succeed in the role. Your team's primary needs are focused on addressing why decisions were made. This allows for alignment and allows them to understand your product workplan well enough to execute.
Communicating down is about using your product workplan to explain why they are doing the work they are doing. Specifically it covers these three needs:
-Why are these the strategic priorities and why are we working on these priorities?
-Why is this our product strategy?
-Why are we focusing on these types of product work? Why did we choose this sequence? And why didn't we plan to work on specific work that's not within the time horizon?
Product leaders often make one of two mistakes in releasing their communication.
First, through a Big Bang, or mass communication to team and leadership at the same time. A big bang occurs when a product leader shares the strategy with their manager, more senior leaders and all members of their team at the same time. This leads your direct manager and senior reports to feel bypassed by leadership and more junior team members, respectively.
The second is through a Blank Thud. This is delayed communication of the product strategy, or forgetting to communicate the strategy to all of the stakeholders. This causes your stakeholders to feel that they have not been involved in creating the product strategy, which could lead to a lack of alignment. Additionally, your stakeholders are likely to have feedback since you haven't heard them out.
Avoiding these mistakes means taking a deliberate approach to explaining your thinking. We call this iterative release communication. The idea is that like a product release you are ramping up to your customers. You want to start by communicating your product strategy to a small audience where you request the most detailed feedback.
Then, you thoughtfully released to progressively larger audiences and ask for less detailed feedback. This helps ensure you were getting audience feedback fit, or the right level of feedback from the right audience.
However, you both need to communicate the strategy up to those more senior to you and down to the rest of your team. This can look slightly different depending on where you sit in the organization but generally looks like this.
First, you want to engage with your direct supervisor and your immediate group leads asking for detailed feedback. This ensures that you don't go over your direct supervisor's head straight to your organization's leadership. In addition, you give your group leads an opportunity to shape the plan with feedback.
Then you progressively expand, first to a CPO up and your team leads down, asking for slightly less detailed feedback, more focused on high-level challenges they see.
1
Finally, you communicate with your whole leadership team and your entire team.
If you've successfully captured effective feedback up to this point, the feedback at this final phase should be more focused on clarifying, not changing the plan.
Your product workplan is a living document that is continually communicated over time.
Some product leaders think that they could put their product strategy on autopilot while executing. Doing this results in a few problems.
First, maintaining the product strategy when specific product work is underperforming or reaches diminishing returns. Second is outgrowing the strategy as the internal and external environment changes. And finally, firefighting by not anticipating problems that arise or mis-scoping updates to your strategy.
Great product leaders proactively iterate on their product workplan before their strategy reaches diminishing or declining returns. When iterating your product strategy, consider changes to your internal and external environment.
To stay ahead of changes in the internal and external environment,  product leaders need to first identify when to revisit their product workplan. And second, track trends in that product workplan.
Product leaders could identify when to revisit a product workplan by identifying two main changes: the strategic priorities and the charter principles.
First changes in strategic priorities mean that your overall product strategy is likely to change as you have a new north star, which you need to adapt your strategy to.
1
For example, Instagram launched IGTV as a long form video feature that could rival YouTube. As TikTok's popularity exploded through its viral short form videos, Instagram pivoted its focus to shorter videos by launching its Reels feature.
Second, changes to your charter principles could also lead to an update of your product workplan. Here you consider if your guardrails, lessons learned or capabilities that help inform that product work solutions have changed. If they have, it often means that how you reach your strategic priorities will change, and therefore, so will your product workplan.
For example, Instagram launched its Stories feature as a reaction to Snapchat's Stories feature. Initially, Instagram's version was similar to Snap's, in that it focused on creating great images through photo editing. Instagram's team decided instead to leverage a charter principle that likely was more about community and social interaction. This led Instagram to make several changes to make Stories more social, like allowing users to tag one another.
Product leaders also need to track trends in their product workplan to identify and resolve problems that could derail the strategy. We can look at the evolution in our product workplan to identify trends that can mean your product strategy should be refreshed. There are a few different trends here.
The first is firefighting where most of your work is in the cornerstone work category. The second is a one-dimensional workplan. The same type of product work frequently dominates that cornerstone work category. Or third is stagnation, work that stays in the category for multiple time periods.
Firefighting occurs when you don't proactively invest in important-but-flexible and supporting work. And therefore, everything feels important and urgent.
The way out of this as ensuring some time is allocated to important but flexible and supporting work.
Important but flexible work can be broke up into manageable chunks of work or teams can allocate time to prepping and validating ideas for that work so that if it ever becomes urgent, you're more prepared for it.
Let's look at an example of important but flexible work that became cornerstone work at Facebook. After the Cambridge Analytica scandal and increased misinformation, Facebook prioritized user scaling work to improve privacy, content moderation, and trust and safety.
To avoid firefighting with supporting work, you can add this incrementally to the queue to be addressed whenever the team has additional time.
A one-dimensional workplan occurs when your product workplan is over-focused on one type of product work, suggesting that you're not adding diverse value to your product work over the long term.
To address this product leaders diversify the types of product work included in their workplan. There are time periods where a product leader decides to over-focus on one type of product work, where that is the highest leverage work and they choose to double down on it.
Product teams tend to fall prey to: "If the only tool you have is a hammer, treat everything as if it were a nail." Hypothetically, this could happen when a feature team thinks of every product problem in terms of adding new features without improving existing features or addressing other types of product work. This results in a strategy that incrementally drives performance.
Stagnation happens when work stays in a quadrant for multiple time periods.
Signs that this is occurring is that there are delays in finishing existing work and/or delays in starting planned work. There are cases where you could face delays in a specific initiative.
But when you find that product work is included in your product workplan for more than two time periods without significant progress, it could be a sign that you are either 1) not categorizing your product work properly or 2) not executing well on your plans.
To address these problems, reevaluate the product work and make a plan to move forward by either reclassifying it as supporting work, in which case you deprioritize the work, or develop a plan to execute on the product work.
Hypothetically, stagnation could occur when a team has delayed important scaling work for multiple quarters. If left too long, this work could become cornerstone work and lead to firefighting.
This wraps up Product Strategy. We hope you enjoyed the program.
Lesson Summary
After you've developed that workplan, your strategy work is not over. You need to get your leadership and team on board to successfully execute that workplan. After successfully executing your product workplan, your internal and external environment will change, leading to changes in your strategic priorities and/or changes in the impact and urgency of your product work.
To address this, product leaders need to first communicate their product workplan with their leadership and team. And second, iterate and refine their product workplan due to internal and external changes.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
57 min
BONUS: Case Studies in Long Term Product Evolution
Bottom-Up SaaS: Slack
10 min
B2B Multi-Product: HubSpot
9 min
Product Segmentation: Match Group
9 min
Social Network: Pinterest
8 min
Marketplace: Airbnb
11 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
9:58
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In this lesson, we'll walk through an example of an evolution of a product portfolio in the bottoms-up software space. Specifically, we'll walk through Slack's pathway from product market fit to today.
This is not a strategic playbook, but general principles for how Slack successfully manages portfolio of product work. We'll first provide context on Slack as a business, then we'll walk through the stages of Slack's journey as a company, and then we'll lay out the key takeaways.
We've used Slack as an example, a lot in this course because they had been one of the most successful bottoms-up SaaS companies. Slack is a collaboration tool that allows users to message within and across companies. It was founded in 2013 by Stewart Butterfield, who was previously a co-founder at Flickr. In 2020, the company reached 12 million daily active users across the world.
The bottoms-up SaaS strategy Slack used is where a product is introduced to individual customers who adopt the product and help drive broader adoption in a larger team or organization.
Historically, SaaS businesses focus on the top down approach, where they pitch to C-level executives and other customers who made decisions to purchase software. This often leads to software being designed for these folks rather than the actual end users. Examples here would be Salesforce, Workday, Concur, or WebEx.
Bottoms-up SaaS companies instead look to build the product for an individual end user and use those users as entry points into teams, companies, and entire enterprises. An example of this is Zoom. They've leveraged variations of viral loops to grow both across and within organizations, until it reaches a tipping point where leadership adopts for the entire company.
Slack though went through four major stages of evolution in executing their broader product vision and portfolio.
The first was viral growth, where they focused on end-user adoption in getting the value proposition right. The second was an integration driven platform where other tools could integrate to Slack to extend all of its functionality. The third phase was up market expansion, as Slack expanded to meet the needs of very large enterprise customers. And four, increased cross side network effects, where they built functionality between companies and accounts.
Let's look at each of their phases of development in a little bit more detail.
The first phase was viral growth. Initially, Slack was focused on delivering a great messaging experience for knowledge workers. It focused on serving that use case very well. Slack leveraged a freemium model in which there was a free tier to unlock these viral loops. By delivering a great messaging experience and leveraging a freemium model, Slack was able to grow virally.
At this phase, Slack leveraged and sequenced multiple variations of an organic viral loop. They initially started with very strong word of mouth for its initial set of customers, that then quickly sequenced into an organic viral loop where one team member would invite another team member. One of the keys was that the viral loop in the early days not only spread it internally within an organization, but also across companies in a couple of different ways:
First, there were a lot of cross-company groups -- like open-source communities -- that adopted Slack early. This helped spread the product of Slack from company to company. In addition, many users who adopted within one company would then become creators of new Slack's team accounts in other companies.
The strong virality allowed it to gain a foothold across a huge variety of businesses and start to move past early adopters like engineering and startups to other departments and companies.
As the initial product grew virally, Slack started to execute the second phase of their product vision and portfolio, becoming a platform.
This is something many companies try to do, but fail at.
Most fail because they try to build the platform before they have anything meaningful to offer their developer partners -- namely, not enough user scale or opportunity for distribution.
The unique thing about this transition in Slack's case is they were able to do it with a single core product. Most bottoms-up SaaS companies, particularly as they try to build a platform, need to introduce multiple products to meet the needs of different users and grow to enough scale to incentivize developers. However, Slack was able to execute this strategy with a single product due to a few different factors.
First, the market they were creating, a replacement for email, was growing so quickly that they didn't need to turn to new product lines to enable the growth needed to attract developers. When your market is growing by double or even triple digits, then your existing core product is as good as any to focus on.
Second, there was still significant expansion opportunity by moving horizontally through other departments and charging on a per seat basis. The opportunity was so large that Slack did not need to launch additional products to increase the average revenue per user.
And then the third thing was that the needs of their users were relatively consistent for different user types. This allowed them to meet the needs of different types of users (consumers, teams, and even some enterprises) by adding features vs. having to add entirely new products.
But Slack knew it wanted to be able to replace email as the long-term product vision. One of the reasons email was so embedded in organizations is that it's interconnected to a variety of other tools. Email platforms like Outlook or Gmail have calendar functionality, room booking functionality, ability to host video conferences, and a lot more built in.
Slack decided it did not make sense to build all of those features out themselves. Slack instead focused on integrating with the best tools that already existed. This helped them build integrated functionality while still being able to focus their limited resources on their core product. It also capitalized on the trend away from suites and bundles, and towards a world where many companies use a variety of different tools.
Slack initially built "first-party" integrations with the apps they deemed most important -- products like Zoom, Google Docs, Trello, Dropbox, Salesforce, and others. In these cases, Slack was the one that took on the work for the integration, in order to jumpstart the platform ecosystem.
But in addition, they built a platform to empower the longer tail of third-party developers to create new functionality. For example, Polly for native polls, and Donut for employee onboarding.
As they did this, it changed some needs in the core product. Primarily, Slack needed to adapt their onboarding and build features in the product to make these integrations easier to install and use. Integrations were difficult to find in Slack. For example, for Giphy, the integration that allowed users to add gifs into channels, users needed to use the slash command and type "giphy." This was not intuitive to discover for most users, and instead, users had to learn about this feature through sharing.
So not only did the platform expand product market fit, but it did increase and place new needs on feature and growth work within the core product.
Key features Slack built to improve integrations included the Block Kit to add new ways of interactivity in the apps; the App Home, which allowed apps to have real surface area in the product; and the Workflow Builder, to allow simple integration to be built without code.
Having an integration platform then helped Slack push to monetize its product better by converting free users to paid. Integrations became an essential part of the paid plans. Teams can only use 10 integrations, so as the platform became more powerful, and teams used more and more integrations, they were more likely to pay for Slack.
With a platform in place that was meeting the needs of individual teams and even small and medium-sized companies, Slack looked at a third stage of their evolution by expanding upmarket. This meant building out the functionality needed to serve enterprise clients.
One of the interesting takeaways was that this upmarket expansion was a true expansion and not a pivot. Most companies pivot up market, meaning they deprioritize their consumer product and focus more exclusively on the enterprise as the core of the business.
However, Slack still relied a lot on SMB virality as part of their growth model. So they had to maintain focus on both their SMB users and their enterprise customers.
Maintaining both of these is a challenge, and to do it, Slack built as unified a product as possible. The product scaled as you went up market, and there weren't totally different versions of Slack for small and large businesses, as we see with some other products. This means that for a vast majority of the product, 80% or more, the product is exactly the same. The main differences are grid (which enables multiple workspaces) and more admin controls, security compliance, and other features.
The final stage of Slack's evolution towards its product vision was increasing network effects.
Slack has successfully built a core product that drove connectivity and network effects within companies, but the team saw an opportunity to deepen the ways users could use Slack to communicate across companies.
Slack first launched the guest user feature, which allowed Slack users to add external folks to engage within their network. This helped build cross-company network effects initially.
Then Slack launched the Shared Channel feature, which allowed users to create channels with both internal and external company users. This simplified that cross-company collaboration.
And then finally, Slack sequenced it by launching Slack Connect, allowing two companies or more to interact directly within a channel. This enabled complex multi-party collaboration use cases like enterprise vendor relationships, and fundraising, and community building.
1
Fareed Mosavat, the former director of product at Slack, says: "If we could do it all over again, we might have tried to build more network effects earlier. But in retrospect, focusing on creating a secure product that had the same private feel as email may have helped us in our early stages."
It's important to recognize here that these sequencing decisions never feel obvious in the moment, and that's what Fareed is pointing to in this quote. It requires a lot of strategic thought and foresight, and even with that, you'll never get it perfectly correct.
Fareed concludes by saying that while they shipped thousands of improvements and features at Slack over the course of the last five years, most of Slack's success can be attributed to just a few key strategic initiatives.
It's important to continually improve your product for your existing customers, but great companies spend the bulk of their resources on figuring out how to extend their strategy.
Lesson Summary
Slack though went through four major stages of evolution in executing their broader product vision and portfolio.
The first was viral growth, where they focused on end-user adoption in getting the value proposition right. The second was an integration driven platform where other tools could integrate to Slack to extend all of its functionality. The third phase was up market expansion, as Slack expanded to meet the needs of very large enterprise customers. And four, increased cross side network effects, where they built functionality between companies and accounts.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
57 min
BONUS: Case Studies in Long Term Product Evolution
Bottom-Up SaaS: Slack
10 min
B2B Multi-Product: HubSpot
9 min
Product Segmentation: Match Group
9 min
Social Network: Pinterest
8 min
Marketplace: Airbnb
11 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
8:55
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In the previous lesson, we walked through how Slack has executed its product vision by managing its portfolio strategy.
In this lesson, we'll look at a company that executed a B2B strategy where a portfolio of products was developed to expand usage and growth within a company, and then ultimately expanded to a bottoms-up product-led motion.
HubSpot is a cloud-based provider of marketing, sales, and customer support software. It was founded in 2006 by Brian Halligan and Dharmesh Shah. In 2020, the company reached over 86,000 customers in over 120 countries.
HubSpot executed a strategy where they expanded their product lines to iteratively meet the needs of broader and broader audiences, culminating in a full-service platform. That's allowed them to increase their ability to attract larger and larger accounts at larger companies, and ultimately build an app marketplace to improve functionality across their entire user base.
In this strategy, there's a consistent pattern of launching a product, growing the product, expanding product-market fit by planting new seeds, and then growing that new product, repeating all the steps of the cycle. This constant cycle of planting product-market fit expansion seeds, growing them, and then replanting new seeds helped HubSpot build a comprehensive platform that covers a bunch of core use cases around sales, marketing, service, and customer support.
There were eight different phases of HubSpot's evolution to what it is today. The first was building an initial inbound marketing tool. Then transferring to an all-in-one marketing tool to help dominate the mid-market audience segment. Then they went after an attempt to build a platform. Then they did a mid-market expansion into the sales and CRM space. Then they expanded up, down, and international. Finally, another mid-market expansion into customer support. Then a more successful attempt at a platform app marketplace, and finally, another mid-market expansion into the CMS space.
Let's dive into each of these with more detail. HubSpot started by building an inbound marketing tool that helped companies with their CMS, blogging, SEO, and social needs. This was a paid tool, with no free option, and HubSpot here executed best-in-class growth strategies.
They specifically leveraged an inbound sales motion that combined a company-generated content loop to generate leads and a sales loop to close those leads into customers. During this phase, a number of features were added to the platform.
So during this time, the primary work was feature work in the product to extend functionality around the inbound marketing use case.
But this brought them to phase two, around 2010,-2011. It was a turning point focusing on an all-in-one marketing platform.
The key to entering this phase was building out robust functionality for email automation. This enabled them to create a critical mass of tools that had a compelling value proposition for the mid-market companies.
For the new product offering, HubSpot combined all of its tools and capability into an all-in-one marketing tool. That shifted HubSpot's product from being used for one type of marketing, inbound marketing, to replacing their entire suite of marketing tools across email, social, CMS, SEO research, and more.
This led the company to really dominate the all-in-one positioning, which was a critical differentiator for them because it was a distinct problem in the mid-market that other segments did not have at the time.
One of the core pain points for the mid-market VPs was that they were always in between not having large enough teams and large enough budgets. So they hated to have to adopt a bunch of different point solutions and try to cobble them together.
The enterprise market, though, did not feel the same pain, because they had the resources. So they tended to go for combining best-in-class specialized tools, such as Marketo for email or Hootsuite for social.
On the other end of the market, owners of very small businesses didn't have the need for all of these tools that were within the marketing platform for HubSpot. They tended to only need one tool, like Mailchimp for email.
HubSpot's continued focus on the mid-market segment allowed them to build a very specific product that was not for other market segments. That's helped them differentiate from other businesses who are competing in the enterprise market, like Marketo.
At the same time, this focus allowed them to layer on a new type of growth loop, a value-added reseller program. This program enabled thousands of marketing agencies to resell HubSpot as a tool, accelerating HubSpot's growth even further.
In this phase, they were able to increase monetization by introducing a series of add-on features that solve the more specific needs like ad tracking, reporting, and more.
Around this time, HubSpot attempted to build its initial version of a platform around its marketing tool.
However, like many companies at this stage, HubSpot struggled to build a platform with enough of a value proposition for third-party developers. It didn't really have the size of customer base yet to truly attract them. Once the team recognized this, they paused their investment in building this platform and refocused on growth and expansion.
Instead, we did a limited number of strategic partnerships with tools that were deemed critical to the target audience. This primarily included Salesforce, Zendesk, and a few others.
The next phase was expanding the mid-market focus to add capability for adjacent users, particularly functionality for sales teams.
In this phase, HubSpot leveraged product-market fit expansion work to create new products for adjacent users within this same mid-market target segment. Sales and CRM products were the logical adjacency to pursue, given how integrated sales efforts were with marketing.
The complementary products of CRM and sales acceleration tools created this virtuous adoption cycle. A customer might enter through the sales tool, but then adopt the marketing tool or vice versa. The company accelerated both acquisition and retention as a result.
With some of these adjacent users attracted to the platform with its complementary products, HubSpot then turned their focus to three additional types of product-market fit expansion work: moving up-market, down-market, and international.
All of HubSpot's products launched an enterprise tier and a free tier, helping segment the users and allowing them to reach an even broader segment of the market. Their free tier allowed them to begin to execute more of a bottoms-up product-led motion, similar to Slack. They were no longer a mid-market-only company, and now could span the needs of many different company sizes.
In addition, at this stage, HubSpot looked to increase their investment in product-market fit expansion, particularly international expansion. This included Southeast Asia, Europe, and South America as the initial starting points.
HubSpot had to adapt its product as well of its growth model to local market needs. For example, in Germany, online content was not trusted at the time that they entered that market. This impacted the growth model of the company-generated content loop. Instead, HubSpot had to replace that loop with other sources in order to generate the growth model.
Shifting up, down, and international was a very different product-market fit expansion process from layering on adjacent products. You need to approach these types of work from very different places.
As HubSpot entered the sixth phase, it was similar to the fourth. In the fourth phase, they layered on a new sales product. And now they continued to build on top of that by layering on a customer service product. By layering on this adjacent product, it continued to bolster that virtuous adoption and retention cycle that we talked about further.
Finally, as we moved into the seventh phase, the combination of expanding to adjacent products, such as sales and customer support, as well as the international expansion and movement up and down market, finally gave HubSpot the critical mass of companies and users that enabled it to build out a more robust platform and marketplace.
1
Therefore in stage seven, they launched an app platform and gave third-party developers the opportunity to build tools off their products. This enabled HubSpot to cover a variety of niche cases beyond the scope of their internal teams.
For example, HubSpot was able to expand its e-commerce capabilities through integrations, with things like AdRoll or WooCommerce.
HubSpot continues to grow and add new products today, always looking for the next major adjacency to build for.
Most recently, they spun out their CMS feature into a standalone product called CMS Hub. It's a very similar move to what Facebook did with their Messenger product.
Overall, HubSpot has been very successful by focusing on getting the value proposition initially for their product right in a specific segment of the audience. This was critical in building a competitive advantage over competitors like Marketo and Pardot.
But by narrowing in that one segment and then building into adjacent products and enabling that virtuous adoption and retention cycle, HubSpot was able to better serve its target segment before expanding further up, down, and international.
Lesson Summary
There were eight different phases of HubSpot's evolution to what it is today. The first was building an initial inbound marketing tool. Then transferring to an all-in-one marketing tool to help dominate the mid-market audience segment. Then they went after an attempt to build a platform. Then they did a mid-market expansion into the sales and CRM space. Then they expanded up, down, and international. Finally, another mid-market expansion into customer support. Then a more successful attempt at a platform app marketplace, and finally, another mid-market expansion into the CMS space.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
57 min
BONUS: Case Studies in Long Term Product Evolution
Bottom-Up SaaS: Slack
10 min
B2B Multi-Product: HubSpot
9 min
Product Segmentation: Match Group
9 min
Social Network: Pinterest
8 min
Marketplace: Airbnb
11 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
9:09
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In this lesson, we'll walk through an example of the evolution of product work for a product segmentation strategy, looking at Match Group.
A product segmentation strategy is one where a company builds multiple product lines to serve a similar use case, but in order to attract different sets of users.
For example, Facebook's portfolio of apps -- Facebook, Instagram, WhatsApp, and Messenger -- serve related but complementary use cases.
Match Group is a great example of this strategy applied to the online dating use case. The company has 10.1 million paid subscribers globally. Match built and acquired a portfolio of companies and products that collectively account for about 80% of the online dating market, including companies like Tinder, Hinge, Plenty of Fish, and OkCupid.
Product segmentation strategies take an initial core product and then launch new variations of it designed for different adjacent markets. Doing this effectively means building products that minimize overlap, but successfully meet the needs of different users.
For product segmentation strategies, there are three major questions companies need to answer:
When to add new product lines?
When to build vs. buy?
How much to centralize strategy at the group level?
Match's evolution offers some interesting insights into these questions. Before we get into them, let's look through how Match evolved from its founding in the 1990s to today.
Match was founded in 1993, with the insight that personal ads in newspapers were going to move online as internet adoption increased. The core insight that more and more people will meet online has been a common thread throughout Match Group's multi-decade strategy. Match Group has grown by investing in the trend of online dating rather than any single product.
Match followed four major steps when evolving their product segmentation strategy: The founding of Match.com, shifting to mobile and the introduction of Tinder, adjacent user expansion, and then international expansion.
Match.com was Match's first product -- it was a desktop-first dating portal and one of the early pioneers of online dating. Match initially focused on building the value proposition of this product and differentiating it from competitors like eHarmony.
One interesting note is that Match Group both benefited from and helped drive growth in online dating. This is similar to the role Slack has played in workplace communication. Online dating when Match.com started in 1995 was not commonly accepted, therefore, a lot of Match's early effort was communicating the value proposition of online dating. They invested heavily in paid channels in order to build enough supply and demand needed for their portal to be effective. They also partnered with AOL and MSN to get more users used to the idea of online dating.
Then, there was a shift to mobile and the introduction of Tinder.
In 2012, digital products were shifting to mobile, and Match co-incubated Tinder with IAC. This enabled Match.com to continue to evolve its strategy and eventually bring that strategy to mobile while enabling Match Group to build an entirely new experience in Tinder. Tinder's visual location-driven experience and Facebook-enabled login brought a new demographic of young people into online dating.
The next phase was adjacent user expansion. Between 2009 and today, Match Group has targeted specific dating companies that are personalized to specific needs of users.
This includes the acquisition of People Media, which owns the site BlackPeopleMeet.com, the 2012 acquisition of OkCupid, the 2015 acquisition of Plenty of Fish, and the 2018 majority investment in Hinge.
The most recent phase of Match Group has been international expansion. To further their product market fit expansion, Match has most recently expanded into international markets, both through acquisition and internationalization.
They are adapting products for markets like India, Japan, Korea, and Brazil, and as part of this, they have acquired international dating companies such as Eureka, which runs the largest dating app in Japan, and Hawaya, a company adapting online dating to the cultural needs of the Middle East region.
Throughout this timeline, let's take a look at the three major questions we introduced for product segmentation strategies, starting with the first, when to add new product lines.
There are three major reasons to add a new product to an existing product line for a product segmentation strategy. The first is when there are tech changes, meaning advances in technology allowing for new functionality or use cases.
Match's launch of Tinder was a great example of tech changes. In the early 2010s, many products were shifting to mobile, and this offered an opportunity for some companies to launch different products, particularly products targeting younger mobile-first users.
Few companies successfully made the shift to mobile with their existing product and branding -- Facebook being a notable exception. In Match Group's case, it was unlikely the desktop Match.com would have had the same appeal to the mobile-first demographic, so the technological shift offered an opportunity to segment their customers and offer a specialized product to both their existing desktop customers and the new mobile demographic.
The second reason is when there's a change in user behavior or perception. As products grow, preferences diverge between your users, as we saw in our user scaling section. Match's acquisition of Hinge was a great example of a behavioral change.
Dating is an industry with such diverse preferences. Tinder is focused on fun and more casual relationships, while Hinge is "designed to be deleted," offering a more serious option for single users. By having both products, Match Group is able to cater to both preferences simultaneously, and often for the same user at the same time.
Ravi Mehta, the former Chief Product Officer at Tinder, says: "As great products fill user needs, new needs often emerge. For example, Facebook empowered people to share a forever timeline of photos and posts with hundreds of thousands of people. This solved a social need, but created a new need for a more intimate space. Snapchat was able to jump in and fill this new need with a product designed around ephemeral content and small group messaging."
Finally, Match's acquisition of Egyptian dating app Hawaya is an example of emerging user segments. Online dating is still very new in many more culturally conservative countries, and therefore, the needs of some regions are very different than what Tinder or Hinge provide. As these user segments emerge, they often need a fresh, localized approach to be successful. You can't just take what you have and change the language.
Let's look at the second major question, build or buy new products.
This is a topic we discussed in our product market fit expansion module, but is especially relevant for this product segmentation strategy. Part of the challenge of building a product segmentation strategy in an industry like online dating is that new needs emerge frequently and unexpectedly. A company like Match Group needs to be able to build for expected transitions, like the shift to mobile, but also recognize when new companies offer a compelling value proposition for a group of users for whom Match's products are not tailored.
The acquisition of OkCupid and Plenty of Fish, for example, brought in free, ad-supported models to capture a price-sensitive user segment. The acquisition of Hinge brought in users who were frustrated by Tinder-like casual dating apps. The acquisition of Hawaya brought in the specific emerging needs of a new Middle Eastern market.
Therefore, the acquisition of new product lines is helpful when there are specific skills and targeting you need to acquire or an established network of users you can continue to build on. Importantly, Match Group is able to quickly increase the value of companies that it acquires by leveraging its extensive knowledge and capabilities in the online dating space.
The last question, and one of the biggest differentiators in how different companies execute a product segmentation strategy, is how much to centralize strategy at a group level.Companies can fall anywhere between two ends of a centralized spectrum. High centralization is where the group level dictates strategy, marketing, product changes and more for each of its portfolio companies. Low centralization is where the group level has minimal influence and lets each individual company run and compete on how they see fit.
The downside of an over-centralized strategy is that it's usually slow to change and adjust and often struggles to develop tailored strategies to each of its product lines. Over-centralization often leads to coordination problems, which then lead to missed opportunities.
The downside of an under-centralized strategy is that multiple portfolio products can be competing for the same customers and overlap in their marketing and targeting. This overlap can cause inefficiencies and cannibalization.
Ravi Mehta says, "In most markets, it is better to have some strategic overlap that comes with under-centralization than to incur the tax of moving too slowly due to over-centralized decision making."
Ravi's sentiments align with Clayton Christensen, who we discussed in the product market fit expansion module, who explained that the key to fighting off disruption is to establish separate entities within a company, looking to disrupt each other.
A good example is Facebook. As it acquired companies like WhatsApp, Instagram, Oculus, and others, it generally defaulted to operating them as separate entities.
Historically, tech companies have been able to build fast-growing businesses based on a single product. However, as more people have moved online and competition has increased, a single product may not be able to be all things to all people. A thoughtful product segmentation strategy enables companies to better meet people's needs, reinforce core capabilities, and drive more sustainable growth.
Lesson Summary
For product segmentation strategies, there are three major questions companies need to answer:
When to add new product lines?
When to build vs. buy?
How much to centralize strategy at the group level?

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
57 min
BONUS: Case Studies in Long Term Product Evolution
Bottom-Up SaaS: Slack
10 min
B2B Multi-Product: HubSpot
9 min
Product Segmentation: Match Group
9 min
Social Network: Pinterest
8 min
Marketplace: Airbnb
11 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
7:35
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In this lesson, we'll walk through an example of the evolution of product work for a social network. Specifically, we'll walk through Pinterest's pathway from product market fit to today.
Social products are an interesting category because over time, their value proposition evolves in a unique way. Most of these products start with the standalone value proposition, independent of its network.
Pinterest's early value proposition was the ability to pin content to collect and reference things of interest.
Over time, it layered on additional network-based value as its user base grew. First, users were able to share content with friends, giving users an interactive multiplayer mode.As the network grew further, Pinterest was able to layer on a data-based value by providing recommendations for all of the best content on the web based on the data it had from all of its users.
This is similar to the evolution of a product like Instagram.
It started off as a photo tool, allowing users to take and edit pictures in a simple way. It then layered on a sharing feature, allowing users to browse and interact with friends photos. And finally, it was able to leverage a lot of data to recommend the best photos for you from its entire user base.
However, as products grow, these evolutions come with key decisions and trade-offs, like how do I prioritize the user experience vs. the quality of data the product or others can leverage? Or, how do I expand my network of users while maintaining the product's core value proposition? Or how do I monetize the different value propositions I'm creating?
Pinterest went through six main stages. The initial functionality and tool, the shift to Facebook Open Graph as a social network, SEO, a data network effect and content network, internationalization, and monetization.
Pinterest expanded product market fit by putting together the right combination of features that allowed users to bookmark content easily online. Similar to other examples we've discussed like Match and Slack, one of the big challenges in this phase was normalizing the idea of pinning content.
Pinterest relied on a lot of grassroots marketing and word of mouth loops. This helped create a small group of power users that Pinterest was able to leverage in their marketing, particularly in a community of craft creators.
Additionally, they launched initiatives like the Pin It Forward campaign to educate people and others on how to use Pinterest's pin feature. However, there was a ceiling to these individual marketing efforts in expanding its user base, bringing us to phase two.
In phase two, Pinterest piggybacked on Facebook's Open Graph.
Open Graph was a Facebook API launched in 2010 that allowed you to connect your product to Facebook and let you get information in and out of Facebook.
This allowed Pinterest to share every piece of content you pinned to your Facebook feed, so all your friends would see.
Pinterest also used Facebook Connect for all sign-ups, so you connected with Facebook friends on Pinterest to see what they were pinning.
By leveraging the Facebook network, Pinterest was able to accelerate a user generated content loop. This was effective because the Facebook connection allowed users to distribute the content they were pinning to their connections.
With Facebook Open Graph and Facebook Connect, Pinterest was able to shift the primary value prop from pinning content from the internet to viewing content from friends on Pinterest. This was the classic transition of coming for the tool and staying for the network.
However, Facebook began to add API restrictions that reduced the visibility of Pinterest content in users' Facebook feeds. So Pinterest shifted to an SEO driven growth approach.
This leveraged a similar approach to their user generated user distributed loop, but now Pinterest focused on getting the content created by users indexed in search engines.
However, this shift came with pros and cons. Pinterest was no longer as dependent on Facebook's network, but this new SEO loop was primarily driven by people searching for specific topics rather than discovering multiple topics.
Therefore, Pinterest saw its acquisition growing, but their retention began to decline, as these users didn't have many connected friends or what their friends were pinning did not match the initial use case from SEO.
However, this phase allowed Pinterest to start to build a critical mass of users to begin to leverage more network effects to improve the value proposition of the product.
This allowed them to enter the fourth phase, a data network value.
Pinterest built larger data network effects, allowing them to use their community data to start to drive more tailored recommendations for users. This shifted discovery from social learning, learning and sharing with friends, to discovery based on interests. This improved retention overall.
Acquisition continued to grow and retention now began to improve. However, this increased network size came with costs. Pinterest began seeing a lot of unintended use cases and bad behavior and had to dedicate significant resources to proactive moderation strategies.Spammers got increasingly sophisticated at pinning content to reach Pinterest audience. Content sites started manipulating pinning behavior and imagery titles to drive clicks from Pinterest to their sites. Pinterest had to invest more in spam prevention and more sophisticated search and discovery algorithms to combat this.
Now with an evolved value proposition and large base of users, Pinterest began expanding their product market fit through internationalization. Pinterest found that it couldn't start just expanding internationally since its growth loops depended on content creation and distribution, all of which was in one language and from one cultural context. Therefore they had to put insignificant work to incentivize new content creation in new markets and customized content people saw based on their location.
As a result, local teams built relationships with local brands to generate inbound links for SEO purposes and to bootstrap local content. They had to localize all of the feeds for each language in addition to making sure that the core product was translated well. The pins and boards analogy didn't translate well for many other languages.
Casey Winters points out, "We couldn't just start showing Europeans recipes with tablespoons and pounds as the unit of measurement. They just got frustrated."
He also said, "When we talked to French people about Pinterest after they tried it, they would say things like 'I can read English, but I don't want to.' We hadn't done a good job of localizing their feeds to local content."
Finally, Pinterest needed to explore how they were going to monetize their product. There are really three options to monetizing a social product like Pinterest: ads, subscriptions, or commerce.
Advertising is one of the simplest in terms of functionality, allowing ads to go into the existing product. This is why social products like Facebook, Pandora, Instagram, Credit Karma, and many others have started with ad-based monetization models.
Casey says, "You really need about a hundred million monthly active users to make ad models work, unless you happen to be in an industry with uncannily high costs-per-click, like pharma products."
Ad-based models just don't happen overnight, though. First Pinterest had to start by going after marketers' experimentation budgets, the budgets they use for unproven channels. Over time, they were able to layer on self-service functionality and finally layers of measurement, and analysis, and targeting tools to make the ad model work more at scale.
Today, Pinterest is building more and more commerce functionality to supplement its ad model by allowing users to purchase items in the product, as Instagram has also done.
One of the key takeaways of this strategy that has allowed Pinterest to grow to be a $40 billion public company is its focus on the user. As the value of the network data grows, many companies get over-focused on promoting and building the product around the data, not the user.
A good example of this comes from Foursquare. Foursquare built a popular social product allowing users to check in and review different locations. However, they quickly realized the value of the data they could provide to restaurants and other establishments, and begin to focus heavily on growing the data they could sell.
Ultimately, the user experience began to suffer and Foursquare was left with a lot of data that wasn't getting refreshed by users, leaving their data stale and creating a vicious cycle where the value proposition to users and to merchants declined rapidly.
Organizations need to put their user at the center of their product and allow the community and the data produced to build around the user.
Alex Zhu, TikTok's founder, explains this. He says, "Before you have critical mass of users and content, you need to focus on utility, and then once you have enough users, you can start building a community around it."
Lesson Summary
Pinterest went through six main stages. The initial functionality and tool, the shift to Facebook Open Graph as a social network, SEO, a data network effect and content network, internationalization, and monetization.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
57 min
BONUS: Case Studies in Long Term Product Evolution
Bottom-Up SaaS: Slack
10 min
B2B Multi-Product: HubSpot
9 min
Product Segmentation: Match Group
9 min
Social Network: Pinterest
8 min
Marketplace: Airbnb
11 min
BONUS: Module Recap
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
10:52
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
In this lesson, we're going to look at the evolution of product work for Airbnb, to illustrate one successful long-term marketplace strategy. As we've mentioned before, this isn't necessarily a replicable playbook, but an overview of how Airbnb focused on different types of product work to evolve their product strategy over a long-term horizon.
Airbnb is a well-known company and one of the most successful online marketplaces. It was founded in 2008. In 2020, the company offered more than 7 million accommodations in over 220 countries and regions.
Like many marketplaces, Airbnb succeeded by narrowing its scope on specific users and expanding its geography and functionality over several iterations.
However, Airbnb truly separates itself from other marketplaces in their ability to consistently create a highly successful value proposition at each iteration.
Airbnb went through five major stages that we're going to discuss in this lesson. The first was a local market focus, establishing a solid foundational value proposition. The second was the growth phase, expanding that value proposition to new markets and new customers. The third was layering on new acquisition channels, adding new approaches to acquiring users. Fourth, moving up market in an up-market expansion, and finally, establishing new product lines with varying degrees of relation to their core booking product.
Let's start with the local market focus. One of the challenges of getting a marketplace started is reaching marketplace liquidity. This is the point where there is a sufficient supply and demand to create value for both sides of the marketplace. In Airbnb's case, guests and hosts. In order to do that, Airbnb started focusing on one market, New York City. This allowed them to build a critical mass of guests and hosts to start to add value to each other in a key city in global tourism.
A lot of marketplaces fail by trying to build a product that can scale immediately, meaning building functionality that is applicable to and replicable against several geographies all at once.
Airbnb took a different approach and did a lot of non-scalable work to get the product off the ground. They identified that quality photographs were key to getting listings booked, and so the founders famously went around and took professional photos of different listings.
They identified target customers very specific to their focus market of New York. Instead of trying to create a value proposition that worked for everybody, they started by learning that one of the key segments who got value from their product were musicians who travel frequently and had their homes available to rent often. They were then able to tailor outreach messaging and value propositions to those to start building marketplace liquidity.
They applied similar lessons to building supply for experiences. Launched in about 20 cities to start, all supply was hand chosen, with a focus on exclusivity to start.
Once they had established a solid value prop in New York City, they started to focus on growth.
The initial Airbnb experience was incredibly clunky in a few different ways. Users had to submit messages to many hosts hoping one would respond, users couldn't pay for their booking on the platform, hosts didn't have protection in the event that their home was damaged, listings were often limited to shared spaces, and guests did not initially know if they could trust the accuracy of various listing qualities.
Therefore, this phase was about reducing the friction in the product for guests to find and book and hosts to list.
They invested in ways of increasing hosts' ability to list their homes and get them discovered by scaling the photo program to let hosts get professional quality photos of their listings, launching host guarantee programs, insuring hosts for up to a million dollars in damages, adding trust and safety features like background checks, collecting details about all the amenities that guests would potentially care about so that guests could make more informed decisions, and creating incentives for employees to book new listings to get reviews where there were none.
They invested in making the experience as frictionless as possible for guests as well. They invested in search and ranking algorithms, created a Superhost program, and built rating and reviews products for listings to give more visibility into listing quality.
One of the biggest changes they made was creating the instant book feature. As Airbnb helped increase the ease with which guests could book stays, they also found that the number of cancellations increased dramatically.
They wanted to be able to offer a low-friction experience for users, but so much of Airbnb's booking was relational -- a person-to-person discussion concluding with a booking decision.
Part of Airbnb's growth was moving from that relationship business to a transactional business, which meant replicating the ease of booking that hotels have. To do that, they created the instant booking, allowing users to book and confirm instantly.
In order to get hosts' buy-in, they offered several incentives to hosts who adopted Instant Book. For example, Airbnb boosted Instant Book listings in search rankings and gave tools to hosts that allowed them to feel safer about turning on the Instant Book feature, like a verified ID.
The next phase, and somewhat concurrently with some of the growth initiatives, Airbnb looked to layer on new acquisition. Airbnb invested in improving four major acquisition channels.
First, scraping Craigslist to drive initial acquisition. They leveraged that Craigslist network to find folks that were posting short-term rentals to attract early hosts, helping bootstrap the network.
This is a common tactic, as other network-heavy businesses have always previously leveraged other existing networks in order to get theirs off the ground.
The second that they invested in were viral loops.
The first was primarily word of mouth, by creating an amazing experience and users telling others about their Airbnb experience. They crafted an incentivized viral loop, offering referral bonuses to the referrer and referree. They also enabled a social viral loop, allowing users to share itineraries with other friends within the product who would also be on the trip. They also created the casual viral loop to turning guests into host by nudging guests how much money they could earn while they were on their trip through the "What's My Place Worth" algorithm.
The third place they invested was through paid acquisition.
They invested in national advertising campaigns to drive brand awareness. The team was able to effectively invest in paid channels while outspending competitors, since the paid loop helped fuel word of mouth due to that 10X experience.
In a blog post about creating a 10X better experience, Sarah Tavel, a general partner at Benchmark, wrote that Airbnb was all about unique accommodations and it's cheaper than a hotel.
Finally, they launched city guides, which were host-generated guides to a local location. This helped improve SEO through content. Airbnb specifically targeted users higher in the funnel of trip planning for queries such as Things to Do in New York or Places to See in New York.
The team also developed an acquisition playbook for international cities. This playbook focused on three different drivers: search engine marketing; localization efforts; and local operation teams doing community engagement, local marketing campaigns and acquiring supply.
After layering on these new acquisition techniques, Airbnb started to move up market.
For a long time, Airbnb was seen as an alternative to hotels, a chance to book a stay in a more home-like environment at usually a lower cost. Airbnb's upmarket expansion aimed at putting them in a position where they were a direct competitor providing the same value prop as hotels.
They did this by improving the quality of listings by creating more incentives and requirements for Superhosts to maximize the quality of their existing listings. They invested more in structured feedback for stays, like how was the location, how clean it was, or how good was the host's communication, to fuel that inventory of high-quality listings. It also built tools for professional supply to come onto the platform. Instead of unique apartments in New York City, this group professionally managed vacation rentals in places like Hilton Head on the platform.
They also ended up acquiring Hotel Tonight, which allowed them to directly list boutique hotels, expanding the range of offerings they could provide and catering to people who wanted a more hotel-like experience and luxury retreats. This added high-end luxury inventory to Airbnb's offering over time. The third thing they did was adding boutique hotels to the listings, which allowed Airbnb to expand into a new segment of the market.
Airbnb isn't the only one who's done this in this type of space. Different companies look to expand upmarket in different ways. Many of them offer new brands or product lines in order to segment their product and clarify its value proposition. For example, Marriott has JW for its luxury hotels, Marriott for its baseline hotels, and Courtyard for is lower priced, lower-end hotels.
Airbnb expanded upmarket in two different ways. First, they expanded their Luxe category through the acquisition of luxury retreats. Stays in the Luxe category typically cost $10,000 or more. Guests often expect unique experiences, and Airbnb works in a non-scalable way to address these needs. This allowed Airbnb to compete in a higher margin low-volume segment.
Second, Airbnb launched Airbnb Plus, which created a middle tier between regular and Luxe. In contrast, stays per night cost about $250. The team ultimately did not expand this program, as they found that it did not offer a strong margin-to-volume trade off.
This takes us to Airbnb's fifth and most recent phase of evolution, launching new products.
This fifth phase involves launching new products, such as Experiences, which were customized experiences through Airbnb hosts; directing more attention to long-term stays, bookings for one month or longer; as well as boutique hotels.
After nailing that initial core use case, building a growth engine, and improving user experience, Airbnb decided to expand into these adjacent products and offerings.
Airbnb leveraged the existing cross-side network effects across guests and hosts, as well as the ability to delight users in launching new offerings.
For example, many startups have failed in offering experiences to their users because retention for low-frequency events, like travel, make it hard to build loyalty. Airbnb leveraged its existing network of guests and its brand to grow Airbnb Experiences. They focused on the "attach rate" for guests to drive liquidity in the marketplace, which created supply for that new Experience product.
Airbnb is an interesting case of a marketplace that has successfully managed a marketplace that has both exclusivity elements and comprehensiveness.
Casey Winters says, "There are two ways to build a marketplace, have something exclusive or have everything. Either you offer something unique relative to your competitors or you offer more selection. It's pretty rare to see a company do both."
Airbnb started with exclusivity, they created a unique experience at a lower price and focused on managing that supply and managing it well. This was able to create a foundation on which they could expand and expand their offering to start to have more selection and comprehensiveness than their competitors. Doing this allowed them to be one of the few marketplaces that offers both exclusivity and comprehensiveness in their market.
1
That's it for portfolio management. In the next module, we're going to dive into our third strategic enabler, organizational management.
Lesson Summary
Like many marketplaces, Airbnb succeeded by narrowing its scope on specific users and expanding its geography and functionality over several iterations.
However, Airbnb truly separates itself from other marketplaces in their ability to consistently create a highly successful value proposition at each iteration.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Overview
Contents
The Product Workplan
57 min
BONUS: Case Studies in Long Term Product Evolution
47 min
BONUS: Module Recap
Recap: Developing & Communicating Product Workplan
7 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Developing And Communicating Your Product Workplan
Share
Dashboard
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
6:50
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
There are four types of product work: feature strategy, growth strategy, product-market fit expansion strategy, and scaling. Each aims to create and capture maximum product value, after you reach product-market fit.
These four types of product work form the foundation of your product workplan, a tool to help you translate your strategic priorities into product work, sequenced over multiple periods of time.
In order to succeed as a product leader, you need to know how to bring these types of work together and communicate them effectively.
Most companies have an organizational strategy at the company level. This strategy is informed by strategic priorities, which are top-down priorities defined by leadership. The org strategy guides the overall business, and therefore, should also influence your product strategy.
Additionally, most companies also have a product roadmap, which articulates the tactical actions that a product team should take in the short term. A roadmap serves as a concrete set of actions that the team should take.
As a product leader, your role is to bridge these two together with a product strategy: something that looks into the future, but also informs your near-term roadmap.
A product workplan bridges that gap. This is a tool to help you translate your strategic priorities into product work sequenced over multiple periods of time.
There are four phases for developing a product workplan.
First, identifying the strategic priorities that are within your scope as a product leader.
Second, brainstorming product work by ideating and refining product work ideas that support your strategic priorities.
Third is developing a product workplan by categorizing the sequence of product work based on the degree of impact and urgency.
And finally, communicating and iterating your product workplan. This means aligning your product workplan with leadership and your team.
The key tool you leverage is the product sequencing matrix, where you categorize product work into four buckets based on their impact and urgency.
The first category is cornerstone work, which is high-impact and high-urgency product work. When building a roadmap, these are product work initiatives that you include first and often form the foundation for the strategy.
Second is non-essential work. This is low importance, low urgency work. Therefore, you can deprioritize or delay in cases where there is more important or urgent work.
Important but flexible work creates and captures significant value, but isn't urgent,
while supporting work is focused on the short-term and has lower impact. There isn't always a right answer here, but that doesn't mean that there isn't a good approach to thinking through it.
When they have to make important trade-off decisions and deprioritize supporting work, product leaders need to determine a mitigation plan that identifies:
What workaround or temporary solution can we use instead of prioritizing this work?
And how long are we comfortable using this mitigation before prioritizing the work?
When these two aspects are clear, product leaders protect themselves from future problematic work.
Sequencing product work is crucial to building a product workplan, and can happen in four steps.
First, evaluating the impact of the product work; second, evaluating the urgency of the product work; third, mapping the product work onto the matrix; and fourth, leveraging the matrix to develop a workplan. Let’s look at each of these steps in more detail.
In determining what is high impact versus low impact, there are four things that you should look for:
The upside. How many users will this impact, and how much value will it bring them?
Strategy Intersection. Does it support multiple priorities?
Compounding vs. Linear. Does the work create compounding returns?
And Differentiation. Does the work differentiate the company from the competition?
Next, evaluate how urgently each step needs to be executed. Product leaders need to understand the urgency of work, as there are cases where not doing product work at the right time could prevent future product work from succeeding, and derail the strategy.
After evaluating the impact and urgency of the work, you can map it onto the product sequencing matrix.
This is where you can visualize all the categories of work you need to do, organized based on their impact and urgency.
Lastly, it is the product leader's role to use the product sequencing matrix to evaluate the product work that came out of the ideation session. Product leaders could do this by developing a product workplan.
There are six elements of the product workplan: the product work description, the product work type, the sequencing category, the strategic priority, next steps, and the date that you’re going to add this.
After successfully executing your product workplan, your internal and external environment will change, leading to changes in your strategic priorities and/or changes in the impact and urgency of your product work.
Having this product workplan is critical in ensuring that product leaders have a comprehensive view of how their product work supports key organizational priorities. And it ensures that they take a longer-term view on what product work is important before building a shorter-term roadmap. However, if product leaders use this tool to inform their decision-making, they need to make sure that they communicate it to their team and leadership.
Communicating up is about using your product workplan to explain to leadership how you plan to execute against your company's priorities. Specifically, it should address these three needs: Strategic Priorities, Product Workplan, and Product Roadmap.
Communicating down to your team is about using your product workplan to explain why your team is doing the work they are doing.
Taking a deliberate approach to explain your thinking is called an iterative release communication. The idea is that, like a product release, you are ramping up to your customers. You want to start by communicating your product strategy to a small audience where you request the most detailed feedback.
Then, you thoughtfully release to progressively larger audiences and ask for less detailed feedback. This helps ensure you are getting audience feedback fit, or the right level of feedback from the right audience.
Your product workplan is a living document that should be continuously iterated and communicated over time.
To stay ahead of changes, product leaders should identify when to revisit a product workplan, and track trends to identify and resolve problems that could derail the strategy.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Traceback (most recent call last):
  File "C:\Software Projects\product-manager-companion\app3.py", line 56, in <module>
    file.write(text)
TypeError: write() argument must be str, not list
PS C:\Software Projects\product-manager-companion> python app3.py
Overview
Contents
From Product Management to Product Leadership
Crossing the Canyon
5 min
Portfolio of Product Work
8 min
Great Product Strategy
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Leading A Product Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
4:56
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Everyone seems to have their own definition of what product management is, and what successful product management looks like. We end up with a field full of confusing buzzwords and cliches.
This problem is intensified by the fact that product management job titles, descriptions and responsibilities just vary greatly across companies. A Product Manager at Airbnb is equivalent to a Senior Product Manager at LinkedIn, which could be a Principal Product Manager at another company, or Head of Product at an early stage company.
All of this just makes it really hard to pin down what success looks like at different stages of a product manager's career. And if you don't know what success looks like, that makes it really hard for you to navigate your product career effectively.
6
We set out to research the product function among leaders in the Reforge network, including VP and C-level product leaders at frontier companies like Airbnb, Facebook, HubSpot, Instagram, Tinder, Stripe, Eventbrite, Slack, and many more.
What we found is that regardless of job title, everyone identified a particular friction point in a product manager's career as they transition from an experienced product manager role, like a Senior PM, to a product leader role, like a Group Product Manager, Director of Product or Product Lead.
We call this transition the Product Leader Canyon. Why is this a Canyon? Let's think about the product career journey as a hike up a mountain. You go from Associate Product Manager to Product Manager to Senior Product Manager by strengthening a similar set of muscles and skills. You tend to solve similar problems, but the problems you solve get harder or larger as you strengthen those skills. It's like hiking up a mountain. And as you hike, your legs and other muscles strengthen, which allows you to take on steeper and steeper climbs.
But all of a sudden you reach the transition to a product leader, and it's not just a steeper part of the mountain. It's actually a wide-open canyon.
To cross that canyon is not just a more intense version of the same problem. It's a totally new set of problems that require completely different muscles, skills, and tools to cross it. And if you try to use the same muscles and skills that got you to that point, you aren't really able to cross the canyon.
The challenge here is that going from an APM to PM to Senior PM requires doing similar things with deeper sophistication and expertise. However, the skills required in outcomes produced by successful product leaders are not the same as those required of Senior Product Managers.
1
1
Casey Winters is the Chief Product Officer at Eventbrite -- formerly of Pinterest and GrubHub -- and one of the co-creators on this program. He has a story about this.
He says, "When I joined Pinterest, I was very focused on improving the key metrics of the business as a growth PM. Fast forward a couple of years, and as a growth leader I found myself much more concerned about making sure these metrics could continue to perform at the level they were across all the teams, but this required a completely different type of product work. So we went from running experiments all of the time to building pipelines and maintaining tools and building monitoring, and building better processes for technical and design debt."
1
Soon, we'll talk  more about the details of this example and many others.
2
In order to be successful  as a product leader, though, there are two distinct transitions that you need to make:
1
Going from depth in one type of product work to breadth across multiple types of product work.
Going from influencing specific product outcomes to influencing a broader product strategy.
2
  A lot of people fail to make these transitions because they don't recognize that what got you here, won't get you there. That is to say that after years of developing expertise and specific skills, transitioning product leaders need to readopt a learning mindset and acknowledge that their experience is not enough to succeed.
This can be frustrating. A lot of people would prefer to continue to do the job they're already good at and just keep getting better and better at that over time, instead of resetting and learning a whole new set of skills. And that's completely OK -- there are paths for those people.
But for that reason, making this transition to a product leader might not be for everybody. However, those willing to do that reset -- to learn and explore and make the jump into new areas -- have the opportunity to influence their organization more broadly, create a lot more value, and develop more diverse professional skills.
In this program, we'll discuss how to make these transitions in order to be a successful product leader who influences a multidimensional product strategy. We'll start in this introductory module by providing more detail behind each of these transitions and previewing what we'll discuss in the rest of the program.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Traceback (most recent call last):
  File "C:\Software Projects\product-manager-companion\app3.py", line 44, in <module>
    file.write(driver.find_element(By.XPATH, "/html/body").text)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.2288.0_x64__qbz5n2kfra8p0\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u2192' in position 527: character maps to <undefined>
PS C:\Software Projects\product-manager-companion> python app3.py
Overview
Contents
From Product Management to Product Leadership
Crossing the Canyon
5 min
Portfolio of Product Work
8 min
Great Product Strategy
8 min
Expert Collaborators
Fareed Mosavat
Chief Development Officer @ Reforge
Casey Winters
Advisor @ Eventbrite, Whatnot, Faire
Leading A Product Strategy
Share
Next Lesson
Material
Bookmarks
Reforge is better with colleagues & friends. Send someone this module, and they’ll get an email invitation to sign in to Reforge to view it as your guest.
Share Module →
4:56
1x
Paused (Space ⎵ )
Bookmark
(Return/Enter ⏎ )
Everyone seems to have their own definition of what product management is, and what successful product management looks like. We end up with a field full of confusing buzzwords and cliches.
This problem is intensified by the fact that product management job titles, descriptions and responsibilities just vary greatly across companies. A Product Manager at Airbnb is equivalent to a Senior Product Manager at LinkedIn, which could be a Principal Product Manager at another company, or Head of Product at an early stage company.
All of this just makes it really hard to pin down what success looks like at different stages of a product manager's career. And if you don't know what success looks like, that makes it really hard for you to navigate your product career effectively.
6
We set out to research the product function among leaders in the Reforge network, including VP and C-level product leaders at frontier companies like Airbnb, Facebook, HubSpot, Instagram, Tinder, Stripe, Eventbrite, Slack, and many more.
What we found is that regardless of job title, everyone identified a particular friction point in a product manager's career as they transition from an experienced product manager role, like a Senior PM, to a product leader role, like a Group Product Manager, Director of Product or Product Lead.
We call this transition the Product Leader Canyon. Why is this a Canyon? Let's think about the product career journey as a hike up a mountain. You go from Associate Product Manager to Product Manager to Senior Product Manager by strengthening a similar set of muscles and skills. You tend to solve similar problems, but the problems you solve get harder or larger as you strengthen those skills. It's like hiking up a mountain. And as you hike, your legs and other muscles strengthen, which allows you to take on steeper and steeper climbs.
But all of a sudden you reach the transition to a product leader, and it's not just a steeper part of the mountain. It's actually a wide-open canyon.
To cross that canyon is not just a more intense version of the same problem. It's a totally new set of problems that require completely different muscles, skills, and tools to cross it. And if you try to use the same muscles and skills that got you to that point, you aren't really able to cross the canyon.
The challenge here is that going from an APM to PM to Senior PM requires doing similar things with deeper sophistication and expertise. However, the skills required in outcomes produced by successful product leaders are not the same as those required of Senior Product Managers.
1
1
Casey Winters is the Chief Product Officer at Eventbrite -- formerly of Pinterest and GrubHub -- and one of the co-creators on this program. He has a story about this.
He says, "When I joined Pinterest, I was very focused on improving the key metrics of the business as a growth PM. Fast forward a couple of years, and as a growth leader I found myself much more concerned about making sure these metrics could continue to perform at the level they were across all the teams, but this required a completely different type of product work. So we went from running experiments all of the time to building pipelines and maintaining tools and building monitoring, and building better processes for technical and design debt."
1
Soon, we'll talk  more about the details of this example and many others.
2
In order to be successful  as a product leader, though, there are two distinct transitions that you need to make:
1
Going from depth in one type of product work to breadth across multiple types of product work.
Going from influencing specific product outcomes to influencing a broader product strategy.
2
  A lot of people fail to make these transitions because they don't recognize that what got you here, won't get you there. That is to say that after years of developing expertise and specific skills, transitioning product leaders need to readopt a learning mindset and acknowledge that their experience is not enough to succeed.
This can be frustrating. A lot of people would prefer to continue to do the job they're already good at and just keep getting better and better at that over time, instead of resetting and learning a whole new set of skills. And that's completely OK -- there are paths for those people.
But for that reason, making this transition to a product leader might not be for everybody. However, those willing to do that reset -- to learn and explore and make the jump into new areas -- have the opportunity to influence their organization more broadly, create a lot more value, and develop more diverse professional skills.
In this program, we'll discuss how to make these transitions in order to be a successful product leader who influences a multidimensional product strategy. We'll start in this introductory module by providing more detail behind each of these transitions and previewing what we'll discuss in the rest of the program.

Copyright © 2022 REFORGE. Sharing of content and user accounts is strictly prohibited.
Your team’s subscription will automatically renew in 8 days
View Plan Details
Traceback (most recent call last):
  File "C:\Software Projects\product-manager-companion\app3.py", line 44, in <module>
    file.write(driver.find_element(By.XPATH, "/html/body").text + "\n")
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.2288.0_x64__qbz5n2kfra8p0\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u2192' in position 527: character maps to <undefined>
PS C:\Software Projects\product-manager-companion> python app3.py
Traceback (most recent call last):
  File "C:\Software Projects\product-manager-companion\app3.py", line 27, in <module>
    file = open("All Product Strategy Text", "w" , "utf-8")
TypeError: 'str' object cannot be interpreted as an integer
PS C:\Software Projects\product-manager-companion> ^C
PS C:\Software Projects\product-manager-companion> python app3.py
Sign in with Google
Sign in
to continue to reforge.com
Email or phone
Forgot email?
To continue, Google will share your name, email address, language preference, and profile picture with reforge.com.
Next
Create account
‪English (United States)‬
HelpPrivacyTerms
Sign in to continue to reforge.com
Traceback (most recent call last):
  File "C:\Software Projects\product-manager-companion\app3.py", line 44, in <module>
    file.write(driver.str(find_element(By.XPATH, "/html/body").text) + "\n")